
Kaai_ElTitan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d73  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098d  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000831  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044d  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  88:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <power_on>:
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<4;i++){
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	0f c0       	rjmp	.+30     	; 0xb4 <power_on+0x24>
		PORTB ^= 1 << PB5;
  96:	95 b1       	in	r25, 0x05	; 5
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	89 27       	eor	r24, r25
  9c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	4f ef       	ldi	r20, 0xFF	; 255
  a0:	89 e6       	ldi	r24, 0x69	; 105
  a2:	98 e1       	ldi	r25, 0x18	; 24
  a4:	41 50       	subi	r20, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <power_on+0x14>
  ac:	00 c0       	rjmp	.+0      	; 0xae <power_on+0x1e>
  ae:	00 00       	nop
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<4;i++){
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	24 30       	cpi	r18, 0x04	; 4
  b6:	31 05       	cpc	r19, r1
  b8:	74 f3       	brlt	.-36     	; 0x96 <power_on+0x6>
		PORTB ^= 1 << PB5;
		_delay_ms(500);
	}
}
  ba:	08 95       	ret

000000bc <main>:
#include "us_sensor.h"
#include "motors.h"
#include "ir_sensor.h"

int main(){
	init_ports();
  bc:	0e 94 09 01 	call	0x212	; 0x212 <init_ports>
	power_on();
  c0:	0e 94 48 00 	call	0x90	; 0x90 <power_on>
	init_timer1();
  c4:	0e 94 93 00 	call	0x126	; 0x126 <init_timer1>
	
	motor_left(motor_stop,0);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_left>
	motor_right(motor_stop,0);
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 a1 00 	call	0x142	; 0x142 <motor_right>
	
	init_ext_int0();
  d8:	0e 94 08 02 	call	0x410	; 0x410 <init_ext_int0>
	init_timer0();
  dc:	0e 94 11 02 	call	0x422	; 0x422 <init_timer0>
	
	while (1){
		example_sonar();
  e0:	0e 94 1c 02 	call	0x438	; 0x438 <example_sonar>
		if(get_distance() >= 0.10){
  e4:	0e 94 2c 02 	call	0x458	; 0x458 <get_distance>
  e8:	2d ec       	ldi	r18, 0xCD	; 205
  ea:	3c ec       	ldi	r19, 0xCC	; 204
  ec:	4c ec       	ldi	r20, 0xCC	; 204
  ee:	5d e3       	ldi	r21, 0x3D	; 61
  f0:	0e 94 76 03 	call	0x6ec	; 0x6ec <__gesf2>
  f4:	88 23       	and	r24, r24
  f6:	64 f0       	brlt	.+24     	; 0x110 <main+0x54>
			PORTB |= 1 << PB5;
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	85 b9       	out	0x05, r24	; 5
			motor_left(motor_forward,250);
  fe:	6a ef       	ldi	r22, 0xFA	; 250
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_left>
			motor_right(motor_forward,250);
 106:	6a ef       	ldi	r22, 0xFA	; 250
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 a1 00 	call	0x142	; 0x142 <motor_right>
 10e:	e8 cf       	rjmp	.-48     	; 0xe0 <main+0x24>
		}
		else{
			PORTB &= 0 << PB5;
 110:	85 b1       	in	r24, 0x05	; 5
 112:	15 b8       	out	0x05, r1	; 5
			motor_left(motor_stop,0);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_left>
			motor_right(motor_stop,0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 a1 00 	call	0x142	; 0x142 <motor_right>
 124:	dd cf       	rjmp	.-70     	; 0xe0 <main+0x24>

00000126 <init_timer1>:
#include "motors.h"

// PWM for speed control
void init_timer1()
{
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase Correct, 8-bit
 126:	e0 e8       	ldi	r30, 0x80	; 128
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//low level on OC1A/OC1B when up-counting
 130:	80 81       	ld	r24, Z
 132:	80 6a       	ori	r24, 0xA0	; 160
 134:	80 83       	st	Z, r24
										//high level on OC1A/OC1B on Compare Match when downcounting
	TCCR1B |= (1<<CS12)|(1<<CS10);	//frequency=fcpu/1024 ~ 15Khz (motors operating frequency)
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	85 60       	ori	r24, 0x05	; 5
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <motor_right>:
}

//motor right direction&speed control
void motor_right(uint8_t dir,uint8_t speed)
{
 142:	cf 93       	push	r28
	//direction
	if(dir == motor_stop)
 144:	81 11       	cpse	r24, r1
 146:	05 c0       	rjmp	.+10     	; 0x152 <motor_right+0x10>
	{
		PORTC &= 0 << PC4;
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	18 b8       	out	0x08, r1	; 8
		PORTC &= 0 << PC5;
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	18 b8       	out	0x08, r1	; 8
 150:	0f c0       	rjmp	.+30     	; 0x170 <motor_right+0x2e>
	}
	else if(dir == motor_forward)
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	31 f4       	brne	.+12     	; 0x162 <motor_right+0x20>
	{
		PORTC &= 0 << PC4;
 156:	88 b1       	in	r24, 0x08	; 8
 158:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC5;
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	88 b9       	out	0x08, r24	; 8
 160:	07 c0       	rjmp	.+14     	; 0x170 <motor_right+0x2e>
	}
	else if(dir == motor_backward)
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	29 f4       	brne	.+10     	; 0x170 <motor_right+0x2e>
	{
		PORTC &= 0 << PC5;
 166:	88 b1       	in	r24, 0x08	; 8
 168:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC4;
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	80 61       	ori	r24, 0x10	; 16
 16e:	88 b9       	out	0x08, r24	; 8
	}

	//Speed
	uint8_t sreg = SREG;//Status Register
 170:	cf b7       	in	r28, 0x3f	; 63

	cli();
 172:	f8 94       	cli
	OCR1B = (uint8_t)(((float)(speed/255.0)*robo_speed));
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__floatsisf>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	4f e7       	ldi	r20, 0x7F	; 127
 184:	53 e4       	ldi	r21, 0x43	; 67
 186:	0e 94 47 02 	call	0x48e	; 0x48e <__divsf3>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	4f e7       	ldi	r20, 0x7F	; 127
 190:	53 e4       	ldi	r21, 0x43	; 67
 192:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__mulsf3>
 196:	0e 94 b9 02 	call	0x572	; 0x572 <__fixunssfsi>
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1a0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	SREG = sreg;
 1a4:	cf bf       	out	0x3f, r28	; 63
}
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <motor_left>:

//motor left direction&speed control
void motor_left(uint8_t dir,uint8_t speed)
{
 1aa:	cf 93       	push	r28
	//Direction
	if(dir == motor_stop)
 1ac:	81 11       	cpse	r24, r1
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <motor_left+0x10>
	{
		PORTB &= 0 << PB3;
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	15 b8       	out	0x05, r1	; 5
		PORTB &= 0 << PB4;
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	15 b8       	out	0x05, r1	; 5
 1b8:	0f c0       	rjmp	.+30     	; 0x1d8 <motor_left+0x2e>
	}
	else if(dir == motor_forward)
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	31 f4       	brne	.+12     	; 0x1ca <motor_left+0x20>
	{
		PORTB &= 0 << PB3;
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB4;
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	85 b9       	out	0x05, r24	; 5
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <motor_left+0x2e>
	}
	else if(dir == motor_backward)
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	29 f4       	brne	.+10     	; 0x1d8 <motor_left+0x2e>
	{
		PORTB &= 0 << PB4;
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB3;
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	85 b9       	out	0x05, r24	; 5
	}

	//Speed
	uint8_t sreg = SREG;
 1d8:	cf b7       	in	r28, 0x3f	; 63
	
	cli();
 1da:	f8 94       	cli
	OCR1A = (uint8_t)(((float)(speed/255.0)*robo_speed));
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__floatsisf>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	4f e7       	ldi	r20, 0x7F	; 127
 1ec:	53 e4       	ldi	r21, 0x43	; 67
 1ee:	0e 94 47 02 	call	0x48e	; 0x48e <__divsf3>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	4f e7       	ldi	r20, 0x7F	; 127
 1f8:	53 e4       	ldi	r21, 0x43	; 67
 1fa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__mulsf3>
 1fe:	0e 94 b9 02 	call	0x572	; 0x572 <__fixunssfsi>
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 208:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	SREG = sreg;
 20c:	cf bf       	out	0x3f, r28	; 63
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void){
	//Ultrasonic sensor
	DDRB |= (1 << PB0);			//PB0 Enable output for trigger
 212:	84 b1       	in	r24, 0x04	; 4
 214:	81 60       	ori	r24, 0x01	; 1
 216:	84 b9       	out	0x04, r24	; 4
	PORTB &= (0 << PB0);		//Clear Output
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	15 b8       	out	0x05, r1	; 5
	DDRD &= 0 << PD2;			//Input for echo on external interrupt
 21c:	8a b1       	in	r24, 0x0a	; 10
 21e:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PD1);		//Activate PullUp Resistor
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	82 60       	ori	r24, 0x02	; 2
 224:	8b b9       	out	0x0b, r24	; 11
	//Timer
	DDRB |= (1 << PB1);			//OC1A enable Output for Left Motor
 226:	84 b1       	in	r24, 0x04	; 4
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2);			//OC1B enable Output for right motor
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	84 b9       	out	0x04, r24	; 4
	//Motor Direction
	DDRB |= (1 << PB3) | (1 << PB4);//Left motor
 232:	84 b1       	in	r24, 0x04	; 4
 234:	88 61       	ori	r24, 0x18	; 24
 236:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4) | (1 << PC5);//Right motor
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	80 63       	ori	r24, 0x30	; 48
 23c:	87 b9       	out	0x07, r24	; 7
	//Power on indicator
	DDRB |= (1 << PB5);				//Power on led indicator
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	80 62       	ori	r24, 0x20	; 32
 242:	84 b9       	out	0x04, r24	; 4
 244:	08 95       	ret

00000246 <__vector_16>:
volatile uint32_t timerCounter = 0;
volatile int us_presence = 0;
volatile float distance = 0;

//timer overflow interrupt, each time when timer value passes 255 value
SIGNAL(TIMER0_OVF_vect){
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
	if(up){				//voltage rise was detected previously
 25a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <up>
 25e:	88 23       	and	r24, r24
 260:	c1 f1       	breq	.+112    	; 0x2d2 <__vector_16+0x8c>
		timerCounter++;		//count the number of overflows
 262:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerCounter>
 266:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerCounter+0x1>
 26a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerCounter+0x2>
 26e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerCounter+0x3>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	a1 1d       	adc	r26, r1
 276:	b1 1d       	adc	r27, r1
 278:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timerCounter>
 27c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timerCounter+0x1>
 280:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timerCounter+0x2>
 284:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timerCounter+0x3>
		//don t wait too long for the sonar end response, stop if time for measuring the distance exceed the limits
		uint32_t ticks = timerCounter*256+TCNT0;
 288:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerCounter>
 28c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerCounter+0x1>
 290:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerCounter+0x2>
 294:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerCounter+0x3>
 298:	ba 2f       	mov	r27, r26
 29a:	a9 2f       	mov	r26, r25
 29c:	98 2f       	mov	r25, r24
 29e:	88 27       	eor	r24, r24
 2a0:	26 b5       	in	r18, 0x26	; 38
 2a2:	82 0f       	add	r24, r18
 2a4:	91 1d       	adc	r25, r1
 2a6:	a1 1d       	adc	r26, r1
 2a8:	b1 1d       	adc	r27, r1
		uint32_t max_ticks = (uint32_t)MAX_RESP_TIME_MS*INSTR_PER_MS;
		if(ticks>max_ticks){
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	95 43       	sbci	r25, 0x35	; 53
 2ae:	ac 40       	sbci	r26, 0x0C	; 12
 2b0:	b1 05       	cpc	r27, r1
 2b2:	78 f0       	brcs	.+30     	; 0x2d2 <__vector_16+0x8c>
			up=0;			//stop counting timer values
 2b4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <up>
			running=0;		//ultrasound scan done
 2b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <running>
			result = -1;	//show that measurement failed with a timeout (could return max distance here if needed)
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	dc 01       	movw	r26, r24
 2c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <result>
 2c6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <result+0x1>
 2ca:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <result+0x2>
 2ce:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <result+0x3>
		}
		
	}
}
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_1>:

//interrupt on INT0 pin, to detect high/low voltage changes
ISR(INT0_vect){
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	cf 92       	push	r12
 2f2:	df 92       	push	r13
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	if (running){		//accept interrupts only when sonar was started
 310:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <running>
 314:	88 23       	and	r24, r24
 316:	09 f4       	brne	.+2      	; 0x31a <__vector_1+0x34>
 318:	53 c0       	rjmp	.+166    	; 0x3c0 <__vector_1+0xda>
		if(up==0){		//voltage rise, start time measurement 
 31a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <up>
 31e:	81 11       	cpse	r24, r1
 320:	0d c0       	rjmp	.+26     	; 0x33c <__vector_1+0x56>
			up=1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <up>
			timerCounter=0;
 328:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timerCounter>
 32c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timerCounter+0x1>
 330:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timerCounter+0x2>
 334:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timerCounter+0x3>
			TCNT0=0;	//reset timer counter
 338:	16 bc       	out	0x26, r1	; 38
 33a:	42 c0       	rjmp	.+132    	; 0x3c0 <__vector_1+0xda>
		}
		else{
			//voltage drop, stop time measurement
			up=0;
 33c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <up>
			//d = [time_s*340m/s]/2=time_us/58
			result =(timerCounter*256+TCNT0)/58;
 340:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerCounter>
 344:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerCounter+0x1>
 348:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerCounter+0x2>
 34c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerCounter+0x3>
 350:	ba 2f       	mov	r27, r26
 352:	a9 2f       	mov	r26, r25
 354:	98 2f       	mov	r25, r24
 356:	88 27       	eor	r24, r24
 358:	26 b5       	in	r18, 0x26	; 38
 35a:	bc 01       	movw	r22, r24
 35c:	cd 01       	movw	r24, r26
 35e:	62 0f       	add	r22, r18
 360:	71 1d       	adc	r23, r1
 362:	81 1d       	adc	r24, r1
 364:	91 1d       	adc	r25, r1
 366:	0f 2e       	mov	r0, r31
 368:	fa e3       	ldi	r31, 0x3A	; 58
 36a:	cf 2e       	mov	r12, r31
 36c:	d1 2c       	mov	r13, r1
 36e:	e1 2c       	mov	r14, r1
 370:	f1 2c       	mov	r15, r1
 372:	f0 2d       	mov	r31, r0
 374:	a7 01       	movw	r20, r14
 376:	96 01       	movw	r18, r12
 378:	0e 94 0c 04 	call	0x818	; 0x818 <__udivmodsi4>
 37c:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <result>
 380:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <result+0x1>
 384:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <result+0x2>
 388:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <result+0x3>
			distance = result/58;
 38c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <result>
 390:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <result+0x1>
 394:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <result+0x2>
 398:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <result+0x3>
 39c:	a7 01       	movw	r20, r14
 39e:	96 01       	movw	r18, r12
 3a0:	0e 94 2e 04 	call	0x85c	; 0x85c <__divmodsi4>
 3a4:	ca 01       	movw	r24, r20
 3a6:	b9 01       	movw	r22, r18
 3a8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__floatsisf>
 3ac:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3b8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			running=0;
 3bc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <running>
		}
	}
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	df 90       	pop	r13
 3de:	cf 90       	pop	r12
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <send_trigger>:

void send_trigger(void){	
	PORTB &= (0<<PB0);	//clear to zero for 1us
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	85 e1       	ldi	r24, 0x15	; 21
 3f0:	8a 95       	dec	r24
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <send_trigger+0x6>
 3f4:	00 00       	nop
	_delay_us(4);
	PORTB |= (1<<PB0);	//set high for 10us
 3f6:	85 b1       	in	r24, 0x05	; 5
 3f8:	81 60       	ori	r24, 0x01	; 1
 3fa:	85 b9       	out	0x05, r24	; 5
	running = 1;		//sonar launched
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <running>
 402:	85 e3       	ldi	r24, 0x35	; 53
 404:	8a 95       	dec	r24
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 00       	nop
	_delay_us(10);
	PORTB &= (0<<PB0);	//clear
 40a:	85 b1       	in	r24, 0x05	; 5
 40c:	15 b8       	out	0x05, r1	; 5
 40e:	08 95       	ret

00000410 <init_ext_int0>:
}

//initialize external interrupt
void init_ext_int0(void){
	EICRA |= (1<<ISC00);	//Interrupt on any logical change 
 410:	e9 e6       	ldi	r30, 0x69	; 105
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	81 60       	ori	r24, 0x01	; 1
 418:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);		//enable INT0
 41a:	8d b3       	in	r24, 0x1d	; 29
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	8d bb       	out	0x1d, r24	; 29
 420:	08 95       	ret

00000422 <init_timer0>:
}

//initialize timer to count up
void init_timer0(void){
	TCCR0B |= (1 << CS00);		//select internal clock with no prescaling
 422:	85 b5       	in	r24, 0x25	; 37
 424:	81 60       	ori	r24, 0x01	; 1
 426:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;				// reset counter to zero
 428:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<TOIE0);	//enable timer interrupt
 42a:	ee e6       	ldi	r30, 0x6E	; 110
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	81 60       	ori	r24, 0x01	; 1
 432:	80 83       	st	Z, r24
	sei();					//enable all(global)interrupts
 434:	78 94       	sei
 436:	08 95       	ret

00000438 <example_sonar>:
}

void example_sonar(void){	
		for(;;){
		if(running == 0){		//launch only when next iteration can happen
 438:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <running>
 43c:	81 11       	cpse	r24, r1
 43e:	fc cf       	rjmp	.-8      	; 0x438 <example_sonar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	80 e7       	ldi	r24, 0x70	; 112
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <example_sonar+0xe>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <example_sonar+0x18>
 450:	00 00       	nop
			//create a delay between tests, to compensate for old echoes
			_delay_ms(DELAY_BETWEEN_TESTS_MS);
			send_trigger();
 452:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_trigger>
 456:	08 95       	ret

00000458 <get_distance>:
		}
	}
}

float get_distance(void){
	distance=result;
 458:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <result>
 45c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <result+0x1>
 460:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <result+0x2>
 464:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <result+0x3>
 468:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__floatsisf>
 46c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 470:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 474:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 478:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	return distance;
 47c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 480:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 484:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 488:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 48c:	08 95       	ret

0000048e <__divsf3>:
 48e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3x>
 492:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_round>
 496:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_pscB>
 49a:	58 f0       	brcs	.+22     	; 0x4b2 <__divsf3+0x24>
 49c:	0e 94 2e 03 	call	0x65c	; 0x65c <__fp_pscA>
 4a0:	40 f0       	brcs	.+16     	; 0x4b2 <__divsf3+0x24>
 4a2:	29 f4       	brne	.+10     	; 0x4ae <__divsf3+0x20>
 4a4:	5f 3f       	cpi	r21, 0xFF	; 255
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <__divsf3+0x24>
 4a8:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_inf>
 4ac:	51 11       	cpse	r21, r1
 4ae:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_szero>
 4b2:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_nan>

000004b6 <__divsf3x>:
 4b6:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_split3>
 4ba:	68 f3       	brcs	.-38     	; 0x496 <__divsf3+0x8>

000004bc <__divsf3_pse>:
 4bc:	99 23       	and	r25, r25
 4be:	b1 f3       	breq	.-20     	; 0x4ac <__divsf3+0x1e>
 4c0:	55 23       	and	r21, r21
 4c2:	91 f3       	breq	.-28     	; 0x4a8 <__divsf3+0x1a>
 4c4:	95 1b       	sub	r25, r21
 4c6:	55 0b       	sbc	r21, r21
 4c8:	bb 27       	eor	r27, r27
 4ca:	aa 27       	eor	r26, r26
 4cc:	62 17       	cp	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	38 f0       	brcs	.+14     	; 0x4e2 <__divsf3_pse+0x26>
 4d4:	9f 5f       	subi	r25, 0xFF	; 255
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	22 0f       	add	r18, r18
 4da:	33 1f       	adc	r19, r19
 4dc:	44 1f       	adc	r20, r20
 4de:	aa 1f       	adc	r26, r26
 4e0:	a9 f3       	breq	.-22     	; 0x4cc <__divsf3_pse+0x10>
 4e2:	35 d0       	rcall	.+106    	; 0x54e <__divsf3_pse+0x92>
 4e4:	0e 2e       	mov	r0, r30
 4e6:	3a f0       	brmi	.+14     	; 0x4f6 <__divsf3_pse+0x3a>
 4e8:	e0 e8       	ldi	r30, 0x80	; 128
 4ea:	32 d0       	rcall	.+100    	; 0x550 <__divsf3_pse+0x94>
 4ec:	91 50       	subi	r25, 0x01	; 1
 4ee:	50 40       	sbci	r21, 0x00	; 0
 4f0:	e6 95       	lsr	r30
 4f2:	00 1c       	adc	r0, r0
 4f4:	ca f7       	brpl	.-14     	; 0x4e8 <__divsf3_pse+0x2c>
 4f6:	2b d0       	rcall	.+86     	; 0x54e <__divsf3_pse+0x92>
 4f8:	fe 2f       	mov	r31, r30
 4fa:	29 d0       	rcall	.+82     	; 0x54e <__divsf3_pse+0x92>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	bb 1f       	adc	r27, r27
 504:	26 17       	cp	r18, r22
 506:	37 07       	cpc	r19, r23
 508:	48 07       	cpc	r20, r24
 50a:	ab 07       	cpc	r26, r27
 50c:	b0 e8       	ldi	r27, 0x80	; 128
 50e:	09 f0       	breq	.+2      	; 0x512 <__divsf3_pse+0x56>
 510:	bb 0b       	sbc	r27, r27
 512:	80 2d       	mov	r24, r0
 514:	bf 01       	movw	r22, r30
 516:	ff 27       	eor	r31, r31
 518:	93 58       	subi	r25, 0x83	; 131
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	3a f0       	brmi	.+14     	; 0x52c <__divsf3_pse+0x70>
 51e:	9e 3f       	cpi	r25, 0xFE	; 254
 520:	51 05       	cpc	r21, r1
 522:	78 f0       	brcs	.+30     	; 0x542 <__divsf3_pse+0x86>
 524:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_inf>
 528:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_szero>
 52c:	5f 3f       	cpi	r21, 0xFF	; 255
 52e:	e4 f3       	brlt	.-8      	; 0x528 <__divsf3_pse+0x6c>
 530:	98 3e       	cpi	r25, 0xE8	; 232
 532:	d4 f3       	brlt	.-12     	; 0x528 <__divsf3_pse+0x6c>
 534:	86 95       	lsr	r24
 536:	77 95       	ror	r23
 538:	67 95       	ror	r22
 53a:	b7 95       	ror	r27
 53c:	f7 95       	ror	r31
 53e:	9f 5f       	subi	r25, 0xFF	; 255
 540:	c9 f7       	brne	.-14     	; 0x534 <__divsf3_pse+0x78>
 542:	88 0f       	add	r24, r24
 544:	91 1d       	adc	r25, r1
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	97 f9       	bld	r25, 7
 54c:	08 95       	ret
 54e:	e1 e0       	ldi	r30, 0x01	; 1
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	bb 1f       	adc	r27, r27
 558:	62 17       	cp	r22, r18
 55a:	73 07       	cpc	r23, r19
 55c:	84 07       	cpc	r24, r20
 55e:	ba 07       	cpc	r27, r26
 560:	20 f0       	brcs	.+8      	; 0x56a <__divsf3_pse+0xae>
 562:	62 1b       	sub	r22, r18
 564:	73 0b       	sbc	r23, r19
 566:	84 0b       	sbc	r24, r20
 568:	ba 0b       	sbc	r27, r26
 56a:	ee 1f       	adc	r30, r30
 56c:	88 f7       	brcc	.-30     	; 0x550 <__divsf3_pse+0x94>
 56e:	e0 95       	com	r30
 570:	08 95       	ret

00000572 <__fixunssfsi>:
 572:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_splitA>
 576:	88 f0       	brcs	.+34     	; 0x59a <__fixunssfsi+0x28>
 578:	9f 57       	subi	r25, 0x7F	; 127
 57a:	98 f0       	brcs	.+38     	; 0x5a2 <__fixunssfsi+0x30>
 57c:	b9 2f       	mov	r27, r25
 57e:	99 27       	eor	r25, r25
 580:	b7 51       	subi	r27, 0x17	; 23
 582:	b0 f0       	brcs	.+44     	; 0x5b0 <__fixunssfsi+0x3e>
 584:	e1 f0       	breq	.+56     	; 0x5be <__fixunssfsi+0x4c>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	1a f0       	brmi	.+6      	; 0x596 <__fixunssfsi+0x24>
 590:	ba 95       	dec	r27
 592:	c9 f7       	brne	.-14     	; 0x586 <__fixunssfsi+0x14>
 594:	14 c0       	rjmp	.+40     	; 0x5be <__fixunssfsi+0x4c>
 596:	b1 30       	cpi	r27, 0x01	; 1
 598:	91 f0       	breq	.+36     	; 0x5be <__fixunssfsi+0x4c>
 59a:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_zero>
 59e:	b1 e0       	ldi	r27, 0x01	; 1
 5a0:	08 95       	ret
 5a2:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_zero>
 5a6:	67 2f       	mov	r22, r23
 5a8:	78 2f       	mov	r23, r24
 5aa:	88 27       	eor	r24, r24
 5ac:	b8 5f       	subi	r27, 0xF8	; 248
 5ae:	39 f0       	breq	.+14     	; 0x5be <__fixunssfsi+0x4c>
 5b0:	b9 3f       	cpi	r27, 0xF9	; 249
 5b2:	cc f3       	brlt	.-14     	; 0x5a6 <__fixunssfsi+0x34>
 5b4:	86 95       	lsr	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b3 95       	inc	r27
 5bc:	d9 f7       	brne	.-10     	; 0x5b4 <__fixunssfsi+0x42>
 5be:	3e f4       	brtc	.+14     	; 0x5ce <__fixunssfsi+0x5c>
 5c0:	90 95       	com	r25
 5c2:	80 95       	com	r24
 5c4:	70 95       	com	r23
 5c6:	61 95       	neg	r22
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	08 95       	ret

000005d0 <__floatunsisf>:
 5d0:	e8 94       	clt
 5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <__floatsisf+0x12>

000005d4 <__floatsisf>:
 5d4:	97 fb       	bst	r25, 7
 5d6:	3e f4       	brtc	.+14     	; 0x5e6 <__floatsisf+0x12>
 5d8:	90 95       	com	r25
 5da:	80 95       	com	r24
 5dc:	70 95       	com	r23
 5de:	61 95       	neg	r22
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	8f 4f       	sbci	r24, 0xFF	; 255
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	99 23       	and	r25, r25
 5e8:	a9 f0       	breq	.+42     	; 0x614 <__floatsisf+0x40>
 5ea:	f9 2f       	mov	r31, r25
 5ec:	96 e9       	ldi	r25, 0x96	; 150
 5ee:	bb 27       	eor	r27, r27
 5f0:	93 95       	inc	r25
 5f2:	f6 95       	lsr	r31
 5f4:	87 95       	ror	r24
 5f6:	77 95       	ror	r23
 5f8:	67 95       	ror	r22
 5fa:	b7 95       	ror	r27
 5fc:	f1 11       	cpse	r31, r1
 5fe:	f8 cf       	rjmp	.-16     	; 0x5f0 <__floatsisf+0x1c>
 600:	fa f4       	brpl	.+62     	; 0x640 <__floatsisf+0x6c>
 602:	bb 0f       	add	r27, r27
 604:	11 f4       	brne	.+4      	; 0x60a <__floatsisf+0x36>
 606:	60 ff       	sbrs	r22, 0
 608:	1b c0       	rjmp	.+54     	; 0x640 <__floatsisf+0x6c>
 60a:	6f 5f       	subi	r22, 0xFF	; 255
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	16 c0       	rjmp	.+44     	; 0x640 <__floatsisf+0x6c>
 614:	88 23       	and	r24, r24
 616:	11 f0       	breq	.+4      	; 0x61c <__floatsisf+0x48>
 618:	96 e9       	ldi	r25, 0x96	; 150
 61a:	11 c0       	rjmp	.+34     	; 0x63e <__floatsisf+0x6a>
 61c:	77 23       	and	r23, r23
 61e:	21 f0       	breq	.+8      	; 0x628 <__floatsisf+0x54>
 620:	9e e8       	ldi	r25, 0x8E	; 142
 622:	87 2f       	mov	r24, r23
 624:	76 2f       	mov	r23, r22
 626:	05 c0       	rjmp	.+10     	; 0x632 <__floatsisf+0x5e>
 628:	66 23       	and	r22, r22
 62a:	71 f0       	breq	.+28     	; 0x648 <__floatsisf+0x74>
 62c:	96 e8       	ldi	r25, 0x86	; 134
 62e:	86 2f       	mov	r24, r22
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	2a f0       	brmi	.+10     	; 0x640 <__floatsisf+0x6c>
 636:	9a 95       	dec	r25
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	da f7       	brpl	.-10     	; 0x636 <__floatsisf+0x62>
 640:	88 0f       	add	r24, r24
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret

0000064a <__fp_inf>:
 64a:	97 f9       	bld	r25, 7
 64c:	9f 67       	ori	r25, 0x7F	; 127
 64e:	80 e8       	ldi	r24, 0x80	; 128
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	08 95       	ret

00000656 <__fp_nan>:
 656:	9f ef       	ldi	r25, 0xFF	; 255
 658:	80 ec       	ldi	r24, 0xC0	; 192
 65a:	08 95       	ret

0000065c <__fp_pscA>:
 65c:	00 24       	eor	r0, r0
 65e:	0a 94       	dec	r0
 660:	16 16       	cp	r1, r22
 662:	17 06       	cpc	r1, r23
 664:	18 06       	cpc	r1, r24
 666:	09 06       	cpc	r0, r25
 668:	08 95       	ret

0000066a <__fp_pscB>:
 66a:	00 24       	eor	r0, r0
 66c:	0a 94       	dec	r0
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	14 06       	cpc	r1, r20
 674:	05 06       	cpc	r0, r21
 676:	08 95       	ret

00000678 <__fp_round>:
 678:	09 2e       	mov	r0, r25
 67a:	03 94       	inc	r0
 67c:	00 0c       	add	r0, r0
 67e:	11 f4       	brne	.+4      	; 0x684 <__fp_round+0xc>
 680:	88 23       	and	r24, r24
 682:	52 f0       	brmi	.+20     	; 0x698 <__fp_round+0x20>
 684:	bb 0f       	add	r27, r27
 686:	40 f4       	brcc	.+16     	; 0x698 <__fp_round+0x20>
 688:	bf 2b       	or	r27, r31
 68a:	11 f4       	brne	.+4      	; 0x690 <__fp_round+0x18>
 68c:	60 ff       	sbrs	r22, 0
 68e:	04 c0       	rjmp	.+8      	; 0x698 <__fp_round+0x20>
 690:	6f 5f       	subi	r22, 0xFF	; 255
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <__fp_split3>:
 69a:	57 fd       	sbrc	r21, 7
 69c:	90 58       	subi	r25, 0x80	; 128
 69e:	44 0f       	add	r20, r20
 6a0:	55 1f       	adc	r21, r21
 6a2:	59 f0       	breq	.+22     	; 0x6ba <__fp_splitA+0x10>
 6a4:	5f 3f       	cpi	r21, 0xFF	; 255
 6a6:	71 f0       	breq	.+28     	; 0x6c4 <__fp_splitA+0x1a>
 6a8:	47 95       	ror	r20

000006aa <__fp_splitA>:
 6aa:	88 0f       	add	r24, r24
 6ac:	97 fb       	bst	r25, 7
 6ae:	99 1f       	adc	r25, r25
 6b0:	61 f0       	breq	.+24     	; 0x6ca <__fp_splitA+0x20>
 6b2:	9f 3f       	cpi	r25, 0xFF	; 255
 6b4:	79 f0       	breq	.+30     	; 0x6d4 <__fp_splitA+0x2a>
 6b6:	87 95       	ror	r24
 6b8:	08 95       	ret
 6ba:	12 16       	cp	r1, r18
 6bc:	13 06       	cpc	r1, r19
 6be:	14 06       	cpc	r1, r20
 6c0:	55 1f       	adc	r21, r21
 6c2:	f2 cf       	rjmp	.-28     	; 0x6a8 <__fp_split3+0xe>
 6c4:	46 95       	lsr	r20
 6c6:	f1 df       	rcall	.-30     	; 0x6aa <__fp_splitA>
 6c8:	08 c0       	rjmp	.+16     	; 0x6da <__fp_splitA+0x30>
 6ca:	16 16       	cp	r1, r22
 6cc:	17 06       	cpc	r1, r23
 6ce:	18 06       	cpc	r1, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	f1 cf       	rjmp	.-30     	; 0x6b6 <__fp_splitA+0xc>
 6d4:	86 95       	lsr	r24
 6d6:	71 05       	cpc	r23, r1
 6d8:	61 05       	cpc	r22, r1
 6da:	08 94       	sec
 6dc:	08 95       	ret

000006de <__fp_zero>:
 6de:	e8 94       	clt

000006e0 <__fp_szero>:
 6e0:	bb 27       	eor	r27, r27
 6e2:	66 27       	eor	r22, r22
 6e4:	77 27       	eor	r23, r23
 6e6:	cb 01       	movw	r24, r22
 6e8:	97 f9       	bld	r25, 7
 6ea:	08 95       	ret

000006ec <__gesf2>:
 6ec:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fp_cmp>
 6f0:	08 f4       	brcc	.+2      	; 0x6f4 <__gesf2+0x8>
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	08 95       	ret

000006f6 <__mulsf3>:
 6f6:	0e 94 8e 03 	call	0x71c	; 0x71c <__mulsf3x>
 6fa:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_round>
 6fe:	0e 94 2e 03 	call	0x65c	; 0x65c <__fp_pscA>
 702:	38 f0       	brcs	.+14     	; 0x712 <__mulsf3+0x1c>
 704:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_pscB>
 708:	20 f0       	brcs	.+8      	; 0x712 <__mulsf3+0x1c>
 70a:	95 23       	and	r25, r21
 70c:	11 f0       	breq	.+4      	; 0x712 <__mulsf3+0x1c>
 70e:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_inf>
 712:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_nan>
 716:	11 24       	eor	r1, r1
 718:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_szero>

0000071c <__mulsf3x>:
 71c:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_split3>
 720:	70 f3       	brcs	.-36     	; 0x6fe <__mulsf3+0x8>

00000722 <__mulsf3_pse>:
 722:	95 9f       	mul	r25, r21
 724:	c1 f3       	breq	.-16     	; 0x716 <__mulsf3+0x20>
 726:	95 0f       	add	r25, r21
 728:	50 e0       	ldi	r21, 0x00	; 0
 72a:	55 1f       	adc	r21, r21
 72c:	62 9f       	mul	r22, r18
 72e:	f0 01       	movw	r30, r0
 730:	72 9f       	mul	r23, r18
 732:	bb 27       	eor	r27, r27
 734:	f0 0d       	add	r31, r0
 736:	b1 1d       	adc	r27, r1
 738:	63 9f       	mul	r22, r19
 73a:	aa 27       	eor	r26, r26
 73c:	f0 0d       	add	r31, r0
 73e:	b1 1d       	adc	r27, r1
 740:	aa 1f       	adc	r26, r26
 742:	64 9f       	mul	r22, r20
 744:	66 27       	eor	r22, r22
 746:	b0 0d       	add	r27, r0
 748:	a1 1d       	adc	r26, r1
 74a:	66 1f       	adc	r22, r22
 74c:	82 9f       	mul	r24, r18
 74e:	22 27       	eor	r18, r18
 750:	b0 0d       	add	r27, r0
 752:	a1 1d       	adc	r26, r1
 754:	62 1f       	adc	r22, r18
 756:	73 9f       	mul	r23, r19
 758:	b0 0d       	add	r27, r0
 75a:	a1 1d       	adc	r26, r1
 75c:	62 1f       	adc	r22, r18
 75e:	83 9f       	mul	r24, r19
 760:	a0 0d       	add	r26, r0
 762:	61 1d       	adc	r22, r1
 764:	22 1f       	adc	r18, r18
 766:	74 9f       	mul	r23, r20
 768:	33 27       	eor	r19, r19
 76a:	a0 0d       	add	r26, r0
 76c:	61 1d       	adc	r22, r1
 76e:	23 1f       	adc	r18, r19
 770:	84 9f       	mul	r24, r20
 772:	60 0d       	add	r22, r0
 774:	21 1d       	adc	r18, r1
 776:	82 2f       	mov	r24, r18
 778:	76 2f       	mov	r23, r22
 77a:	6a 2f       	mov	r22, r26
 77c:	11 24       	eor	r1, r1
 77e:	9f 57       	subi	r25, 0x7F	; 127
 780:	50 40       	sbci	r21, 0x00	; 0
 782:	9a f0       	brmi	.+38     	; 0x7aa <__mulsf3_pse+0x88>
 784:	f1 f0       	breq	.+60     	; 0x7c2 <__mulsf3_pse+0xa0>
 786:	88 23       	and	r24, r24
 788:	4a f0       	brmi	.+18     	; 0x79c <__mulsf3_pse+0x7a>
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	bb 1f       	adc	r27, r27
 790:	66 1f       	adc	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	91 50       	subi	r25, 0x01	; 1
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	a9 f7       	brne	.-22     	; 0x786 <__mulsf3_pse+0x64>
 79c:	9e 3f       	cpi	r25, 0xFE	; 254
 79e:	51 05       	cpc	r21, r1
 7a0:	80 f0       	brcs	.+32     	; 0x7c2 <__mulsf3_pse+0xa0>
 7a2:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_inf>
 7a6:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_szero>
 7aa:	5f 3f       	cpi	r21, 0xFF	; 255
 7ac:	e4 f3       	brlt	.-8      	; 0x7a6 <__mulsf3_pse+0x84>
 7ae:	98 3e       	cpi	r25, 0xE8	; 232
 7b0:	d4 f3       	brlt	.-12     	; 0x7a6 <__mulsf3_pse+0x84>
 7b2:	86 95       	lsr	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f7 95       	ror	r31
 7bc:	e7 95       	ror	r30
 7be:	9f 5f       	subi	r25, 0xFF	; 255
 7c0:	c1 f7       	brne	.-16     	; 0x7b2 <__mulsf3_pse+0x90>
 7c2:	fe 2b       	or	r31, r30
 7c4:	88 0f       	add	r24, r24
 7c6:	91 1d       	adc	r25, r1
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__fp_cmp>:
 7d0:	99 0f       	add	r25, r25
 7d2:	00 08       	sbc	r0, r0
 7d4:	55 0f       	add	r21, r21
 7d6:	aa 0b       	sbc	r26, r26
 7d8:	e0 e8       	ldi	r30, 0x80	; 128
 7da:	fe ef       	ldi	r31, 0xFE	; 254
 7dc:	16 16       	cp	r1, r22
 7de:	17 06       	cpc	r1, r23
 7e0:	e8 07       	cpc	r30, r24
 7e2:	f9 07       	cpc	r31, r25
 7e4:	c0 f0       	brcs	.+48     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	e4 07       	cpc	r30, r20
 7ec:	f5 07       	cpc	r31, r21
 7ee:	98 f0       	brcs	.+38     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f0:	62 1b       	sub	r22, r18
 7f2:	73 0b       	sbc	r23, r19
 7f4:	84 0b       	sbc	r24, r20
 7f6:	95 0b       	sbc	r25, r21
 7f8:	39 f4       	brne	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	0a 26       	eor	r0, r26
 7fc:	61 f0       	breq	.+24     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fe:	23 2b       	or	r18, r19
 800:	24 2b       	or	r18, r20
 802:	25 2b       	or	r18, r21
 804:	21 f4       	brne	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	08 95       	ret
 808:	0a 26       	eor	r0, r26
 80a:	09 f4       	brne	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	a1 40       	sbci	r26, 0x01	; 1
 80e:	a6 95       	lsr	r26
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	81 1d       	adc	r24, r1
 814:	81 1d       	adc	r24, r1
 816:	08 95       	ret

00000818 <__udivmodsi4>:
 818:	a1 e2       	ldi	r26, 0x21	; 33
 81a:	1a 2e       	mov	r1, r26
 81c:	aa 1b       	sub	r26, r26
 81e:	bb 1b       	sub	r27, r27
 820:	fd 01       	movw	r30, r26
 822:	0d c0       	rjmp	.+26     	; 0x83e <__udivmodsi4_ep>

00000824 <__udivmodsi4_loop>:
 824:	aa 1f       	adc	r26, r26
 826:	bb 1f       	adc	r27, r27
 828:	ee 1f       	adc	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	a2 17       	cp	r26, r18
 82e:	b3 07       	cpc	r27, r19
 830:	e4 07       	cpc	r30, r20
 832:	f5 07       	cpc	r31, r21
 834:	20 f0       	brcs	.+8      	; 0x83e <__udivmodsi4_ep>
 836:	a2 1b       	sub	r26, r18
 838:	b3 0b       	sbc	r27, r19
 83a:	e4 0b       	sbc	r30, r20
 83c:	f5 0b       	sbc	r31, r21

0000083e <__udivmodsi4_ep>:
 83e:	66 1f       	adc	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	1a 94       	dec	r1
 848:	69 f7       	brne	.-38     	; 0x824 <__udivmodsi4_loop>
 84a:	60 95       	com	r22
 84c:	70 95       	com	r23
 84e:	80 95       	com	r24
 850:	90 95       	com	r25
 852:	9b 01       	movw	r18, r22
 854:	ac 01       	movw	r20, r24
 856:	bd 01       	movw	r22, r26
 858:	cf 01       	movw	r24, r30
 85a:	08 95       	ret

0000085c <__divmodsi4>:
 85c:	05 2e       	mov	r0, r21
 85e:	97 fb       	bst	r25, 7
 860:	1e f4       	brtc	.+6      	; 0x868 <__divmodsi4+0xc>
 862:	00 94       	com	r0
 864:	0e 94 45 04 	call	0x88a	; 0x88a <__negsi2>
 868:	57 fd       	sbrc	r21, 7
 86a:	07 d0       	rcall	.+14     	; 0x87a <__divmodsi4_neg2>
 86c:	0e 94 0c 04 	call	0x818	; 0x818 <__udivmodsi4>
 870:	07 fc       	sbrc	r0, 7
 872:	03 d0       	rcall	.+6      	; 0x87a <__divmodsi4_neg2>
 874:	4e f4       	brtc	.+18     	; 0x888 <__divmodsi4_exit>
 876:	0c 94 45 04 	jmp	0x88a	; 0x88a <__negsi2>

0000087a <__divmodsi4_neg2>:
 87a:	50 95       	com	r21
 87c:	40 95       	com	r20
 87e:	30 95       	com	r19
 880:	21 95       	neg	r18
 882:	3f 4f       	sbci	r19, 0xFF	; 255
 884:	4f 4f       	sbci	r20, 0xFF	; 255
 886:	5f 4f       	sbci	r21, 0xFF	; 255

00000888 <__divmodsi4_exit>:
 888:	08 95       	ret

0000088a <__negsi2>:
 88a:	90 95       	com	r25
 88c:	80 95       	com	r24
 88e:	70 95       	com	r23
 890:	61 95       	neg	r22
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	08 95       	ret

0000089a <_exit>:
 89a:	f8 94       	cli

0000089c <__stop_program>:
 89c:	ff cf       	rjmp	.-2      	; 0x89c <__stop_program>
