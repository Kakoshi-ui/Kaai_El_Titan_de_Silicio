
Kaai_ElTitan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000ba0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135a  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab9  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b34  00000000  00000000  00002b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000533  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000645  00000000  00000000  00003dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  88:	0c 94 94 05 	jmp	0xb28	; 0xb28 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_irSensor>:
volatile int irs3 = 0;
volatile int irs4 = 0;
volatile int ir_detect=0;

void init_irSensor(void){
	DDRD &= (0 << PD3) & (0 << PD4);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	1a b8       	out	0x0a, r1	; 10
	DDRD &= (0 << PD5) & (0 << PD6);
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	1a b8       	out	0x0a, r1	; 10
  98:	08 95       	ret

0000009a <det_bline>:
}

int det_bline(void){
	irs1=PIND3;
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <irs1+0x1>
  a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <irs1>
	irs2=PIND4;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <irs2+0x1>
  ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <irs2>
	irs3=PIND5;
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <irs3+0x1>
  ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <irs3>
	irs4=PIND6;
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <irs4+0x1>
  c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <irs4>
	if (irs1 == 0 || irs2 == 0 || irs3 == 0 || irs4==0){
  ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <irs1>
  ce:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <irs1+0x1>
  d2:	89 2b       	or	r24, r25
  d4:	91 f0       	breq	.+36     	; 0xfa <det_bline+0x60>
  d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <irs2>
  da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <irs2+0x1>
  de:	89 2b       	or	r24, r25
  e0:	61 f0       	breq	.+24     	; 0xfa <det_bline+0x60>
  e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <irs3>
  e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <irs3+0x1>
  ea:	89 2b       	or	r24, r25
  ec:	31 f0       	breq	.+12     	; 0xfa <det_bline+0x60>
  ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <irs4>
  f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <irs4+0x1>
  f6:	89 2b       	or	r24, r25
  f8:	29 f4       	brne	.+10     	; 0x104 <det_bline+0x6a>
		ir_detect=0;
  fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	06 c0       	rjmp	.+12     	; 0x110 <det_bline+0x76>
	}
	else {
		ir_detect=1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	return ir_detect;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
}
 118:	08 95       	ret

0000011a <left_border_out>:

int left_border_out (void){
	if (irs1 == 1){
 11a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <irs1>
 11e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <irs1+0x1>
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	19 f4       	brne	.+6      	; 0x12c <left_border_out+0x12>
		return 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
	}
}
 12c:	08 95       	ret

0000012e <right_border_out>:

int right_border_out (void){
	if (irs4 == 1){
 12e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <irs4>
 132:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <irs4+0x1>
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	19 f4       	brne	.+6      	; 0x140 <right_border_out+0x12>
		return 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret
	}
}
 140:	08 95       	ret

00000142 <power_on>:

volatile int us_detect=0;

void power_on(void){
	int i;
	for(i=0;i<10;i++){
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	0f c0       	rjmp	.+30     	; 0x166 <power_on+0x24>
		PORTB ^= 1 << PB5;
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	89 27       	eor	r24, r25
 14e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	4f ef       	ldi	r20, 0xFF	; 255
 152:	89 e6       	ldi	r24, 0x69	; 105
 154:	98 e1       	ldi	r25, 0x18	; 24
 156:	41 50       	subi	r20, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <power_on+0x14>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <power_on+0x1e>
 160:	00 00       	nop

volatile int us_detect=0;

void power_on(void){
	int i;
	for(i=0;i<10;i++){
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	2a 30       	cpi	r18, 0x0A	; 10
 168:	31 05       	cpc	r19, r1
 16a:	74 f3       	brlt	.-36     	; 0x148 <power_on+0x6>
		PORTB ^= 1 << PB5;
		_delay_ms(500);
	}
}
 16c:	08 95       	ret

0000016e <main>:
#include "us_sensor.h"
#include "motors.h"
#include "ir_sensor.h"

int main(){
	init_ports(); 
 16e:	0e 94 4b 02 	call	0x496	; 0x496 <init_ports>
	init_irSensor();//Initialize all ports needed in the system
 172:	0e 94 48 00 	call	0x90	; 0x90 <init_irSensor>
	power_on();				//Turn on the L led, it will count to five until the fights starts 
 176:	0e 94 a1 00 	call	0x142	; 0x142 <power_on>
	init_ext_int0();		// initialize the external interrupts in the ports INT0 & INT1
 17a:	0e 94 4a 03 	call	0x694	; 0x694 <init_ext_int0>
	init_timer0();			//initialize the timer 0
 17e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <init_timer0>
	init_timer1();			//initialize the timer 1
 182:	0e 94 d5 01 	call	0x3aa	; 0x3aa <init_timer1>
	example_sonar();		//initialize the trigger signal for the us sensor
 186:	0e 94 5e 03 	call	0x6bc	; 0x6bc <example_sonar>
	
		if(get_distance() > 0.30){
 18a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <get_distance>
 18e:	2a e9       	ldi	r18, 0x9A	; 154
 190:	39 e9       	ldi	r19, 0x99	; 153
 192:	49 e9       	ldi	r20, 0x99	; 153
 194:	5e e3       	ldi	r21, 0x3E	; 62
 196:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gesf2>
 19a:	18 16       	cp	r1, r24
 19c:	0c f0       	brlt	.+2      	; 0x1a0 <main+0x32>
 19e:	9b c0       	rjmp	.+310    	; 0x2d6 <main+0x168>
		motor_right(motor_forward,50);
 1a0:	62 e3       	ldi	r22, 0x32	; 50
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
		motor_left(motor_stop,0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	87 ea       	ldi	r24, 0xA7	; 167
 1b4:	91 e6       	ldi	r25, 0x61	; 97
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x48>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x52>
 1c0:	00 00       	nop
		_delay_ms(2000);
		
		motor_right(motor_backward,50);
 1c2:	62 e3       	ldi	r22, 0x32	; 50
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	87 ea       	ldi	r24, 0xA7	; 167
 1ce:	91 e6       	ldi	r25, 0x61	; 97
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x62>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x6c>
 1da:	00 00       	nop
		_delay_ms(2000);
		
		motor_left(motor_forward,50);
 1dc:	62 e3       	ldi	r22, 0x32	; 50
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
		motor_right(motor_stop,0);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	87 ea       	ldi	r24, 0xA7	; 167
 1f0:	91 e6       	ldi	r25, 0x61	; 97
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x84>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x8e>
 1fc:	00 00       	nop
		_delay_ms(2000);
		
		motor_left(motor_backward,0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	87 ea       	ldi	r24, 0xA7	; 167
 20a:	91 e6       	ldi	r25, 0x61	; 97
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x9e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0xa8>
 216:	00 00       	nop
 218:	5e c0       	rjmp	.+188    	; 0x2d6 <main+0x168>
		_delay_ms(2000);
	}
	no_bline: while(det_bline() != 1){					//detect that the robo are not in the border line so it can go
		 if(get_distance() < 0.05){						//detects the distance between the robo an de object in front, depends on the distance the robo will
 21a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <get_distance>
 21e:	2d ec       	ldi	r18, 0xCD	; 205
 220:	3c ec       	ldi	r19, 0xCC	; 204
 222:	4c e4       	ldi	r20, 0x4C	; 76
 224:	5d e3       	ldi	r21, 0x3D	; 61
 226:	0e 94 89 03 	call	0x712	; 0x712 <__cmpsf2>
 22a:	88 23       	and	r24, r24
 22c:	4c f4       	brge	.+18     	; 0x240 <main+0xd2>
			 motor_right(motor_forward,255);			// run to a different velocity
 22e:	6f ef       	ldi	r22, 0xFF	; 255
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
			 motor_left(motor_forward,255);
 236:	6f ef       	ldi	r22, 0xFF	; 255
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 23e:	4b c0       	rjmp	.+150    	; 0x2d6 <main+0x168>
		 }else if(get_distance() < 0.10){
 240:	0e 94 6e 03 	call	0x6dc	; 0x6dc <get_distance>
 244:	2d ec       	ldi	r18, 0xCD	; 205
 246:	3c ec       	ldi	r19, 0xCC	; 204
 248:	4c ec       	ldi	r20, 0xCC	; 204
 24a:	5d e3       	ldi	r21, 0x3D	; 61
 24c:	0e 94 89 03 	call	0x712	; 0x712 <__cmpsf2>
 250:	88 23       	and	r24, r24
 252:	4c f4       	brge	.+18     	; 0x266 <main+0xf8>
			 motor_right(motor_forward,155);
 254:	6b e9       	ldi	r22, 0x9B	; 155
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
			 motor_left(motor_forward,155);
 25c:	6b e9       	ldi	r22, 0x9B	; 155
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 264:	38 c0       	rjmp	.+112    	; 0x2d6 <main+0x168>
		 }else if (get_distance() < 0.15){
 266:	0e 94 6e 03 	call	0x6dc	; 0x6dc <get_distance>
 26a:	2a e9       	ldi	r18, 0x9A	; 154
 26c:	39 e9       	ldi	r19, 0x99	; 153
 26e:	49 e1       	ldi	r20, 0x19	; 25
 270:	5e e3       	ldi	r21, 0x3E	; 62
 272:	0e 94 89 03 	call	0x712	; 0x712 <__cmpsf2>
 276:	88 23       	and	r24, r24
 278:	4c f4       	brge	.+18     	; 0x28c <main+0x11e>
			 motor_right(motor_forward,100);
 27a:	64 e6       	ldi	r22, 0x64	; 100
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
			 motor_left(motor_forward,100);
 282:	64 e6       	ldi	r22, 0x64	; 100
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 28a:	25 c0       	rjmp	.+74     	; 0x2d6 <main+0x168>
		 }else if(get_distance() > 0.28){
 28c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <get_distance>
 290:	29 e2       	ldi	r18, 0x29	; 41
 292:	3c e5       	ldi	r19, 0x5C	; 92
 294:	4f e8       	ldi	r20, 0x8F	; 143
 296:	5e e3       	ldi	r21, 0x3E	; 62
 298:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gesf2>
 29c:	18 16       	cp	r1, r24
 29e:	4c f4       	brge	.+18     	; 0x2b2 <main+0x144>
			 motor_right(motor_stop,0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
			 motor_left(motor_stop,0);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <main+0x168>
		 }else if(get_distance() < 0.28){
 2b2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <get_distance>
 2b6:	29 e2       	ldi	r18, 0x29	; 41
 2b8:	3c e5       	ldi	r19, 0x5C	; 92
 2ba:	4f e8       	ldi	r20, 0x8F	; 143
 2bc:	5e e3       	ldi	r21, 0x3E	; 62
 2be:	0e 94 89 03 	call	0x712	; 0x712 <__cmpsf2>
 2c2:	88 23       	and	r24, r24
 2c4:	44 f4       	brge	.+16     	; 0x2d6 <main+0x168>
			 motor_right(motor_forward,50);
 2c6:	62 e3       	ldi	r22, 0x32	; 50
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
			 motor_left(motor_forward,50);
 2ce:	62 e3       	ldi	r22, 0x32	; 50
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
		_delay_ms(2000);
		
		motor_left(motor_backward,0);
		_delay_ms(2000);
	}
	no_bline: while(det_bline() != 1){					//detect that the robo are not in the border line so it can go
 2d6:	0e 94 4d 00 	call	0x9a	; 0x9a <det_bline>
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <main+0x172>
 2de:	9d cf       	rjmp	.-198    	; 0x21a <main+0xac>
			 motor_right(motor_forward,50);
			 motor_left(motor_forward,50);
		}
	}
	
	if (det_bline() == 1 && right_border_out() == 1){
 2e0:	0e 94 4d 00 	call	0x9a	; 0x9a <det_bline>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f4       	brne	.+60     	; 0x324 <main+0x1b6>
 2e8:	0e 94 97 00 	call	0x12e	; 0x12e <right_border_out>
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	d1 f4       	brne	.+52     	; 0x324 <main+0x1b6>
		motor_right(motor_backward,100);
 2f0:	64 e6       	ldi	r22, 0x64	; 100
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
		motor_left(motor_backward,100);
 2f8:	64 e6       	ldi	r22, 0x64	; 100
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	83 ed       	ldi	r24, 0xD3	; 211
 304:	90 e3       	ldi	r25, 0x30	; 48
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x198>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x1a2>
 310:	00 00       	nop
		_delay_ms(1000);
		
		motor_left(motor_stop,0);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
		motor_right(motor_backward,100);
 31a:	64 e6       	ldi	r22, 0x64	; 100
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
		goto no_bline;
 322:	d9 cf       	rjmp	.-78     	; 0x2d6 <main+0x168>
		}else if (det_bline() ==1 && left_border_out()==1){
 324:	0e 94 4d 00 	call	0x9a	; 0x9a <det_bline>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f4       	brne	.+60     	; 0x368 <main+0x1fa>
 32c:	0e 94 8d 00 	call	0x11a	; 0x11a <left_border_out>
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	d1 f4       	brne	.+52     	; 0x368 <main+0x1fa>
		motor_right(motor_backward,100);
 334:	64 e6       	ldi	r22, 0x64	; 100
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
		motor_left(motor_backward,100);
 33c:	64 e6       	ldi	r22, 0x64	; 100
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	83 ed       	ldi	r24, 0xD3	; 211
 348:	90 e3       	ldi	r25, 0x30	; 48
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x1dc>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x1e6>
 354:	00 00       	nop
		_delay_ms(1000);
		
		motor_right(motor_stop,0);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
		motor_left(motor_backward,100);
 35e:	64 e6       	ldi	r22, 0x64	; 100
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
		goto no_bline;
 366:	b7 cf       	rjmp	.-146    	; 0x2d6 <main+0x168>
		}else if (det_bline() == 1){
 368:	0e 94 4d 00 	call	0x9a	; 0x9a <det_bline>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	d1 f4       	brne	.+52     	; 0x3a4 <main+0x236>
		motor_right(motor_backward,100);
 370:	64 e6       	ldi	r22, 0x64	; 100
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
		motor_left(motor_backward,100);
 378:	64 e6       	ldi	r22, 0x64	; 100
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	83 ed       	ldi	r24, 0xD3	; 211
 384:	90 e3       	ldi	r25, 0x30	; 48
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x218>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x222>
 390:	00 00       	nop
		_delay_ms(1000);
		
		motor_left(motor_stop,0);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 17 02 	call	0x42e	; 0x42e <motor_left>
		motor_right(motor_backward,100);
 39a:	64 e6       	ldi	r22, 0x64	; 100
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <motor_right>
		goto no_bline;
 3a2:	99 cf       	rjmp	.-206    	; 0x2d6 <main+0x168>
	}
}
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret

000003aa <init_timer1>:
#include <avr/interrupt.h>
#include "motors.h"

//PWM for speed control
void init_timer1(){
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase correct, 8-bit
 3aa:	e0 e8       	ldi	r30, 0x80	; 128
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//low level on OC1A/OC1B when up-counting
 3b4:	80 81       	ld	r24, Z
 3b6:	80 6a       	ori	r24, 0xA0	; 160
 3b8:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS12)|(1<<CS10);		//frequency=fcpu/1024 aprox 15Khz (motors operating frecuency)
 3ba:	e1 e8       	ldi	r30, 0x81	; 129
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	85 60       	ori	r24, 0x05	; 5
 3c2:	80 83       	st	Z, r24
 3c4:	08 95       	ret

000003c6 <motor_right>:
}

//motor right direction&speed control
void motor_right(uint8_t dir, uint8_t speed){
 3c6:	cf 93       	push	r28
	//direction
	if(dir==motor_stop){
 3c8:	81 11       	cpse	r24, r1
 3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <motor_right+0x10>
		PORTC &= 0 << PC4;
 3cc:	88 b1       	in	r24, 0x08	; 8
 3ce:	18 b8       	out	0x08, r1	; 8
		PORTC &= 0 << PC5;
 3d0:	88 b1       	in	r24, 0x08	; 8
 3d2:	18 b8       	out	0x08, r1	; 8
 3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <motor_right+0x2e>
	}
	else if(dir == motor_backward){
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	31 f4       	brne	.+12     	; 0x3e6 <motor_right+0x20>
		PORTC &= 0 << PC4;
 3da:	88 b1       	in	r24, 0x08	; 8
 3dc:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC5;
 3de:	88 b1       	in	r24, 0x08	; 8
 3e0:	80 62       	ori	r24, 0x20	; 32
 3e2:	88 b9       	out	0x08, r24	; 8
 3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <motor_right+0x2e>
	}
	else if(dir == motor_forward){
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	29 f4       	brne	.+10     	; 0x3f4 <motor_right+0x2e>
		PORTC &= 0 << PC5;
 3ea:	88 b1       	in	r24, 0x08	; 8
 3ec:	18 b8       	out	0x08, r1	; 8
		PORTC &= 1 << PC4;
 3ee:	88 b1       	in	r24, 0x08	; 8
 3f0:	80 71       	andi	r24, 0x10	; 16
 3f2:	88 b9       	out	0x08, r24	; 8
	}
	//speed
	uint8_t sreg = SREG;//status register
 3f4:	cf b7       	in	r28, 0x3f	; 63
	
	cli();
 3f6:	f8 94       	cli
	OCR1B = (uint8_t)(((float)speed/255.0*robo_speed));
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatunsisf>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	4f e7       	ldi	r20, 0x7F	; 127
 408:	53 e4       	ldi	r21, 0x43	; 67
 40a:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	4f e7       	ldi	r20, 0x7F	; 127
 414:	53 e4       	ldi	r21, 0x43	; 67
 416:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3>
 41a:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 424:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	SREG = sreg;
 428:	cf bf       	out	0x3f, r28	; 63
}
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <motor_left>:

//motor left direction&speed control
void motor_left(uint8_t dir, uint8_t speed){
 42e:	cf 93       	push	r28
	//direction
	if(dir==motor_stop){
 430:	81 11       	cpse	r24, r1
 432:	05 c0       	rjmp	.+10     	; 0x43e <motor_left+0x10>
		PORTB &=0 << PB4;
 434:	85 b1       	in	r24, 0x05	; 5
 436:	15 b8       	out	0x05, r1	; 5
		PORTB &=0 << PB3;
 438:	85 b1       	in	r24, 0x05	; 5
 43a:	15 b8       	out	0x05, r1	; 5
 43c:	0f c0       	rjmp	.+30     	; 0x45c <motor_left+0x2e>
	}
	else if(dir == motor_backward){
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	31 f4       	brne	.+12     	; 0x44e <motor_left+0x20>
		PORTB &= 0 << PB4;
 442:	85 b1       	in	r24, 0x05	; 5
 444:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB3;
 446:	85 b1       	in	r24, 0x05	; 5
 448:	88 60       	ori	r24, 0x08	; 8
 44a:	85 b9       	out	0x05, r24	; 5
 44c:	07 c0       	rjmp	.+14     	; 0x45c <motor_left+0x2e>
	}
	else if(dir == motor_forward){
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	29 f4       	brne	.+10     	; 0x45c <motor_left+0x2e>
		PORTB &= 0 << PB3;
 452:	85 b1       	in	r24, 0x05	; 5
 454:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB4;
 456:	85 b1       	in	r24, 0x05	; 5
 458:	80 61       	ori	r24, 0x10	; 16
 45a:	85 b9       	out	0x05, r24	; 5
	}
	//speed
	uint8_t sreg = SREG;//status register
 45c:	cf b7       	in	r28, 0x3f	; 63
	
	cli();
 45e:	f8 94       	cli
	OCR1B = (uint8_t)(((float)speed/255.0*robo_speed));
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatunsisf>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	4f e7       	ldi	r20, 0x7F	; 127
 470:	53 e4       	ldi	r21, 0x43	; 67
 472:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	4f e7       	ldi	r20, 0x7F	; 127
 47c:	53 e4       	ldi	r21, 0x43	; 67
 47e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3>
 482:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 48c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	SREG = sreg;
 490:	cf bf       	out	0x3f, r28	; 63
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void){
	//Ultrasonic sensor
	DDRB |= (1 << PB0);			//PB0 Enable output for trigger
 496:	84 b1       	in	r24, 0x04	; 4
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	84 b9       	out	0x04, r24	; 4
	PORTB &= (0 << PB0);		//Clear Output
 49c:	85 b1       	in	r24, 0x05	; 5
 49e:	15 b8       	out	0x05, r1	; 5
	DDRD &= 0 << PD2;			//Input for echo on external interrupt
 4a0:	8a b1       	in	r24, 0x0a	; 10
 4a2:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PB1);		//Activate PullUp Resistor
 4a4:	8b b1       	in	r24, 0x0b	; 11
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	8b b9       	out	0x0b, r24	; 11
	//Timer
	DDRB |= (1 << PB1);			//OC1A enable Output for Left Motor
 4aa:	84 b1       	in	r24, 0x04	; 4
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2);			//OC1B enable Output for right motor
 4b0:	84 b1       	in	r24, 0x04	; 4
 4b2:	84 60       	ori	r24, 0x04	; 4
 4b4:	84 b9       	out	0x04, r24	; 4
	//Motor Direction
	DDRB |= (1 << PB3) | (1 << PB4);//Left motor
 4b6:	84 b1       	in	r24, 0x04	; 4
 4b8:	88 61       	ori	r24, 0x18	; 24
 4ba:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4) | (1 << PC5);//Right motor
 4bc:	87 b1       	in	r24, 0x07	; 7
 4be:	80 63       	ori	r24, 0x30	; 48
 4c0:	87 b9       	out	0x07, r24	; 7
	//Power on indicator
	DDRB |= (1 << PB5);				//Power on led indicator
 4c2:	84 b1       	in	r24, 0x04	; 4
 4c4:	80 62       	ori	r24, 0x20	; 32
 4c6:	84 b9       	out	0x04, r24	; 4
 4c8:	08 95       	ret

000004ca <__vector_16>:
volatile uint32_t timerCounter = 0;
volatile int us_presence = 0;
volatile float distance = 0;

//timer overflow interrupt, each time when timer value passes 255 value
SIGNAL(TIMER0_OVF_vect){
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	8f 93       	push	r24
 4d8:	9f 93       	push	r25
 4da:	af 93       	push	r26
 4dc:	bf 93       	push	r27
	if(up){				//voltage rise was detected previously
 4de:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <up>
 4e2:	88 23       	and	r24, r24
 4e4:	c1 f1       	breq	.+112    	; 0x556 <__vector_16+0x8c>
		timerCounter++;		//count the number of overflows
 4e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timerCounter>
 4ea:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timerCounter+0x1>
 4ee:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <timerCounter+0x2>
 4f2:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <timerCounter+0x3>
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	a1 1d       	adc	r26, r1
 4fa:	b1 1d       	adc	r27, r1
 4fc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timerCounter>
 500:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timerCounter+0x1>
 504:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timerCounter+0x2>
 508:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timerCounter+0x3>
		//don t wait too long for the sonar end response, stop if time for measuring the distance exceed the limits
		uint32_t ticks = timerCounter*256+TCNT0;
 50c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timerCounter>
 510:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timerCounter+0x1>
 514:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <timerCounter+0x2>
 518:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <timerCounter+0x3>
 51c:	ba 2f       	mov	r27, r26
 51e:	a9 2f       	mov	r26, r25
 520:	98 2f       	mov	r25, r24
 522:	88 27       	eor	r24, r24
 524:	26 b5       	in	r18, 0x26	; 38
 526:	82 0f       	add	r24, r18
 528:	91 1d       	adc	r25, r1
 52a:	a1 1d       	adc	r26, r1
 52c:	b1 1d       	adc	r27, r1
		uint32_t max_ticks = (uint32_t)MAX_RESP_TIME_MS*INSTR_PER_MS;
		if(ticks>max_ticks){
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	95 43       	sbci	r25, 0x35	; 53
 532:	ac 40       	sbci	r26, 0x0C	; 12
 534:	b1 05       	cpc	r27, r1
 536:	78 f0       	brcs	.+30     	; 0x556 <__vector_16+0x8c>
			up=0;			//stop counting timer values
 538:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <up>
			running=0;		//ultrasound scan done
 53c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <running>
			result = -1;	//show that measurement failed with a timeout (could return max distance here if needed)
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	dc 01       	movw	r26, r24
 546:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <result>
 54a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <result+0x1>
 54e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <result+0x2>
 552:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <result+0x3>
		}
		
	}
}
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__vector_1>:

//interrupt on INT0 pin, to detect high/low voltage changes
ISR(INT0_vect){
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	if (running){		//accept interrupts only when sonar was started
 594:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <running>
 598:	88 23       	and	r24, r24
 59a:	09 f4       	brne	.+2      	; 0x59e <__vector_1+0x34>
 59c:	53 c0       	rjmp	.+166    	; 0x644 <__vector_1+0xda>
		if(up==0){		//voltage rise, start time measurement 
 59e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <up>
 5a2:	81 11       	cpse	r24, r1
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <__vector_1+0x56>
			up=1;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <up>
			timerCounter=0;
 5ac:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timerCounter>
 5b0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timerCounter+0x1>
 5b4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timerCounter+0x2>
 5b8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <timerCounter+0x3>
			TCNT0=0;	//reset timer counter
 5bc:	16 bc       	out	0x26, r1	; 38
 5be:	42 c0       	rjmp	.+132    	; 0x644 <__vector_1+0xda>
		}
		else{
			//voltage drop, stop time measurement
			up=0;
 5c0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <up>
			//d = [time_s*340m/s]/2=time_us/58
			result =(timerCounter*256+TCNT0)/58;
 5c4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timerCounter>
 5c8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timerCounter+0x1>
 5cc:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <timerCounter+0x2>
 5d0:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <timerCounter+0x3>
 5d4:	ba 2f       	mov	r27, r26
 5d6:	a9 2f       	mov	r26, r25
 5d8:	98 2f       	mov	r25, r24
 5da:	88 27       	eor	r24, r24
 5dc:	26 b5       	in	r18, 0x26	; 38
 5de:	bc 01       	movw	r22, r24
 5e0:	cd 01       	movw	r24, r26
 5e2:	62 0f       	add	r22, r18
 5e4:	71 1d       	adc	r23, r1
 5e6:	81 1d       	adc	r24, r1
 5e8:	91 1d       	adc	r25, r1
 5ea:	0f 2e       	mov	r0, r31
 5ec:	fa e3       	ldi	r31, 0x3A	; 58
 5ee:	cf 2e       	mov	r12, r31
 5f0:	d1 2c       	mov	r13, r1
 5f2:	e1 2c       	mov	r14, r1
 5f4:	f1 2c       	mov	r15, r1
 5f6:	f0 2d       	mov	r31, r0
 5f8:	a7 01       	movw	r20, r14
 5fa:	96 01       	movw	r18, r12
 5fc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__udivmodsi4>
 600:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <result>
 604:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <result+0x1>
 608:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <result+0x2>
 60c:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <result+0x3>
			distance = result/58;
 610:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <result>
 614:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <result+0x1>
 618:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <result+0x2>
 61c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <result+0x3>
 620:	a7 01       	movw	r20, r14
 622:	96 01       	movw	r18, r12
 624:	0e 94 75 05 	call	0xaea	; 0xaea <__divmodsi4>
 628:	ca 01       	movw	r24, r20
 62a:	b9 01       	movw	r22, r18
 62c:	0e 94 31 04 	call	0x862	; 0x862 <__floatsisf>
 630:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <distance>
 634:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <distance+0x1>
 638:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <distance+0x2>
 63c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <distance+0x3>
			running=0;
 640:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <running>
		}
	}
}
 644:	ff 91       	pop	r31
 646:	ef 91       	pop	r30
 648:	bf 91       	pop	r27
 64a:	af 91       	pop	r26
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	7f 91       	pop	r23
 652:	6f 91       	pop	r22
 654:	5f 91       	pop	r21
 656:	4f 91       	pop	r20
 658:	3f 91       	pop	r19
 65a:	2f 91       	pop	r18
 65c:	ff 90       	pop	r15
 65e:	ef 90       	pop	r14
 660:	df 90       	pop	r13
 662:	cf 90       	pop	r12
 664:	0f 90       	pop	r0
 666:	0f be       	out	0x3f, r0	; 63
 668:	0f 90       	pop	r0
 66a:	1f 90       	pop	r1
 66c:	18 95       	reti

0000066e <send_trigger>:

void send_trigger(void){	
	PORTB &= (0<<PB0);	//clear to zero for 1us
 66e:	85 b1       	in	r24, 0x05	; 5
 670:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 672:	85 e1       	ldi	r24, 0x15	; 21
 674:	8a 95       	dec	r24
 676:	f1 f7       	brne	.-4      	; 0x674 <send_trigger+0x6>
 678:	00 00       	nop
	_delay_us(4);
	PORTB |= (1<<PB0);	//set high for 10us
 67a:	85 b1       	in	r24, 0x05	; 5
 67c:	81 60       	ori	r24, 0x01	; 1
 67e:	85 b9       	out	0x05, r24	; 5
	running = 1;		//sonar launched
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <running>
 686:	85 e3       	ldi	r24, 0x35	; 53
 688:	8a 95       	dec	r24
 68a:	f1 f7       	brne	.-4      	; 0x688 <send_trigger+0x1a>
 68c:	00 00       	nop
	_delay_us(10);
	PORTB &= (0<<PB0);	//clear
 68e:	85 b1       	in	r24, 0x05	; 5
 690:	15 b8       	out	0x05, r1	; 5
 692:	08 95       	ret

00000694 <init_ext_int0>:
}

//initialize external interrupt
void init_ext_int0(void){
	EICRA |= (1<<ISC00);	//Interrupt on any logical change 
 694:	e9 e6       	ldi	r30, 0x69	; 105
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);		//enable INT0
 69e:	8d b3       	in	r24, 0x1d	; 29
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	8d bb       	out	0x1d, r24	; 29
 6a4:	08 95       	ret

000006a6 <init_timer0>:
}

//initialize timer to count up
void init_timer0(void){
	TCCR0B |= (1 << CS00);		//select internal clock with no prescaling
 6a6:	85 b5       	in	r24, 0x25	; 37
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;				// reset counter to zero
 6ac:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<TOIE0);	//enable timer interrupt
 6ae:	ee e6       	ldi	r30, 0x6E	; 110
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	81 60       	ori	r24, 0x01	; 1
 6b6:	80 83       	st	Z, r24
	sei();					//enable all(global)interrupts
 6b8:	78 94       	sei
 6ba:	08 95       	ret

000006bc <example_sonar>:
}

void example_sonar(void){
	for(;;){		
		if(running==0){		//launch only when next iteration can happen
 6bc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <running>
 6c0:	81 11       	cpse	r24, r1
 6c2:	fc cf       	rjmp	.-8      	; 0x6bc <example_sonar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c4:	2f ef       	ldi	r18, 0xFF	; 255
 6c6:	80 e7       	ldi	r24, 0x70	; 112
 6c8:	92 e0       	ldi	r25, 0x02	; 2
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	80 40       	sbci	r24, 0x00	; 0
 6ce:	90 40       	sbci	r25, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <example_sonar+0xe>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <example_sonar+0x18>
 6d4:	00 00       	nop
			//create a delay between tests, to compensate for old echoes
			_delay_ms(DELAY_BETWEEN_TESTS_MS);
			send_trigger();
 6d6:	0e 94 37 03 	call	0x66e	; 0x66e <send_trigger>
 6da:	f0 cf       	rjmp	.-32     	; 0x6bc <example_sonar>

000006dc <get_distance>:
		}
	}
}

float get_distance(void){
	distance=result;
 6dc:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <result>
 6e0:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <result+0x1>
 6e4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <result+0x2>
 6e8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <result+0x3>
 6ec:	0e 94 31 04 	call	0x862	; 0x862 <__floatsisf>
 6f0:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <distance>
 6f4:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <distance+0x1>
 6f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <distance+0x2>
 6fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <distance+0x3>
	return distance;
 700:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <distance>
 704:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <distance+0x1>
 708:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <distance+0x2>
 70c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <distance+0x3>
}
 710:	08 95       	ret

00000712 <__cmpsf2>:
 712:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_cmp>
 716:	08 f4       	brcc	.+2      	; 0x71a <__cmpsf2+0x8>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	08 95       	ret

0000071c <__divsf3>:
 71c:	0e 94 a2 03 	call	0x744	; 0x744 <__divsf3x>
 720:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_round>
 724:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_pscB>
 728:	58 f0       	brcs	.+22     	; 0x740 <__divsf3+0x24>
 72a:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscA>
 72e:	40 f0       	brcs	.+16     	; 0x740 <__divsf3+0x24>
 730:	29 f4       	brne	.+10     	; 0x73c <__divsf3+0x20>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	29 f0       	breq	.+10     	; 0x740 <__divsf3+0x24>
 736:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 73a:	51 11       	cpse	r21, r1
 73c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>
 740:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_nan>

00000744 <__divsf3x>:
 744:	0e 94 b8 04 	call	0x970	; 0x970 <__fp_split3>
 748:	68 f3       	brcs	.-38     	; 0x724 <__divsf3+0x8>

0000074a <__divsf3_pse>:
 74a:	99 23       	and	r25, r25
 74c:	b1 f3       	breq	.-20     	; 0x73a <__divsf3+0x1e>
 74e:	55 23       	and	r21, r21
 750:	91 f3       	breq	.-28     	; 0x736 <__divsf3+0x1a>
 752:	95 1b       	sub	r25, r21
 754:	55 0b       	sbc	r21, r21
 756:	bb 27       	eor	r27, r27
 758:	aa 27       	eor	r26, r26
 75a:	62 17       	cp	r22, r18
 75c:	73 07       	cpc	r23, r19
 75e:	84 07       	cpc	r24, r20
 760:	38 f0       	brcs	.+14     	; 0x770 <__divsf3_pse+0x26>
 762:	9f 5f       	subi	r25, 0xFF	; 255
 764:	5f 4f       	sbci	r21, 0xFF	; 255
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	44 1f       	adc	r20, r20
 76c:	aa 1f       	adc	r26, r26
 76e:	a9 f3       	breq	.-22     	; 0x75a <__divsf3_pse+0x10>
 770:	35 d0       	rcall	.+106    	; 0x7dc <__divsf3_pse+0x92>
 772:	0e 2e       	mov	r0, r30
 774:	3a f0       	brmi	.+14     	; 0x784 <__divsf3_pse+0x3a>
 776:	e0 e8       	ldi	r30, 0x80	; 128
 778:	32 d0       	rcall	.+100    	; 0x7de <__divsf3_pse+0x94>
 77a:	91 50       	subi	r25, 0x01	; 1
 77c:	50 40       	sbci	r21, 0x00	; 0
 77e:	e6 95       	lsr	r30
 780:	00 1c       	adc	r0, r0
 782:	ca f7       	brpl	.-14     	; 0x776 <__divsf3_pse+0x2c>
 784:	2b d0       	rcall	.+86     	; 0x7dc <__divsf3_pse+0x92>
 786:	fe 2f       	mov	r31, r30
 788:	29 d0       	rcall	.+82     	; 0x7dc <__divsf3_pse+0x92>
 78a:	66 0f       	add	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	bb 1f       	adc	r27, r27
 792:	26 17       	cp	r18, r22
 794:	37 07       	cpc	r19, r23
 796:	48 07       	cpc	r20, r24
 798:	ab 07       	cpc	r26, r27
 79a:	b0 e8       	ldi	r27, 0x80	; 128
 79c:	09 f0       	breq	.+2      	; 0x7a0 <__divsf3_pse+0x56>
 79e:	bb 0b       	sbc	r27, r27
 7a0:	80 2d       	mov	r24, r0
 7a2:	bf 01       	movw	r22, r30
 7a4:	ff 27       	eor	r31, r31
 7a6:	93 58       	subi	r25, 0x83	; 131
 7a8:	5f 4f       	sbci	r21, 0xFF	; 255
 7aa:	3a f0       	brmi	.+14     	; 0x7ba <__divsf3_pse+0x70>
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	51 05       	cpc	r21, r1
 7b0:	78 f0       	brcs	.+30     	; 0x7d0 <__divsf3_pse+0x86>
 7b2:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 7b6:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>
 7ba:	5f 3f       	cpi	r21, 0xFF	; 255
 7bc:	e4 f3       	brlt	.-8      	; 0x7b6 <__divsf3_pse+0x6c>
 7be:	98 3e       	cpi	r25, 0xE8	; 232
 7c0:	d4 f3       	brlt	.-12     	; 0x7b6 <__divsf3_pse+0x6c>
 7c2:	86 95       	lsr	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	b7 95       	ror	r27
 7ca:	f7 95       	ror	r31
 7cc:	9f 5f       	subi	r25, 0xFF	; 255
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__divsf3_pse+0x78>
 7d0:	88 0f       	add	r24, r24
 7d2:	91 1d       	adc	r25, r1
 7d4:	96 95       	lsr	r25
 7d6:	87 95       	ror	r24
 7d8:	97 f9       	bld	r25, 7
 7da:	08 95       	ret
 7dc:	e1 e0       	ldi	r30, 0x01	; 1
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	bb 1f       	adc	r27, r27
 7e6:	62 17       	cp	r22, r18
 7e8:	73 07       	cpc	r23, r19
 7ea:	84 07       	cpc	r24, r20
 7ec:	ba 07       	cpc	r27, r26
 7ee:	20 f0       	brcs	.+8      	; 0x7f8 <__divsf3_pse+0xae>
 7f0:	62 1b       	sub	r22, r18
 7f2:	73 0b       	sbc	r23, r19
 7f4:	84 0b       	sbc	r24, r20
 7f6:	ba 0b       	sbc	r27, r26
 7f8:	ee 1f       	adc	r30, r30
 7fa:	88 f7       	brcc	.-30     	; 0x7de <__divsf3_pse+0x94>
 7fc:	e0 95       	com	r30
 7fe:	08 95       	ret

00000800 <__fixunssfsi>:
 800:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_splitA>
 804:	88 f0       	brcs	.+34     	; 0x828 <__fixunssfsi+0x28>
 806:	9f 57       	subi	r25, 0x7F	; 127
 808:	98 f0       	brcs	.+38     	; 0x830 <__fixunssfsi+0x30>
 80a:	b9 2f       	mov	r27, r25
 80c:	99 27       	eor	r25, r25
 80e:	b7 51       	subi	r27, 0x17	; 23
 810:	b0 f0       	brcs	.+44     	; 0x83e <__fixunssfsi+0x3e>
 812:	e1 f0       	breq	.+56     	; 0x84c <__fixunssfsi+0x4c>
 814:	66 0f       	add	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	1a f0       	brmi	.+6      	; 0x824 <__fixunssfsi+0x24>
 81e:	ba 95       	dec	r27
 820:	c9 f7       	brne	.-14     	; 0x814 <__fixunssfsi+0x14>
 822:	14 c0       	rjmp	.+40     	; 0x84c <__fixunssfsi+0x4c>
 824:	b1 30       	cpi	r27, 0x01	; 1
 826:	91 f0       	breq	.+36     	; 0x84c <__fixunssfsi+0x4c>
 828:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fp_zero>
 82c:	b1 e0       	ldi	r27, 0x01	; 1
 82e:	08 95       	ret
 830:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_zero>
 834:	67 2f       	mov	r22, r23
 836:	78 2f       	mov	r23, r24
 838:	88 27       	eor	r24, r24
 83a:	b8 5f       	subi	r27, 0xF8	; 248
 83c:	39 f0       	breq	.+14     	; 0x84c <__fixunssfsi+0x4c>
 83e:	b9 3f       	cpi	r27, 0xF9	; 249
 840:	cc f3       	brlt	.-14     	; 0x834 <__fixunssfsi+0x34>
 842:	86 95       	lsr	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	b3 95       	inc	r27
 84a:	d9 f7       	brne	.-10     	; 0x842 <__fixunssfsi+0x42>
 84c:	3e f4       	brtc	.+14     	; 0x85c <__fixunssfsi+0x5c>
 84e:	90 95       	com	r25
 850:	80 95       	com	r24
 852:	70 95       	com	r23
 854:	61 95       	neg	r22
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	08 95       	ret

0000085e <__floatunsisf>:
 85e:	e8 94       	clt
 860:	09 c0       	rjmp	.+18     	; 0x874 <__floatsisf+0x12>

00000862 <__floatsisf>:
 862:	97 fb       	bst	r25, 7
 864:	3e f4       	brtc	.+14     	; 0x874 <__floatsisf+0x12>
 866:	90 95       	com	r25
 868:	80 95       	com	r24
 86a:	70 95       	com	r23
 86c:	61 95       	neg	r22
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	99 23       	and	r25, r25
 876:	a9 f0       	breq	.+42     	; 0x8a2 <__floatsisf+0x40>
 878:	f9 2f       	mov	r31, r25
 87a:	96 e9       	ldi	r25, 0x96	; 150
 87c:	bb 27       	eor	r27, r27
 87e:	93 95       	inc	r25
 880:	f6 95       	lsr	r31
 882:	87 95       	ror	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f1 11       	cpse	r31, r1
 88c:	f8 cf       	rjmp	.-16     	; 0x87e <__floatsisf+0x1c>
 88e:	fa f4       	brpl	.+62     	; 0x8ce <__floatsisf+0x6c>
 890:	bb 0f       	add	r27, r27
 892:	11 f4       	brne	.+4      	; 0x898 <__floatsisf+0x36>
 894:	60 ff       	sbrs	r22, 0
 896:	1b c0       	rjmp	.+54     	; 0x8ce <__floatsisf+0x6c>
 898:	6f 5f       	subi	r22, 0xFF	; 255
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	16 c0       	rjmp	.+44     	; 0x8ce <__floatsisf+0x6c>
 8a2:	88 23       	and	r24, r24
 8a4:	11 f0       	breq	.+4      	; 0x8aa <__floatsisf+0x48>
 8a6:	96 e9       	ldi	r25, 0x96	; 150
 8a8:	11 c0       	rjmp	.+34     	; 0x8cc <__floatsisf+0x6a>
 8aa:	77 23       	and	r23, r23
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <__floatsisf+0x54>
 8ae:	9e e8       	ldi	r25, 0x8E	; 142
 8b0:	87 2f       	mov	r24, r23
 8b2:	76 2f       	mov	r23, r22
 8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <__floatsisf+0x5e>
 8b6:	66 23       	and	r22, r22
 8b8:	71 f0       	breq	.+28     	; 0x8d6 <__floatsisf+0x74>
 8ba:	96 e8       	ldi	r25, 0x86	; 134
 8bc:	86 2f       	mov	r24, r22
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	2a f0       	brmi	.+10     	; 0x8ce <__floatsisf+0x6c>
 8c4:	9a 95       	dec	r25
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	da f7       	brpl	.-10     	; 0x8c4 <__floatsisf+0x62>
 8ce:	88 0f       	add	r24, r24
 8d0:	96 95       	lsr	r25
 8d2:	87 95       	ror	r24
 8d4:	97 f9       	bld	r25, 7
 8d6:	08 95       	ret

000008d8 <__fp_cmp>:
 8d8:	99 0f       	add	r25, r25
 8da:	00 08       	sbc	r0, r0
 8dc:	55 0f       	add	r21, r21
 8de:	aa 0b       	sbc	r26, r26
 8e0:	e0 e8       	ldi	r30, 0x80	; 128
 8e2:	fe ef       	ldi	r31, 0xFE	; 254
 8e4:	16 16       	cp	r1, r22
 8e6:	17 06       	cpc	r1, r23
 8e8:	e8 07       	cpc	r30, r24
 8ea:	f9 07       	cpc	r31, r25
 8ec:	c0 f0       	brcs	.+48     	; 0x91e <__stack+0x1f>
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	e4 07       	cpc	r30, r20
 8f4:	f5 07       	cpc	r31, r21
 8f6:	98 f0       	brcs	.+38     	; 0x91e <__stack+0x1f>
 8f8:	62 1b       	sub	r22, r18
 8fa:	73 0b       	sbc	r23, r19
 8fc:	84 0b       	sbc	r24, r20
 8fe:	95 0b       	sbc	r25, r21
 900:	39 f4       	brne	.+14     	; 0x910 <__stack+0x11>
 902:	0a 26       	eor	r0, r26
 904:	61 f0       	breq	.+24     	; 0x91e <__stack+0x1f>
 906:	23 2b       	or	r18, r19
 908:	24 2b       	or	r18, r20
 90a:	25 2b       	or	r18, r21
 90c:	21 f4       	brne	.+8      	; 0x916 <__stack+0x17>
 90e:	08 95       	ret
 910:	0a 26       	eor	r0, r26
 912:	09 f4       	brne	.+2      	; 0x916 <__stack+0x17>
 914:	a1 40       	sbci	r26, 0x01	; 1
 916:	a6 95       	lsr	r26
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	81 1d       	adc	r24, r1
 91c:	81 1d       	adc	r24, r1
 91e:	08 95       	ret

00000920 <__fp_inf>:
 920:	97 f9       	bld	r25, 7
 922:	9f 67       	ori	r25, 0x7F	; 127
 924:	80 e8       	ldi	r24, 0x80	; 128
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	60 e0       	ldi	r22, 0x00	; 0
 92a:	08 95       	ret

0000092c <__fp_nan>:
 92c:	9f ef       	ldi	r25, 0xFF	; 255
 92e:	80 ec       	ldi	r24, 0xC0	; 192
 930:	08 95       	ret

00000932 <__fp_pscA>:
 932:	00 24       	eor	r0, r0
 934:	0a 94       	dec	r0
 936:	16 16       	cp	r1, r22
 938:	17 06       	cpc	r1, r23
 93a:	18 06       	cpc	r1, r24
 93c:	09 06       	cpc	r0, r25
 93e:	08 95       	ret

00000940 <__fp_pscB>:
 940:	00 24       	eor	r0, r0
 942:	0a 94       	dec	r0
 944:	12 16       	cp	r1, r18
 946:	13 06       	cpc	r1, r19
 948:	14 06       	cpc	r1, r20
 94a:	05 06       	cpc	r0, r21
 94c:	08 95       	ret

0000094e <__fp_round>:
 94e:	09 2e       	mov	r0, r25
 950:	03 94       	inc	r0
 952:	00 0c       	add	r0, r0
 954:	11 f4       	brne	.+4      	; 0x95a <__fp_round+0xc>
 956:	88 23       	and	r24, r24
 958:	52 f0       	brmi	.+20     	; 0x96e <__fp_round+0x20>
 95a:	bb 0f       	add	r27, r27
 95c:	40 f4       	brcc	.+16     	; 0x96e <__fp_round+0x20>
 95e:	bf 2b       	or	r27, r31
 960:	11 f4       	brne	.+4      	; 0x966 <__fp_round+0x18>
 962:	60 ff       	sbrs	r22, 0
 964:	04 c0       	rjmp	.+8      	; 0x96e <__fp_round+0x20>
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	08 95       	ret

00000970 <__fp_split3>:
 970:	57 fd       	sbrc	r21, 7
 972:	90 58       	subi	r25, 0x80	; 128
 974:	44 0f       	add	r20, r20
 976:	55 1f       	adc	r21, r21
 978:	59 f0       	breq	.+22     	; 0x990 <__fp_splitA+0x10>
 97a:	5f 3f       	cpi	r21, 0xFF	; 255
 97c:	71 f0       	breq	.+28     	; 0x99a <__fp_splitA+0x1a>
 97e:	47 95       	ror	r20

00000980 <__fp_splitA>:
 980:	88 0f       	add	r24, r24
 982:	97 fb       	bst	r25, 7
 984:	99 1f       	adc	r25, r25
 986:	61 f0       	breq	.+24     	; 0x9a0 <__fp_splitA+0x20>
 988:	9f 3f       	cpi	r25, 0xFF	; 255
 98a:	79 f0       	breq	.+30     	; 0x9aa <__fp_splitA+0x2a>
 98c:	87 95       	ror	r24
 98e:	08 95       	ret
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	14 06       	cpc	r1, r20
 996:	55 1f       	adc	r21, r21
 998:	f2 cf       	rjmp	.-28     	; 0x97e <__fp_split3+0xe>
 99a:	46 95       	lsr	r20
 99c:	f1 df       	rcall	.-30     	; 0x980 <__fp_splitA>
 99e:	08 c0       	rjmp	.+16     	; 0x9b0 <__fp_splitA+0x30>
 9a0:	16 16       	cp	r1, r22
 9a2:	17 06       	cpc	r1, r23
 9a4:	18 06       	cpc	r1, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	f1 cf       	rjmp	.-30     	; 0x98c <__fp_splitA+0xc>
 9aa:	86 95       	lsr	r24
 9ac:	71 05       	cpc	r23, r1
 9ae:	61 05       	cpc	r22, r1
 9b0:	08 94       	sec
 9b2:	08 95       	ret

000009b4 <__fp_zero>:
 9b4:	e8 94       	clt

000009b6 <__fp_szero>:
 9b6:	bb 27       	eor	r27, r27
 9b8:	66 27       	eor	r22, r22
 9ba:	77 27       	eor	r23, r23
 9bc:	cb 01       	movw	r24, r22
 9be:	97 f9       	bld	r25, 7
 9c0:	08 95       	ret

000009c2 <__gesf2>:
 9c2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_cmp>
 9c6:	08 f4       	brcc	.+2      	; 0x9ca <__gesf2+0x8>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	08 95       	ret

000009cc <__mulsf3>:
 9cc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3x>
 9d0:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_round>
 9d4:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscA>
 9d8:	38 f0       	brcs	.+14     	; 0x9e8 <__mulsf3+0x1c>
 9da:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_pscB>
 9de:	20 f0       	brcs	.+8      	; 0x9e8 <__mulsf3+0x1c>
 9e0:	95 23       	and	r25, r21
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <__mulsf3+0x1c>
 9e4:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 9e8:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_nan>
 9ec:	11 24       	eor	r1, r1
 9ee:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>

000009f2 <__mulsf3x>:
 9f2:	0e 94 b8 04 	call	0x970	; 0x970 <__fp_split3>
 9f6:	70 f3       	brcs	.-36     	; 0x9d4 <__mulsf3+0x8>

000009f8 <__mulsf3_pse>:
 9f8:	95 9f       	mul	r25, r21
 9fa:	c1 f3       	breq	.-16     	; 0x9ec <__mulsf3+0x20>
 9fc:	95 0f       	add	r25, r21
 9fe:	50 e0       	ldi	r21, 0x00	; 0
 a00:	55 1f       	adc	r21, r21
 a02:	62 9f       	mul	r22, r18
 a04:	f0 01       	movw	r30, r0
 a06:	72 9f       	mul	r23, r18
 a08:	bb 27       	eor	r27, r27
 a0a:	f0 0d       	add	r31, r0
 a0c:	b1 1d       	adc	r27, r1
 a0e:	63 9f       	mul	r22, r19
 a10:	aa 27       	eor	r26, r26
 a12:	f0 0d       	add	r31, r0
 a14:	b1 1d       	adc	r27, r1
 a16:	aa 1f       	adc	r26, r26
 a18:	64 9f       	mul	r22, r20
 a1a:	66 27       	eor	r22, r22
 a1c:	b0 0d       	add	r27, r0
 a1e:	a1 1d       	adc	r26, r1
 a20:	66 1f       	adc	r22, r22
 a22:	82 9f       	mul	r24, r18
 a24:	22 27       	eor	r18, r18
 a26:	b0 0d       	add	r27, r0
 a28:	a1 1d       	adc	r26, r1
 a2a:	62 1f       	adc	r22, r18
 a2c:	73 9f       	mul	r23, r19
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	62 1f       	adc	r22, r18
 a34:	83 9f       	mul	r24, r19
 a36:	a0 0d       	add	r26, r0
 a38:	61 1d       	adc	r22, r1
 a3a:	22 1f       	adc	r18, r18
 a3c:	74 9f       	mul	r23, r20
 a3e:	33 27       	eor	r19, r19
 a40:	a0 0d       	add	r26, r0
 a42:	61 1d       	adc	r22, r1
 a44:	23 1f       	adc	r18, r19
 a46:	84 9f       	mul	r24, r20
 a48:	60 0d       	add	r22, r0
 a4a:	21 1d       	adc	r18, r1
 a4c:	82 2f       	mov	r24, r18
 a4e:	76 2f       	mov	r23, r22
 a50:	6a 2f       	mov	r22, r26
 a52:	11 24       	eor	r1, r1
 a54:	9f 57       	subi	r25, 0x7F	; 127
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	9a f0       	brmi	.+38     	; 0xa80 <__mulsf3_pse+0x88>
 a5a:	f1 f0       	breq	.+60     	; 0xa98 <__mulsf3_pse+0xa0>
 a5c:	88 23       	and	r24, r24
 a5e:	4a f0       	brmi	.+18     	; 0xa72 <__mulsf3_pse+0x7a>
 a60:	ee 0f       	add	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	bb 1f       	adc	r27, r27
 a66:	66 1f       	adc	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	91 50       	subi	r25, 0x01	; 1
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	a9 f7       	brne	.-22     	; 0xa5c <__mulsf3_pse+0x64>
 a72:	9e 3f       	cpi	r25, 0xFE	; 254
 a74:	51 05       	cpc	r21, r1
 a76:	80 f0       	brcs	.+32     	; 0xa98 <__mulsf3_pse+0xa0>
 a78:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 a7c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	e4 f3       	brlt	.-8      	; 0xa7c <__mulsf3_pse+0x84>
 a84:	98 3e       	cpi	r25, 0xE8	; 232
 a86:	d4 f3       	brlt	.-12     	; 0xa7c <__mulsf3_pse+0x84>
 a88:	86 95       	lsr	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b7 95       	ror	r27
 a90:	f7 95       	ror	r31
 a92:	e7 95       	ror	r30
 a94:	9f 5f       	subi	r25, 0xFF	; 255
 a96:	c1 f7       	brne	.-16     	; 0xa88 <__mulsf3_pse+0x90>
 a98:	fe 2b       	or	r31, r30
 a9a:	88 0f       	add	r24, r24
 a9c:	91 1d       	adc	r25, r1
 a9e:	96 95       	lsr	r25
 aa0:	87 95       	ror	r24
 aa2:	97 f9       	bld	r25, 7
 aa4:	08 95       	ret

00000aa6 <__udivmodsi4>:
 aa6:	a1 e2       	ldi	r26, 0x21	; 33
 aa8:	1a 2e       	mov	r1, r26
 aaa:	aa 1b       	sub	r26, r26
 aac:	bb 1b       	sub	r27, r27
 aae:	fd 01       	movw	r30, r26
 ab0:	0d c0       	rjmp	.+26     	; 0xacc <__udivmodsi4_ep>

00000ab2 <__udivmodsi4_loop>:
 ab2:	aa 1f       	adc	r26, r26
 ab4:	bb 1f       	adc	r27, r27
 ab6:	ee 1f       	adc	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	a2 17       	cp	r26, r18
 abc:	b3 07       	cpc	r27, r19
 abe:	e4 07       	cpc	r30, r20
 ac0:	f5 07       	cpc	r31, r21
 ac2:	20 f0       	brcs	.+8      	; 0xacc <__udivmodsi4_ep>
 ac4:	a2 1b       	sub	r26, r18
 ac6:	b3 0b       	sbc	r27, r19
 ac8:	e4 0b       	sbc	r30, r20
 aca:	f5 0b       	sbc	r31, r21

00000acc <__udivmodsi4_ep>:
 acc:	66 1f       	adc	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	1a 94       	dec	r1
 ad6:	69 f7       	brne	.-38     	; 0xab2 <__udivmodsi4_loop>
 ad8:	60 95       	com	r22
 ada:	70 95       	com	r23
 adc:	80 95       	com	r24
 ade:	90 95       	com	r25
 ae0:	9b 01       	movw	r18, r22
 ae2:	ac 01       	movw	r20, r24
 ae4:	bd 01       	movw	r22, r26
 ae6:	cf 01       	movw	r24, r30
 ae8:	08 95       	ret

00000aea <__divmodsi4>:
 aea:	05 2e       	mov	r0, r21
 aec:	97 fb       	bst	r25, 7
 aee:	1e f4       	brtc	.+6      	; 0xaf6 <__divmodsi4+0xc>
 af0:	00 94       	com	r0
 af2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__negsi2>
 af6:	57 fd       	sbrc	r21, 7
 af8:	07 d0       	rcall	.+14     	; 0xb08 <__divmodsi4_neg2>
 afa:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__udivmodsi4>
 afe:	07 fc       	sbrc	r0, 7
 b00:	03 d0       	rcall	.+6      	; 0xb08 <__divmodsi4_neg2>
 b02:	4e f4       	brtc	.+18     	; 0xb16 <__divmodsi4_exit>
 b04:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__negsi2>

00000b08 <__divmodsi4_neg2>:
 b08:	50 95       	com	r21
 b0a:	40 95       	com	r20
 b0c:	30 95       	com	r19
 b0e:	21 95       	neg	r18
 b10:	3f 4f       	sbci	r19, 0xFF	; 255
 b12:	4f 4f       	sbci	r20, 0xFF	; 255
 b14:	5f 4f       	sbci	r21, 0xFF	; 255

00000b16 <__divmodsi4_exit>:
 b16:	08 95       	ret

00000b18 <__negsi2>:
 b18:	90 95       	com	r25
 b1a:	80 95       	com	r24
 b1c:	70 95       	com	r23
 b1e:	61 95       	neg	r22
 b20:	7f 4f       	sbci	r23, 0xFF	; 255
 b22:	8f 4f       	sbci	r24, 0xFF	; 255
 b24:	9f 4f       	sbci	r25, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <_exit>:
 b28:	f8 94       	cli

00000b2a <__stop_program>:
 b2a:	ff cf       	rjmp	.-2      	; 0xb2a <__stop_program>
