
Kaai_ElTitan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000346  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000003ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7f  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000896  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000419  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003011  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  88:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_irSensor>:
volatile int irs3 = 0;
volatile int irs4 = 0;
int ir_detect=0;

void init_irSensor(void){
	DDRD &= (0 << PD3) & (0 << PD4);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	1a b8       	out	0x0a, r1	; 10
	DDRD &= (0 << PD5) & (0 << PD6); 
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	1a b8       	out	0x0a, r1	; 10
  98:	08 95       	ret

0000009a <power_on>:
#include <util/delay.h>
#include "us_sensor.h"

void power_on(void){
	int i;
	for(i=0;i<5;i++){
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	0f c0       	rjmp	.+30     	; 0xbe <power_on+0x24>
		PORTB ^= 1 << PB5;
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	89 27       	eor	r24, r25
  a6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	4f ef       	ldi	r20, 0xFF	; 255
  aa:	89 e6       	ldi	r24, 0x69	; 105
  ac:	98 e1       	ldi	r25, 0x18	; 24
  ae:	41 50       	subi	r20, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <power_on+0x14>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <power_on+0x1e>
  b8:	00 00       	nop
#include <util/delay.h>
#include "us_sensor.h"

void power_on(void){
	int i;
	for(i=0;i<5;i++){
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	25 30       	cpi	r18, 0x05	; 5
  c0:	31 05       	cpc	r19, r1
  c2:	74 f3       	brlt	.-36     	; 0xa0 <power_on+0x6>
		PORTB ^= 1 << PB5;
		_delay_ms(500);
	}
}
  c4:	08 95       	ret

000000c6 <main>:

int object_presence=0;

int main(){
	
	init_ports(); 
  c6:	0e 94 82 00 	call	0x104	; 0x104 <init_ports>
	init_irSensor();//Initialize all ports needed in the system
  ca:	0e 94 48 00 	call	0x90	; 0x90 <init_irSensor>
	power_on();				//Turn on the L led, it will count to five until the fights starts 
  ce:	0e 94 4d 00 	call	0x9a	; 0x9a <power_on>
	init_ext_int0();
  d2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <init_ext_int0>
	init_timer0();			//initialize the timer in INT1
  d6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <init_timer0>
	init_timer1();
  da:	0e 94 74 00 	call	0xe8	; 0xe8 <init_timer1>
	example_sonar();
  de:	0e 94 6f 01 	call	0x2de	; 0x2de <example_sonar>
	
	
	
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <init_timer1>:
#include <avr/interrupt.h>
#include "motors.h"

//PWM for speed control
void init_timer1(){
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase correct, 8-bit
  e8:	e0 e8       	ldi	r30, 0x80	; 128
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//low level on OC1A/OC1B when up-counting
  f2:	80 81       	ld	r24, Z
  f4:	80 6a       	ori	r24, 0xA0	; 160
  f6:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS12)|(1<<CS10);		//frequency=fcpu/1024 aprox 15Khz (motors operating frecuency)
  f8:	e1 e8       	ldi	r30, 0x81	; 129
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	85 60       	ori	r24, 0x05	; 5
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void){
	//Ultrasonic sensor
	DDRB |= (1 << PB0);			//PB0 Enable output for trigger
 104:	84 b1       	in	r24, 0x04	; 4
 106:	81 60       	ori	r24, 0x01	; 1
 108:	84 b9       	out	0x04, r24	; 4
	PORTB &= (0 << PB0);		//Clear Output
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	15 b8       	out	0x05, r1	; 5
	DDRD &= 0 << PD2;			//Input for echo on external interrupt
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PB1);		//Activate PullUp Resistor
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	82 60       	ori	r24, 0x02	; 2
 116:	8b b9       	out	0x0b, r24	; 11
	//Timer
	DDRB |= (1 << PB1);			//OC1A enable Output for Left Motor
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2);			//OC1B enable Output for right motor
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	84 60       	ori	r24, 0x04	; 4
 122:	84 b9       	out	0x04, r24	; 4
	//Motor Direction
	DDRB |= (1 << PB3) | (1 << PB4);//Left motor
 124:	84 b1       	in	r24, 0x04	; 4
 126:	88 61       	ori	r24, 0x18	; 24
 128:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4) | (1 << PC5);//Right motor
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	80 63       	ori	r24, 0x30	; 48
 12e:	87 b9       	out	0x07, r24	; 7
	//Power on indicator
	DDRB |= (1 << PB5);				//Power on led indicator
 130:	84 b1       	in	r24, 0x04	; 4
 132:	80 62       	ori	r24, 0x20	; 32
 134:	84 b9       	out	0x04, r24	; 4
 136:	08 95       	ret

00000138 <__vector_16>:
volatile unsigned char up=0;			
volatile unsigned char running = 0;
volatile uint32_t timerCounter = 0;

//timer overflow interrupt, each time when timer value passes 255 value
SIGNAL(TIMER0_OVF_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
	if(up){				//voltage rise was detected previously
 14c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <up>
 150:	88 23       	and	r24, r24
 152:	c1 f1       	breq	.+112    	; 0x1c4 <__vector_16+0x8c>
		timerCounter++;		//count the number of overflows
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 160:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	a1 1d       	adc	r26, r1
 168:	b1 1d       	adc	r27, r1
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 172:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 176:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		//don t wait too long for the sonar end response, stop if time for measuring the distance exceed the limits
		uint32_t ticks = timerCounter*256+TCNT0;
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 182:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 186:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 18a:	ba 2f       	mov	r27, r26
 18c:	a9 2f       	mov	r26, r25
 18e:	98 2f       	mov	r25, r24
 190:	88 27       	eor	r24, r24
 192:	26 b5       	in	r18, 0x26	; 38
 194:	82 0f       	add	r24, r18
 196:	91 1d       	adc	r25, r1
 198:	a1 1d       	adc	r26, r1
 19a:	b1 1d       	adc	r27, r1
		uint32_t max_ticks = (uint32_t)MAX_RESP_TIME_MS*INSTR_PER_MS;
		if(ticks>max_ticks){
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	95 43       	sbci	r25, 0x35	; 53
 1a0:	ac 40       	sbci	r26, 0x0C	; 12
 1a2:	b1 05       	cpc	r27, r1
 1a4:	78 f0       	brcs	.+30     	; 0x1c4 <__vector_16+0x8c>
			up=0;			//stop counting timer values
 1a6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <up>
			running=0;		//ultrasound scan done
 1aa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <running>
			result = -1;	//show that measurement failed with a timeout (could return max distance here if needed)
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	dc 01       	movw	r26, r24
 1b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <result>
 1b8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <result+0x1>
 1bc:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <result+0x2>
 1c0:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <result+0x3>
		}
		
	}
}
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_1>:

//interrupt on INT0 pin, to detect high/low voltage changes
ISR(INT0_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	if (running){		//accept interrupts only when sonar was started
 1fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <running>
 1fe:	88 23       	and	r24, r24
 200:	b1 f1       	breq	.+108    	; 0x26e <__vector_1+0x96>
		if(up==0){		//voltage rise, start time measurement 
 202:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <up>
 206:	81 11       	cpse	r24, r1
 208:	0d c0       	rjmp	.+26     	; 0x224 <__vector_1+0x4c>
			up=1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <up>
			timerCounter=0;
 210:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 218:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 21c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			TCNT0=0;	//reset timer counter
 220:	16 bc       	out	0x26, r1	; 38
 222:	25 c0       	rjmp	.+74     	; 0x26e <__vector_1+0x96>
		}
		else{
			//voltage drop, stop time measurement
			up=0;
 224:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <up>
			//d = [time_s*340m/s]/2=time_us/58
			result =(timerCounter*256+TCNT0)/258;
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 230:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 234:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 238:	ba 2f       	mov	r27, r26
 23a:	a9 2f       	mov	r26, r25
 23c:	98 2f       	mov	r25, r24
 23e:	88 27       	eor	r24, r24
 240:	26 b5       	in	r18, 0x26	; 38
 242:	bc 01       	movw	r22, r24
 244:	cd 01       	movw	r24, r26
 246:	62 0f       	add	r22, r18
 248:	71 1d       	adc	r23, r1
 24a:	81 1d       	adc	r24, r1
 24c:	91 1d       	adc	r25, r1
 24e:	22 e0       	ldi	r18, 0x02	; 2
 250:	31 e0       	ldi	r19, 0x01	; 1
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodsi4>
 25a:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <result>
 25e:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <result+0x1>
 262:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <result+0x2>
 266:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <result+0x3>
			running=0;
 26a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <running>
		}
	}
}
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	7f 91       	pop	r23
 27c:	6f 91       	pop	r22
 27e:	5f 91       	pop	r21
 280:	4f 91       	pop	r20
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <send_trigger>:

void send_trigger(void){	
	PORTB &= (0<<PB0);	//clear to zero for 1us
 290:	85 b1       	in	r24, 0x05	; 5
 292:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	85 e1       	ldi	r24, 0x15	; 21
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <send_trigger+0x6>
 29a:	00 00       	nop
	_delay_us(4);
	PORTB |= (1<<PB0);	//set high for 10us
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	85 b9       	out	0x05, r24	; 5
	running = 1;		//sonar launched
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <running>
 2a8:	85 e3       	ldi	r24, 0x35	; 53
 2aa:	8a 95       	dec	r24
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <send_trigger+0x1a>
 2ae:	00 00       	nop
	_delay_us(10);
	PORTB &= (0<<PB0);	//clear
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	15 b8       	out	0x05, r1	; 5
 2b4:	08 95       	ret

000002b6 <init_ext_int0>:
}

//initialize external interrupt
void init_ext_int0(void){
	EICRA |= (1<<ISC00);	//Interrupt on any logical change 
 2b6:	e9 e6       	ldi	r30, 0x69	; 105
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);		//enable INT0
 2c0:	8d b3       	in	r24, 0x1d	; 29
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	8d bb       	out	0x1d, r24	; 29
 2c6:	08 95       	ret

000002c8 <init_timer0>:
}

//initialize timer to count up
void init_timer0(void){
	TCCR0B |= (1 << CS00);		//select internal clock with no prescaling
 2c8:	85 b5       	in	r24, 0x25	; 37
 2ca:	81 60       	ori	r24, 0x01	; 1
 2cc:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;				// reset counter to zero
 2ce:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<TOIE0);	//enable timer interrupt
 2d0:	ee e6       	ldi	r30, 0x6E	; 110
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	80 83       	st	Z, r24
	sei();					//enable all(global)interrupts
 2da:	78 94       	sei
 2dc:	08 95       	ret

000002de <example_sonar>:
}

void example_sonar(void){
	for(;;){		
		if(running==0){		//launch only when next iteration can happen
 2de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <running>
 2e2:	81 11       	cpse	r24, r1
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <example_sonar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	80 e7       	ldi	r24, 0x70	; 112
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <example_sonar+0xe>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <example_sonar+0x18>
 2f6:	00 00       	nop
			//create a delay between tests, to compensate for old echoes
			_delay_ms(DELAY_BETWEEN_TESTS_MS);
			send_trigger();
 2f8:	0e 94 48 01 	call	0x290	; 0x290 <send_trigger>
 2fc:	f0 cf       	rjmp	.-32     	; 0x2de <example_sonar>

000002fe <__udivmodsi4>:
 2fe:	a1 e2       	ldi	r26, 0x21	; 33
 300:	1a 2e       	mov	r1, r26
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	fd 01       	movw	r30, r26
 308:	0d c0       	rjmp	.+26     	; 0x324 <__udivmodsi4_ep>

0000030a <__udivmodsi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	ee 1f       	adc	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	a2 17       	cp	r26, r18
 314:	b3 07       	cpc	r27, r19
 316:	e4 07       	cpc	r30, r20
 318:	f5 07       	cpc	r31, r21
 31a:	20 f0       	brcs	.+8      	; 0x324 <__udivmodsi4_ep>
 31c:	a2 1b       	sub	r26, r18
 31e:	b3 0b       	sbc	r27, r19
 320:	e4 0b       	sbc	r30, r20
 322:	f5 0b       	sbc	r31, r21

00000324 <__udivmodsi4_ep>:
 324:	66 1f       	adc	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	1a 94       	dec	r1
 32e:	69 f7       	brne	.-38     	; 0x30a <__udivmodsi4_loop>
 330:	60 95       	com	r22
 332:	70 95       	com	r23
 334:	80 95       	com	r24
 336:	90 95       	com	r25
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	bd 01       	movw	r22, r26
 33e:	cf 01       	movw	r24, r30
 340:	08 95       	ret

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
