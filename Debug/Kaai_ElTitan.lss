
Kaai_ElTitan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000a38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b3  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3d  00000000  00000000  00001d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b42  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000595  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000410d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 03 01 	call	0x206	; 0x206 <main>
  88:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
#include <avr/io.h>
#include "adc.h"

//Function To Initialize the ADC Module
void adc_init(){
	ADMUX=(1<<REFS0);	// For Aref=AVcc;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <read_adc>:
Argument: Channel Number between 0-7
Return Value : Between 0-1023
*/
uint16_t read_adc(uint8_t ch){
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  9e:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b01000000;
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	90 74       	andi	r25, 0x40	; 64
  a8:	90 83       	st	Z, r25
	ADMUX|=ch;
  aa:	90 81       	ld	r25, Z
  ac:	89 2b       	or	r24, r25
  ae:	80 83       	st	Z, r24
	
	//10-bit result left justified (ADCH bit9-2, ADCL bit1-0)
	ADMUX |= 1<<ADLAR;
  b0:	80 81       	ld	r24, Z
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	80 83       	st	Z, r24

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c4:	84 ff       	sbrs	r24, 4
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <read_adc+0x22>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	80 83       	st	Z, r24

	uint8_t LowPart = ADCL;	//10-bit resolution
  d2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH << 2 | LowPart >> 6; //10-bit resolution
  d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	22 95       	swap	r18
  e6:	26 95       	lsr	r18
  e8:	26 95       	lsr	r18
  ea:	23 70       	andi	r18, 0x03	; 3

	return TenBitResult;
  ec:	82 2b       	or	r24, r18
  ee:	08 95       	ret

000000f0 <read_rightSensor>:
uint16_t ir_sensor1, ir_sensor4; // using two ir_sensors to detect border line
uint8_t sensor1, sensor4;		 // where sensor1 is the right side sensor & sensor4 is the left side sensor
								 // from H bridge side view
int read_rightSensor(void){
	
	ir_sensor1 = read_adc(SENSOR1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
  f6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ir_sensor1+0x1>
  fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ir_sensor1>
	if (ir_sensor1 > SENSOR_THRESH){
  fe:	89 39       	cpi	r24, 0x99	; 153
 100:	23 e0       	ldi	r18, 0x03	; 3
 102:	92 07       	cpc	r25, r18
 104:	18 f0       	brcs	.+6      	; 0x10c <read_rightSensor+0x1c>
		sensor1 = 0;
 106:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensor1>
 10a:	06 c0       	rjmp	.+12     	; 0x118 <read_rightSensor+0x28>
	}
	else if(ir_sensor1 < SENSOR_THRESH){
 10c:	88 39       	cpi	r24, 0x98	; 152
 10e:	93 40       	sbci	r25, 0x03	; 3
 110:	18 f4       	brcc	.+6      	; 0x118 <read_rightSensor+0x28>
		sensor1 = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sensor1>
	}
	return sensor1;
 118:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sensor1>

}
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <read_leftSensor>:

int read_leftSensor(void){
	ir_sensor4 = read_adc(SENSOR4);
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
 126:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ir_sensor4+0x1>
 12a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ir_sensor4>
	if (ir_sensor4 > SENSOR_THRESH){
 12e:	89 39       	cpi	r24, 0x99	; 153
 130:	23 e0       	ldi	r18, 0x03	; 3
 132:	92 07       	cpc	r25, r18
 134:	18 f0       	brcs	.+6      	; 0x13c <read_leftSensor+0x1c>
		sensor4 = 0;
 136:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sensor4>
 13a:	06 c0       	rjmp	.+12     	; 0x148 <read_leftSensor+0x28>
	}
	else if(ir_sensor4 < SENSOR_THRESH){
 13c:	88 39       	cpi	r24, 0x98	; 152
 13e:	93 40       	sbci	r25, 0x03	; 3
 140:	18 f4       	brcc	.+6      	; 0x148 <read_leftSensor+0x28>
		sensor4 = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sensor4>
	}
	return sensor4;
 148:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sensor4>
}
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <power_on>:
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<10;i++){
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	0f c0       	rjmp	.+30     	; 0x174 <power_on+0x24>
		PORTB ^= 1 << PB5;
 156:	95 b1       	in	r25, 0x05	; 5
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	89 27       	eor	r24, r25
 15c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	4f ef       	ldi	r20, 0xFF	; 255
 160:	89 e6       	ldi	r24, 0x69	; 105
 162:	98 e1       	ldi	r25, 0x18	; 24
 164:	41 50       	subi	r20, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <power_on+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <power_on+0x1e>
 16e:	00 00       	nop
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<10;i++){
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	2a 30       	cpi	r18, 0x0A	; 10
 176:	31 05       	cpc	r19, r1
 178:	74 f3       	brlt	.-36     	; 0x156 <power_on+0x6>
		PORTB ^= 1 << PB5;
		_delay_ms(500);
	}
}
 17a:	08 95       	ret

0000017c <turn_back>:
		}
	}
}

void turn_back(void){
	motor_right(motor_stop,0);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 74 01 	call	0x2e8	; 0x2e8 <motor_right>
	motor_left(motor_stop,0);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 a8 01 	call	0x350	; 0x350 <motor_left>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	89 e6       	ldi	r24, 0x69	; 105
 190:	98 e1       	ldi	r25, 0x18	; 24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <turn_back+0x16>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <turn_back+0x20>
 19c:	00 00       	nop
	_delay_ms(500);
	
	motor_left(motor_backward,100);
 19e:	64 e6       	ldi	r22, 0x64	; 100
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 a8 01 	call	0x350	; 0x350 <motor_left>
	motor_right(motor_backward,100);
 1a6:	64 e6       	ldi	r22, 0x64	; 100
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 74 01 	call	0x2e8	; 0x2e8 <motor_right>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	81 e1       	ldi	r24, 0x11	; 17
 1b2:	9a e7       	ldi	r25, 0x7A	; 122
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <turn_back+0x38>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <turn_back+0x42>
 1be:	00 00       	nop
	_delay_ms(2500);
	
	motor_right(motor_stop,0);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <motor_right>
	motor_left(motor_backward,250);
 1c8:	6a ef       	ldi	r22, 0xFA	; 250
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 a8 01 	call	0x350	; 0x350 <motor_left>
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	81 e1       	ldi	r24, 0x11	; 17
 1d4:	9a e7       	ldi	r25, 0x7A	; 122
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <turn_back+0x5a>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <turn_back+0x64>
 1e0:	00 00       	nop
	_delay_ms(2500);
	
	motor_left(motor_stop,0);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 a8 01 	call	0x350	; 0x350 <motor_left>
	motor_right(motor_forward,250);
 1ea:	6a ef       	ldi	r22, 0xFA	; 250
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 74 01 	call	0x2e8	; 0x2e8 <motor_right>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	81 e1       	ldi	r24, 0x11	; 17
 1f6:	9a e7       	ldi	r25, 0x7A	; 122
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <turn_back+0x7c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <turn_back+0x86>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <main>:

void turn_back(void);

int main(){
	
	init_ports();
 206:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <init_ports>
	power_on();
 20a:	0e 94 a8 00 	call	0x150	; 0x150 <power_on>
	init_timer1();
 20e:	0e 94 66 01 	call	0x2cc	; 0x2cc <init_timer1>
	
	adc_init();
 212:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	
	init_ext_int0();
 216:	0e 94 b5 02 	call	0x56a	; 0x56a <init_ext_int0>
	init_timer0();
 21a:	0e 94 be 02 	call	0x57c	; 0x57c <init_timer0>
	
	while(1){
		PORTB |= 1 << PB5;
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	80 62       	ori	r24, 0x20	; 32
 222:	85 b9       	out	0x05, r24	; 5
		example_sonar();
 224:	0e 94 c9 02 	call	0x592	; 0x592 <example_sonar>
		
		if(read_rightSensor() == 0 && read_leftSensor() == 0){
 228:	0e 94 78 00 	call	0xf0	; 0xf0 <read_rightSensor>
 22c:	89 2b       	or	r24, r25
 22e:	09 f0       	breq	.+2      	; 0x232 <main+0x2c>
 230:	41 c0       	rjmp	.+130    	; 0x2b4 <main+0xae>
 232:	0e 94 90 00 	call	0x120	; 0x120 <read_leftSensor>
 236:	89 2b       	or	r24, r25
 238:	e9 f5       	brne	.+122    	; 0x2b4 <main+0xae>
			us_distance = get_distance();
 23a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <get_distance>
 23e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 246:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 24a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			if (us_distance > 50){
 24e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 252:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 256:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 25a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	48 e4       	ldi	r20, 0x48	; 72
 264:	52 e4       	ldi	r21, 0x42	; 66
 266:	0e 94 4c 04 	call	0x898	; 0x898 <__gesf2>
 26a:	18 16       	cp	r1, r24
 26c:	4c f4       	brge	.+18     	; 0x280 <main+0x7a>
				motor_left(motor_forward,254);
 26e:	6e ef       	ldi	r22, 0xFE	; 254
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 a8 01 	call	0x350	; 0x350 <motor_left>
				motor_right(motor_forward,254);
 276:	6e ef       	ldi	r22, 0xFE	; 254
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <motor_right>
 27e:	cf cf       	rjmp	.-98     	; 0x21e <main+0x18>
			}
			else if(us_distance < 50){
 280:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 284:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 288:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 28c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	48 e4       	ldi	r20, 0x48	; 72
 296:	52 e4       	ldi	r21, 0x42	; 66
 298:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__cmpsf2>
 29c:	88 23       	and	r24, r24
 29e:	0c f0       	brlt	.+2      	; 0x2a2 <main+0x9c>
 2a0:	be cf       	rjmp	.-132    	; 0x21e <main+0x18>
				motor_left(motor_stop,0);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 a8 01 	call	0x350	; 0x350 <motor_left>
				motor_right(motor_forward,100);
 2aa:	64 e6       	ldi	r22, 0x64	; 100
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 74 01 	call	0x2e8	; 0x2e8 <motor_right>
 2b2:	b5 cf       	rjmp	.-150    	; 0x21e <main+0x18>
			}
		}
		else if (read_rightSensor() == 1 || read_leftSensor() == 1){
 2b4:	0e 94 78 00 	call	0xf0	; 0xf0 <read_rightSensor>
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	29 f0       	breq	.+10     	; 0x2c6 <main+0xc0>
 2bc:	0e 94 90 00 	call	0x120	; 0x120 <read_leftSensor>
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <main+0xc0>
 2c4:	ac cf       	rjmp	.-168    	; 0x21e <main+0x18>
			turn_back();
 2c6:	0e 94 be 00 	call	0x17c	; 0x17c <turn_back>
 2ca:	a9 cf       	rjmp	.-174    	; 0x21e <main+0x18>

000002cc <init_timer1>:
#include "motors.h"

// PWM for speed control
void init_timer1()
{
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase Correct, 8-bit
 2cc:	e0 e8       	ldi	r30, 0x80	; 128
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//low level on OC1A/OC1B when up-counting
 2d6:	80 81       	ld	r24, Z
 2d8:	80 6a       	ori	r24, 0xA0	; 160
 2da:	80 83       	st	Z, r24
										//high level on OC1A/OC1B on Compare Match when downcounting
	TCCR1B |= (1<<CS12)|(1<<CS10);	//frequency=fcpu/1024 ~ 15Khz (motors operating frequency)
 2dc:	e1 e8       	ldi	r30, 0x81	; 129
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	85 60       	ori	r24, 0x05	; 5
 2e4:	80 83       	st	Z, r24
 2e6:	08 95       	ret

000002e8 <motor_right>:
}

//motor right direction&speed control
void motor_right(uint8_t dir,uint8_t speed)
{
 2e8:	cf 93       	push	r28
	//direction
	if(dir == motor_stop)
 2ea:	81 11       	cpse	r24, r1
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <motor_right+0x10>
	{
		PORTC &= 0 << PC4;
 2ee:	88 b1       	in	r24, 0x08	; 8
 2f0:	18 b8       	out	0x08, r1	; 8
		PORTC &= 0 << PC5;
 2f2:	88 b1       	in	r24, 0x08	; 8
 2f4:	18 b8       	out	0x08, r1	; 8
 2f6:	0f c0       	rjmp	.+30     	; 0x316 <motor_right+0x2e>
	}
	else if(dir == motor_forward)
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	31 f4       	brne	.+12     	; 0x308 <motor_right+0x20>
	{
		PORTC &= 0 << PC4;
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC5;
 300:	88 b1       	in	r24, 0x08	; 8
 302:	80 62       	ori	r24, 0x20	; 32
 304:	88 b9       	out	0x08, r24	; 8
 306:	07 c0       	rjmp	.+14     	; 0x316 <motor_right+0x2e>
	}
	else if(dir == motor_backward)
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	29 f4       	brne	.+10     	; 0x316 <motor_right+0x2e>
	{
		PORTC &= 0 << PC5;
 30c:	88 b1       	in	r24, 0x08	; 8
 30e:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC4;
 310:	88 b1       	in	r24, 0x08	; 8
 312:	80 61       	ori	r24, 0x10	; 16
 314:	88 b9       	out	0x08, r24	; 8
	}

	//Speed
	uint8_t sreg = SREG;//Status Register
 316:	cf b7       	in	r28, 0x3f	; 63

	cli();
 318:	f8 94       	cli
	OCR1B = (uint8_t)(((float)(speed/255.0)*robo_speed));
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 9c 03 	call	0x738	; 0x738 <__floatsisf>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	4f e7       	ldi	r20, 0x7F	; 127
 32a:	53 e4       	ldi	r21, 0x43	; 67
 32c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__divsf3>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	4f e7       	ldi	r20, 0x7F	; 127
 336:	53 e4       	ldi	r21, 0x43	; 67
 338:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3>
 33c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fixunssfsi>
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 346:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	SREG = sreg;
 34a:	cf bf       	out	0x3f, r28	; 63
}
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <motor_left>:

//motor left direction&speed control
void motor_left(uint8_t dir,uint8_t speed)
{
 350:	cf 93       	push	r28
	//Direction
	if(dir == motor_stop)
 352:	81 11       	cpse	r24, r1
 354:	05 c0       	rjmp	.+10     	; 0x360 <motor_left+0x10>
	{
		PORTB &= 0 << PB3;
 356:	85 b1       	in	r24, 0x05	; 5
 358:	15 b8       	out	0x05, r1	; 5
		PORTB &= 0 << PB4;
 35a:	85 b1       	in	r24, 0x05	; 5
 35c:	15 b8       	out	0x05, r1	; 5
 35e:	0f c0       	rjmp	.+30     	; 0x37e <motor_left+0x2e>
	}
	else if(dir == motor_forward)
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	31 f4       	brne	.+12     	; 0x370 <motor_left+0x20>
	{
		PORTB &= 0 << PB3;
 364:	85 b1       	in	r24, 0x05	; 5
 366:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB4;
 368:	85 b1       	in	r24, 0x05	; 5
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	85 b9       	out	0x05, r24	; 5
 36e:	07 c0       	rjmp	.+14     	; 0x37e <motor_left+0x2e>
	}
	else if(dir == motor_backward)
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	29 f4       	brne	.+10     	; 0x37e <motor_left+0x2e>
	{
		PORTB &= 0 << PB4;
 374:	85 b1       	in	r24, 0x05	; 5
 376:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB3;
 378:	85 b1       	in	r24, 0x05	; 5
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	85 b9       	out	0x05, r24	; 5
	}

	//Speed
	uint8_t sreg = SREG;
 37e:	cf b7       	in	r28, 0x3f	; 63
	
	cli();
 380:	f8 94       	cli
	OCR1A = (uint8_t)(((float)(speed/255.0)*robo_speed));
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 9c 03 	call	0x738	; 0x738 <__floatsisf>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	4f e7       	ldi	r20, 0x7F	; 127
 392:	53 e4       	ldi	r21, 0x43	; 67
 394:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__divsf3>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	4f e7       	ldi	r20, 0x7F	; 127
 39e:	53 e4       	ldi	r21, 0x43	; 67
 3a0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3>
 3a4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fixunssfsi>
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ae:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	SREG = sreg;
 3b2:	cf bf       	out	0x3f, r28	; 63
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void){
	//Ultrasonic sensor
	DDRB |= (1 << PB0);			//PB0 Enable output for trigger
 3b8:	84 b1       	in	r24, 0x04	; 4
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	84 b9       	out	0x04, r24	; 4
	PORTB &= (0 << PB0);		//Clear Output
 3be:	85 b1       	in	r24, 0x05	; 5
 3c0:	15 b8       	out	0x05, r1	; 5
	DDRD &= 0 << PD2;			//Input for echo on external interrupt
 3c2:	8a b1       	in	r24, 0x0a	; 10
 3c4:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PD1);		//Activate PullUp Resistor
 3c6:	8b b1       	in	r24, 0x0b	; 11
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	8b b9       	out	0x0b, r24	; 11
	//Timer
	DDRB |= (1 << PB1);			//OC1A enable Output for Left Motor
 3cc:	84 b1       	in	r24, 0x04	; 4
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2);			//OC1B enable Output for right motor
 3d2:	84 b1       	in	r24, 0x04	; 4
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	84 b9       	out	0x04, r24	; 4
	//Motor Direction
	DDRB |= (1 << PB3) | (1 << PB4);//Left motor
 3d8:	84 b1       	in	r24, 0x04	; 4
 3da:	88 61       	ori	r24, 0x18	; 24
 3dc:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4) | (1 << PC5);//Right motor
 3de:	87 b1       	in	r24, 0x07	; 7
 3e0:	80 63       	ori	r24, 0x30	; 48
 3e2:	87 b9       	out	0x07, r24	; 7
	//Power on indicator
	DDRB |= (1 << PB5);				//Power on led indicator
 3e4:	84 b1       	in	r24, 0x04	; 4
 3e6:	80 62       	ori	r24, 0x20	; 32
 3e8:	84 b9       	out	0x04, r24	; 4
 3ea:	08 95       	ret

000003ec <__vector_16>:
volatile uint32_t timerCounter = 0;
volatile float distance = 0;

// timer overflow interrupt, each time when timer value passes 255 value
SIGNAL(TIMER0_OVF_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
	if (up) {       // voltage rise was detected previously
 400:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <up>
 404:	88 23       	and	r24, r24
 406:	c1 f1       	breq	.+112    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		timerCounter++; //count the number of overflows
 408:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timerCounter>
 40c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timerCounter+0x1>
 410:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timerCounter+0x2>
 414:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timerCounter+0x3>
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	a1 1d       	adc	r26, r1
 41c:	b1 1d       	adc	r27, r1
 41e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timerCounter>
 422:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timerCounter+0x1>
 426:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timerCounter+0x2>
 42a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timerCounter+0x3>
		// dont wait too long for the sonar end response, stop if time for measuring the distance exceeded limits
		uint32_t ticks = timerCounter * 256 + TCNT0;
 42e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timerCounter>
 432:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timerCounter+0x1>
 436:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timerCounter+0x2>
 43a:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timerCounter+0x3>
 43e:	ba 2f       	mov	r27, r26
 440:	a9 2f       	mov	r26, r25
 442:	98 2f       	mov	r25, r24
 444:	88 27       	eor	r24, r24
 446:	26 b5       	in	r18, 0x26	; 38
 448:	82 0f       	add	r24, r18
 44a:	91 1d       	adc	r25, r1
 44c:	a1 1d       	adc	r26, r1
 44e:	b1 1d       	adc	r27, r1
		uint32_t max_ticks = (uint32_t)MAX_RESP_TIME_MS * INSTR_PER_MS;
		if (ticks > max_ticks) {
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	95 43       	sbci	r25, 0x35	; 53
 454:	ac 40       	sbci	r26, 0x0C	; 12
 456:	b1 05       	cpc	r27, r1
 458:	78 f0       	brcs	.+30     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
			up = 0;      // stop counting timer values
 45a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <up>
			running = 0; // ultrasound scan done
 45e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <running>
			result = -1; // show that measurement failed with a timeout (could return max distance here if needed)
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	9f ef       	ldi	r25, 0xFF	; 255
 466:	dc 01       	movw	r26, r24
 468:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <result>
 46c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <result+0x1>
 470:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <result+0x2>
 474:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <result+0x3>
		}
	}
}
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <__vector_1>:

// interrupt on INT0 pin, to detect high/low voltage changes
ISR(INT0_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	if (running) { //accept interrupts only when sonar was started
 4ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <running>
 4b2:	88 23       	and	r24, r24
 4b4:	b1 f1       	breq	.+108    	; 0x522 <__vector_1+0x96>
		if (up == 0) { // voltage rise, start time measurement
 4b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <up>
 4ba:	81 11       	cpse	r24, r1
 4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <__vector_1+0x4c>
			up = 1;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <up>
			timerCounter = 0;
 4c4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timerCounter>
 4c8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timerCounter+0x1>
 4cc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timerCounter+0x2>
 4d0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timerCounter+0x3>
			TCNT0 = 0; // reset timer counter
 4d4:	16 bc       	out	0x26, r1	; 38
 4d6:	25 c0       	rjmp	.+74     	; 0x522 <__vector_1+0x96>
			} else {
			// voltage drop, stop time measurement
			up = 0;
 4d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <up>
			//d = [ time_s * 340m/s ] / 2 = time_us/58
			result = (timerCounter * 256 + TCNT0) / 58;
 4dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timerCounter>
 4e0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timerCounter+0x1>
 4e4:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timerCounter+0x2>
 4e8:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timerCounter+0x3>
 4ec:	ba 2f       	mov	r27, r26
 4ee:	a9 2f       	mov	r26, r25
 4f0:	98 2f       	mov	r25, r24
 4f2:	88 27       	eor	r24, r24
 4f4:	26 b5       	in	r18, 0x26	; 38
 4f6:	bc 01       	movw	r22, r24
 4f8:	cd 01       	movw	r24, r26
 4fa:	62 0f       	add	r22, r18
 4fc:	71 1d       	adc	r23, r1
 4fe:	81 1d       	adc	r24, r1
 500:	91 1d       	adc	r25, r1
 502:	2a e3       	ldi	r18, 0x3A	; 58
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	0e 94 be 04 	call	0x97c	; 0x97c <__udivmodsi4>
 50e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <result>
 512:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <result+0x1>
 516:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <result+0x2>
 51a:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <result+0x3>
			running = 0;
 51e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <running>
			
		}
	}
}
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <send_trigger>:

void send_trigger(void) {
	PORTB &= (0 << PB0); // clear to zero for 1 us
 544:	85 b1       	in	r24, 0x05	; 5
 546:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 548:	85 e1       	ldi	r24, 0x15	; 21
 54a:	8a 95       	dec	r24
 54c:	f1 f7       	brne	.-4      	; 0x54a <send_trigger+0x6>
 54e:	00 00       	nop
	_delay_us(4);
	PORTB |= (1 << PB0); // set high for 10us
 550:	85 b1       	in	r24, 0x05	; 5
 552:	81 60       	ori	r24, 0x01	; 1
 554:	85 b9       	out	0x05, r24	; 5
	running = 1;  // sonar launched
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <running>
 55c:	85 e3       	ldi	r24, 0x35	; 53
 55e:	8a 95       	dec	r24
 560:	f1 f7       	brne	.-4      	; 0x55e <send_trigger+0x1a>
 562:	00 00       	nop
	_delay_us(10);
	PORTB &= (0 << PB0); // clear
 564:	85 b1       	in	r24, 0x05	; 5
 566:	15 b8       	out	0x05, r1	; 5
 568:	08 95       	ret

0000056a <init_ext_int0>:
}
//Initialize external interrupt
void init_ext_int0(void)
{
	EICRA |= (1 << ISC00);	//Interrupt on any logical change(table 13-2 pag.80)
 56a:	e9 e6       	ldi	r30, 0x69	; 105
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	81 60       	ori	r24, 0x01	; 1
 572:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);	//Enable INT0
 574:	8d b3       	in	r24, 0x1d	; 29
 576:	81 60       	ori	r24, 0x01	; 1
 578:	8d bb       	out	0x1d, r24	; 29
 57a:	08 95       	ret

0000057c <init_timer0>:
}

//Initialize timer to count up
void init_timer0(void)
{
	TCCR0B |= (1 << CS00);	//select internal clock with no prescaling
 57c:	85 b5       	in	r24, 0x25	; 37
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;	//reset counter to zero
 582:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);	//enable timer interrupt
 584:	ee e6       	ldi	r30, 0x6E	; 110
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	81 60       	ori	r24, 0x01	; 1
 58c:	80 83       	st	Z, r24
	sei(); // enable all(global) interrupts
 58e:	78 94       	sei
 590:	08 95       	ret

00000592 <example_sonar>:
}

void example_sonar(void){
	for (;;) {
		if (running == 0) { // launch only when next iteration can happen
 592:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <running>
 596:	81 11       	cpse	r24, r1
 598:	fc cf       	rjmp	.-8      	; 0x592 <example_sonar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	8d ee       	ldi	r24, 0xED	; 237
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	21 50       	subi	r18, 0x01	; 1
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <example_sonar+0xe>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <example_sonar+0x18>
 5aa:	00 00       	nop
			// create a delay between tests, to compensate for old echoes
			_delay_ms(DELAY_BETWEEN_TESTS_MS);
			send_trigger();
 5ac:	0e 94 a2 02 	call	0x544	; 0x544 <send_trigger>
 5b0:	08 95       	ret

000005b2 <get_distance>:
		}
	}
}

float get_distance(void){
	distance = result;
 5b2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <result>
 5b6:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <result+0x1>
 5ba:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <result+0x2>
 5be:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <result+0x3>
 5c2:	0e 94 9c 03 	call	0x738	; 0x738 <__floatsisf>
 5c6:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <distance>
 5ca:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <distance+0x1>
 5ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <distance+0x2>
 5d2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <distance+0x3>
	return distance;
 5d6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <distance>
 5da:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <distance+0x1>
 5de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <distance+0x2>
 5e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <distance+0x3>
}
 5e6:	08 95       	ret

000005e8 <__cmpsf2>:
 5e8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_cmp>
 5ec:	08 f4       	brcc	.+2      	; 0x5f0 <__cmpsf2+0x8>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	08 95       	ret

000005f2 <__divsf3>:
 5f2:	0e 94 0d 03 	call	0x61a	; 0x61a <__divsf3x>
 5f6:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_round>
 5fa:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscB>
 5fe:	58 f0       	brcs	.+22     	; 0x616 <__divsf3+0x24>
 600:	0e 94 04 04 	call	0x808	; 0x808 <__fp_pscA>
 604:	40 f0       	brcs	.+16     	; 0x616 <__divsf3+0x24>
 606:	29 f4       	brne	.+10     	; 0x612 <__divsf3+0x20>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	29 f0       	breq	.+10     	; 0x616 <__divsf3+0x24>
 60c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 610:	51 11       	cpse	r21, r1
 612:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>
 616:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_nan>

0000061a <__divsf3x>:
 61a:	0e 94 23 04 	call	0x846	; 0x846 <__fp_split3>
 61e:	68 f3       	brcs	.-38     	; 0x5fa <__divsf3+0x8>

00000620 <__divsf3_pse>:
 620:	99 23       	and	r25, r25
 622:	b1 f3       	breq	.-20     	; 0x610 <__divsf3+0x1e>
 624:	55 23       	and	r21, r21
 626:	91 f3       	breq	.-28     	; 0x60c <__divsf3+0x1a>
 628:	95 1b       	sub	r25, r21
 62a:	55 0b       	sbc	r21, r21
 62c:	bb 27       	eor	r27, r27
 62e:	aa 27       	eor	r26, r26
 630:	62 17       	cp	r22, r18
 632:	73 07       	cpc	r23, r19
 634:	84 07       	cpc	r24, r20
 636:	38 f0       	brcs	.+14     	; 0x646 <__divsf3_pse+0x26>
 638:	9f 5f       	subi	r25, 0xFF	; 255
 63a:	5f 4f       	sbci	r21, 0xFF	; 255
 63c:	22 0f       	add	r18, r18
 63e:	33 1f       	adc	r19, r19
 640:	44 1f       	adc	r20, r20
 642:	aa 1f       	adc	r26, r26
 644:	a9 f3       	breq	.-22     	; 0x630 <__divsf3_pse+0x10>
 646:	35 d0       	rcall	.+106    	; 0x6b2 <__divsf3_pse+0x92>
 648:	0e 2e       	mov	r0, r30
 64a:	3a f0       	brmi	.+14     	; 0x65a <__divsf3_pse+0x3a>
 64c:	e0 e8       	ldi	r30, 0x80	; 128
 64e:	32 d0       	rcall	.+100    	; 0x6b4 <__divsf3_pse+0x94>
 650:	91 50       	subi	r25, 0x01	; 1
 652:	50 40       	sbci	r21, 0x00	; 0
 654:	e6 95       	lsr	r30
 656:	00 1c       	adc	r0, r0
 658:	ca f7       	brpl	.-14     	; 0x64c <__divsf3_pse+0x2c>
 65a:	2b d0       	rcall	.+86     	; 0x6b2 <__divsf3_pse+0x92>
 65c:	fe 2f       	mov	r31, r30
 65e:	29 d0       	rcall	.+82     	; 0x6b2 <__divsf3_pse+0x92>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	bb 1f       	adc	r27, r27
 668:	26 17       	cp	r18, r22
 66a:	37 07       	cpc	r19, r23
 66c:	48 07       	cpc	r20, r24
 66e:	ab 07       	cpc	r26, r27
 670:	b0 e8       	ldi	r27, 0x80	; 128
 672:	09 f0       	breq	.+2      	; 0x676 <__divsf3_pse+0x56>
 674:	bb 0b       	sbc	r27, r27
 676:	80 2d       	mov	r24, r0
 678:	bf 01       	movw	r22, r30
 67a:	ff 27       	eor	r31, r31
 67c:	93 58       	subi	r25, 0x83	; 131
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	3a f0       	brmi	.+14     	; 0x690 <__divsf3_pse+0x70>
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	51 05       	cpc	r21, r1
 686:	78 f0       	brcs	.+30     	; 0x6a6 <__divsf3_pse+0x86>
 688:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 68c:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	e4 f3       	brlt	.-8      	; 0x68c <__divsf3_pse+0x6c>
 694:	98 3e       	cpi	r25, 0xE8	; 232
 696:	d4 f3       	brlt	.-12     	; 0x68c <__divsf3_pse+0x6c>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	9f 5f       	subi	r25, 0xFF	; 255
 6a4:	c9 f7       	brne	.-14     	; 0x698 <__divsf3_pse+0x78>
 6a6:	88 0f       	add	r24, r24
 6a8:	91 1d       	adc	r25, r1
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret
 6b2:	e1 e0       	ldi	r30, 0x01	; 1
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	bb 1f       	adc	r27, r27
 6bc:	62 17       	cp	r22, r18
 6be:	73 07       	cpc	r23, r19
 6c0:	84 07       	cpc	r24, r20
 6c2:	ba 07       	cpc	r27, r26
 6c4:	20 f0       	brcs	.+8      	; 0x6ce <__divsf3_pse+0xae>
 6c6:	62 1b       	sub	r22, r18
 6c8:	73 0b       	sbc	r23, r19
 6ca:	84 0b       	sbc	r24, r20
 6cc:	ba 0b       	sbc	r27, r26
 6ce:	ee 1f       	adc	r30, r30
 6d0:	88 f7       	brcc	.-30     	; 0x6b4 <__divsf3_pse+0x94>
 6d2:	e0 95       	com	r30
 6d4:	08 95       	ret

000006d6 <__fixunssfsi>:
 6d6:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_splitA>
 6da:	88 f0       	brcs	.+34     	; 0x6fe <__fixunssfsi+0x28>
 6dc:	9f 57       	subi	r25, 0x7F	; 127
 6de:	98 f0       	brcs	.+38     	; 0x706 <__fixunssfsi+0x30>
 6e0:	b9 2f       	mov	r27, r25
 6e2:	99 27       	eor	r25, r25
 6e4:	b7 51       	subi	r27, 0x17	; 23
 6e6:	b0 f0       	brcs	.+44     	; 0x714 <__fixunssfsi+0x3e>
 6e8:	e1 f0       	breq	.+56     	; 0x722 <__fixunssfsi+0x4c>
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	1a f0       	brmi	.+6      	; 0x6fa <__fixunssfsi+0x24>
 6f4:	ba 95       	dec	r27
 6f6:	c9 f7       	brne	.-14     	; 0x6ea <__fixunssfsi+0x14>
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <__fixunssfsi+0x4c>
 6fa:	b1 30       	cpi	r27, 0x01	; 1
 6fc:	91 f0       	breq	.+36     	; 0x722 <__fixunssfsi+0x4c>
 6fe:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_zero>
 702:	b1 e0       	ldi	r27, 0x01	; 1
 704:	08 95       	ret
 706:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_zero>
 70a:	67 2f       	mov	r22, r23
 70c:	78 2f       	mov	r23, r24
 70e:	88 27       	eor	r24, r24
 710:	b8 5f       	subi	r27, 0xF8	; 248
 712:	39 f0       	breq	.+14     	; 0x722 <__fixunssfsi+0x4c>
 714:	b9 3f       	cpi	r27, 0xF9	; 249
 716:	cc f3       	brlt	.-14     	; 0x70a <__fixunssfsi+0x34>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b3 95       	inc	r27
 720:	d9 f7       	brne	.-10     	; 0x718 <__fixunssfsi+0x42>
 722:	3e f4       	brtc	.+14     	; 0x732 <__fixunssfsi+0x5c>
 724:	90 95       	com	r25
 726:	80 95       	com	r24
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	08 95       	ret

00000734 <__floatunsisf>:
 734:	e8 94       	clt
 736:	09 c0       	rjmp	.+18     	; 0x74a <__floatsisf+0x12>

00000738 <__floatsisf>:
 738:	97 fb       	bst	r25, 7
 73a:	3e f4       	brtc	.+14     	; 0x74a <__floatsisf+0x12>
 73c:	90 95       	com	r25
 73e:	80 95       	com	r24
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	99 23       	and	r25, r25
 74c:	a9 f0       	breq	.+42     	; 0x778 <__floatsisf+0x40>
 74e:	f9 2f       	mov	r31, r25
 750:	96 e9       	ldi	r25, 0x96	; 150
 752:	bb 27       	eor	r27, r27
 754:	93 95       	inc	r25
 756:	f6 95       	lsr	r31
 758:	87 95       	ror	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f1 11       	cpse	r31, r1
 762:	f8 cf       	rjmp	.-16     	; 0x754 <__floatsisf+0x1c>
 764:	fa f4       	brpl	.+62     	; 0x7a4 <__floatsisf+0x6c>
 766:	bb 0f       	add	r27, r27
 768:	11 f4       	brne	.+4      	; 0x76e <__floatsisf+0x36>
 76a:	60 ff       	sbrs	r22, 0
 76c:	1b c0       	rjmp	.+54     	; 0x7a4 <__floatsisf+0x6c>
 76e:	6f 5f       	subi	r22, 0xFF	; 255
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	16 c0       	rjmp	.+44     	; 0x7a4 <__floatsisf+0x6c>
 778:	88 23       	and	r24, r24
 77a:	11 f0       	breq	.+4      	; 0x780 <__floatsisf+0x48>
 77c:	96 e9       	ldi	r25, 0x96	; 150
 77e:	11 c0       	rjmp	.+34     	; 0x7a2 <__floatsisf+0x6a>
 780:	77 23       	and	r23, r23
 782:	21 f0       	breq	.+8      	; 0x78c <__floatsisf+0x54>
 784:	9e e8       	ldi	r25, 0x8E	; 142
 786:	87 2f       	mov	r24, r23
 788:	76 2f       	mov	r23, r22
 78a:	05 c0       	rjmp	.+10     	; 0x796 <__floatsisf+0x5e>
 78c:	66 23       	and	r22, r22
 78e:	71 f0       	breq	.+28     	; 0x7ac <__floatsisf+0x74>
 790:	96 e8       	ldi	r25, 0x86	; 134
 792:	86 2f       	mov	r24, r22
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	2a f0       	brmi	.+10     	; 0x7a4 <__floatsisf+0x6c>
 79a:	9a 95       	dec	r25
 79c:	66 0f       	add	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	da f7       	brpl	.-10     	; 0x79a <__floatsisf+0x62>
 7a4:	88 0f       	add	r24, r24
 7a6:	96 95       	lsr	r25
 7a8:	87 95       	ror	r24
 7aa:	97 f9       	bld	r25, 7
 7ac:	08 95       	ret

000007ae <__fp_cmp>:
 7ae:	99 0f       	add	r25, r25
 7b0:	00 08       	sbc	r0, r0
 7b2:	55 0f       	add	r21, r21
 7b4:	aa 0b       	sbc	r26, r26
 7b6:	e0 e8       	ldi	r30, 0x80	; 128
 7b8:	fe ef       	ldi	r31, 0xFE	; 254
 7ba:	16 16       	cp	r1, r22
 7bc:	17 06       	cpc	r1, r23
 7be:	e8 07       	cpc	r30, r24
 7c0:	f9 07       	cpc	r31, r25
 7c2:	c0 f0       	brcs	.+48     	; 0x7f4 <__fp_cmp+0x46>
 7c4:	12 16       	cp	r1, r18
 7c6:	13 06       	cpc	r1, r19
 7c8:	e4 07       	cpc	r30, r20
 7ca:	f5 07       	cpc	r31, r21
 7cc:	98 f0       	brcs	.+38     	; 0x7f4 <__fp_cmp+0x46>
 7ce:	62 1b       	sub	r22, r18
 7d0:	73 0b       	sbc	r23, r19
 7d2:	84 0b       	sbc	r24, r20
 7d4:	95 0b       	sbc	r25, r21
 7d6:	39 f4       	brne	.+14     	; 0x7e6 <__fp_cmp+0x38>
 7d8:	0a 26       	eor	r0, r26
 7da:	61 f0       	breq	.+24     	; 0x7f4 <__fp_cmp+0x46>
 7dc:	23 2b       	or	r18, r19
 7de:	24 2b       	or	r18, r20
 7e0:	25 2b       	or	r18, r21
 7e2:	21 f4       	brne	.+8      	; 0x7ec <__fp_cmp+0x3e>
 7e4:	08 95       	ret
 7e6:	0a 26       	eor	r0, r26
 7e8:	09 f4       	brne	.+2      	; 0x7ec <__fp_cmp+0x3e>
 7ea:	a1 40       	sbci	r26, 0x01	; 1
 7ec:	a6 95       	lsr	r26
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	81 1d       	adc	r24, r1
 7f2:	81 1d       	adc	r24, r1
 7f4:	08 95       	ret

000007f6 <__fp_inf>:
 7f6:	97 f9       	bld	r25, 7
 7f8:	9f 67       	ori	r25, 0x7F	; 127
 7fa:	80 e8       	ldi	r24, 0x80	; 128
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	08 95       	ret

00000802 <__fp_nan>:
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	80 ec       	ldi	r24, 0xC0	; 192
 806:	08 95       	ret

00000808 <__fp_pscA>:
 808:	00 24       	eor	r0, r0
 80a:	0a 94       	dec	r0
 80c:	16 16       	cp	r1, r22
 80e:	17 06       	cpc	r1, r23
 810:	18 06       	cpc	r1, r24
 812:	09 06       	cpc	r0, r25
 814:	08 95       	ret

00000816 <__fp_pscB>:
 816:	00 24       	eor	r0, r0
 818:	0a 94       	dec	r0
 81a:	12 16       	cp	r1, r18
 81c:	13 06       	cpc	r1, r19
 81e:	14 06       	cpc	r1, r20
 820:	05 06       	cpc	r0, r21
 822:	08 95       	ret

00000824 <__fp_round>:
 824:	09 2e       	mov	r0, r25
 826:	03 94       	inc	r0
 828:	00 0c       	add	r0, r0
 82a:	11 f4       	brne	.+4      	; 0x830 <__fp_round+0xc>
 82c:	88 23       	and	r24, r24
 82e:	52 f0       	brmi	.+20     	; 0x844 <__fp_round+0x20>
 830:	bb 0f       	add	r27, r27
 832:	40 f4       	brcc	.+16     	; 0x844 <__fp_round+0x20>
 834:	bf 2b       	or	r27, r31
 836:	11 f4       	brne	.+4      	; 0x83c <__fp_round+0x18>
 838:	60 ff       	sbrs	r22, 0
 83a:	04 c0       	rjmp	.+8      	; 0x844 <__fp_round+0x20>
 83c:	6f 5f       	subi	r22, 0xFF	; 255
 83e:	7f 4f       	sbci	r23, 0xFF	; 255
 840:	8f 4f       	sbci	r24, 0xFF	; 255
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	08 95       	ret

00000846 <__fp_split3>:
 846:	57 fd       	sbrc	r21, 7
 848:	90 58       	subi	r25, 0x80	; 128
 84a:	44 0f       	add	r20, r20
 84c:	55 1f       	adc	r21, r21
 84e:	59 f0       	breq	.+22     	; 0x866 <__fp_splitA+0x10>
 850:	5f 3f       	cpi	r21, 0xFF	; 255
 852:	71 f0       	breq	.+28     	; 0x870 <__fp_splitA+0x1a>
 854:	47 95       	ror	r20

00000856 <__fp_splitA>:
 856:	88 0f       	add	r24, r24
 858:	97 fb       	bst	r25, 7
 85a:	99 1f       	adc	r25, r25
 85c:	61 f0       	breq	.+24     	; 0x876 <__fp_splitA+0x20>
 85e:	9f 3f       	cpi	r25, 0xFF	; 255
 860:	79 f0       	breq	.+30     	; 0x880 <__fp_splitA+0x2a>
 862:	87 95       	ror	r24
 864:	08 95       	ret
 866:	12 16       	cp	r1, r18
 868:	13 06       	cpc	r1, r19
 86a:	14 06       	cpc	r1, r20
 86c:	55 1f       	adc	r21, r21
 86e:	f2 cf       	rjmp	.-28     	; 0x854 <__fp_split3+0xe>
 870:	46 95       	lsr	r20
 872:	f1 df       	rcall	.-30     	; 0x856 <__fp_splitA>
 874:	08 c0       	rjmp	.+16     	; 0x886 <__fp_splitA+0x30>
 876:	16 16       	cp	r1, r22
 878:	17 06       	cpc	r1, r23
 87a:	18 06       	cpc	r1, r24
 87c:	99 1f       	adc	r25, r25
 87e:	f1 cf       	rjmp	.-30     	; 0x862 <__fp_splitA+0xc>
 880:	86 95       	lsr	r24
 882:	71 05       	cpc	r23, r1
 884:	61 05       	cpc	r22, r1
 886:	08 94       	sec
 888:	08 95       	ret

0000088a <__fp_zero>:
 88a:	e8 94       	clt

0000088c <__fp_szero>:
 88c:	bb 27       	eor	r27, r27
 88e:	66 27       	eor	r22, r22
 890:	77 27       	eor	r23, r23
 892:	cb 01       	movw	r24, r22
 894:	97 f9       	bld	r25, 7
 896:	08 95       	ret

00000898 <__gesf2>:
 898:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_cmp>
 89c:	08 f4       	brcc	.+2      	; 0x8a0 <__gesf2+0x8>
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__mulsf3>:
 8a2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__mulsf3x>
 8a6:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_round>
 8aa:	0e 94 04 04 	call	0x808	; 0x808 <__fp_pscA>
 8ae:	38 f0       	brcs	.+14     	; 0x8be <__mulsf3+0x1c>
 8b0:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscB>
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__mulsf3+0x1c>
 8b6:	95 23       	and	r25, r21
 8b8:	11 f0       	breq	.+4      	; 0x8be <__mulsf3+0x1c>
 8ba:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 8be:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_nan>
 8c2:	11 24       	eor	r1, r1
 8c4:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>

000008c8 <__mulsf3x>:
 8c8:	0e 94 23 04 	call	0x846	; 0x846 <__fp_split3>
 8cc:	70 f3       	brcs	.-36     	; 0x8aa <__mulsf3+0x8>

000008ce <__mulsf3_pse>:
 8ce:	95 9f       	mul	r25, r21
 8d0:	c1 f3       	breq	.-16     	; 0x8c2 <__mulsf3+0x20>
 8d2:	95 0f       	add	r25, r21
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	55 1f       	adc	r21, r21
 8d8:	62 9f       	mul	r22, r18
 8da:	f0 01       	movw	r30, r0
 8dc:	72 9f       	mul	r23, r18
 8de:	bb 27       	eor	r27, r27
 8e0:	f0 0d       	add	r31, r0
 8e2:	b1 1d       	adc	r27, r1
 8e4:	63 9f       	mul	r22, r19
 8e6:	aa 27       	eor	r26, r26
 8e8:	f0 0d       	add	r31, r0
 8ea:	b1 1d       	adc	r27, r1
 8ec:	aa 1f       	adc	r26, r26
 8ee:	64 9f       	mul	r22, r20
 8f0:	66 27       	eor	r22, r22
 8f2:	b0 0d       	add	r27, r0
 8f4:	a1 1d       	adc	r26, r1
 8f6:	66 1f       	adc	r22, r22
 8f8:	82 9f       	mul	r24, r18
 8fa:	22 27       	eor	r18, r18
 8fc:	b0 0d       	add	r27, r0
 8fe:	a1 1d       	adc	r26, r1
 900:	62 1f       	adc	r22, r18
 902:	73 9f       	mul	r23, r19
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	62 1f       	adc	r22, r18
 90a:	83 9f       	mul	r24, r19
 90c:	a0 0d       	add	r26, r0
 90e:	61 1d       	adc	r22, r1
 910:	22 1f       	adc	r18, r18
 912:	74 9f       	mul	r23, r20
 914:	33 27       	eor	r19, r19
 916:	a0 0d       	add	r26, r0
 918:	61 1d       	adc	r22, r1
 91a:	23 1f       	adc	r18, r19
 91c:	84 9f       	mul	r24, r20
 91e:	60 0d       	add	r22, r0
 920:	21 1d       	adc	r18, r1
 922:	82 2f       	mov	r24, r18
 924:	76 2f       	mov	r23, r22
 926:	6a 2f       	mov	r22, r26
 928:	11 24       	eor	r1, r1
 92a:	9f 57       	subi	r25, 0x7F	; 127
 92c:	50 40       	sbci	r21, 0x00	; 0
 92e:	9a f0       	brmi	.+38     	; 0x956 <__stack+0x57>
 930:	f1 f0       	breq	.+60     	; 0x96e <__stack+0x6f>
 932:	88 23       	and	r24, r24
 934:	4a f0       	brmi	.+18     	; 0x948 <__stack+0x49>
 936:	ee 0f       	add	r30, r30
 938:	ff 1f       	adc	r31, r31
 93a:	bb 1f       	adc	r27, r27
 93c:	66 1f       	adc	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	91 50       	subi	r25, 0x01	; 1
 944:	50 40       	sbci	r21, 0x00	; 0
 946:	a9 f7       	brne	.-22     	; 0x932 <__stack+0x33>
 948:	9e 3f       	cpi	r25, 0xFE	; 254
 94a:	51 05       	cpc	r21, r1
 94c:	80 f0       	brcs	.+32     	; 0x96e <__stack+0x6f>
 94e:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 952:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>
 956:	5f 3f       	cpi	r21, 0xFF	; 255
 958:	e4 f3       	brlt	.-8      	; 0x952 <__stack+0x53>
 95a:	98 3e       	cpi	r25, 0xE8	; 232
 95c:	d4 f3       	brlt	.-12     	; 0x952 <__stack+0x53>
 95e:	86 95       	lsr	r24
 960:	77 95       	ror	r23
 962:	67 95       	ror	r22
 964:	b7 95       	ror	r27
 966:	f7 95       	ror	r31
 968:	e7 95       	ror	r30
 96a:	9f 5f       	subi	r25, 0xFF	; 255
 96c:	c1 f7       	brne	.-16     	; 0x95e <__stack+0x5f>
 96e:	fe 2b       	or	r31, r30
 970:	88 0f       	add	r24, r24
 972:	91 1d       	adc	r25, r1
 974:	96 95       	lsr	r25
 976:	87 95       	ror	r24
 978:	97 f9       	bld	r25, 7
 97a:	08 95       	ret

0000097c <__udivmodsi4>:
 97c:	a1 e2       	ldi	r26, 0x21	; 33
 97e:	1a 2e       	mov	r1, r26
 980:	aa 1b       	sub	r26, r26
 982:	bb 1b       	sub	r27, r27
 984:	fd 01       	movw	r30, r26
 986:	0d c0       	rjmp	.+26     	; 0x9a2 <__udivmodsi4_ep>

00000988 <__udivmodsi4_loop>:
 988:	aa 1f       	adc	r26, r26
 98a:	bb 1f       	adc	r27, r27
 98c:	ee 1f       	adc	r30, r30
 98e:	ff 1f       	adc	r31, r31
 990:	a2 17       	cp	r26, r18
 992:	b3 07       	cpc	r27, r19
 994:	e4 07       	cpc	r30, r20
 996:	f5 07       	cpc	r31, r21
 998:	20 f0       	brcs	.+8      	; 0x9a2 <__udivmodsi4_ep>
 99a:	a2 1b       	sub	r26, r18
 99c:	b3 0b       	sbc	r27, r19
 99e:	e4 0b       	sbc	r30, r20
 9a0:	f5 0b       	sbc	r31, r21

000009a2 <__udivmodsi4_ep>:
 9a2:	66 1f       	adc	r22, r22
 9a4:	77 1f       	adc	r23, r23
 9a6:	88 1f       	adc	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	1a 94       	dec	r1
 9ac:	69 f7       	brne	.-38     	; 0x988 <__udivmodsi4_loop>
 9ae:	60 95       	com	r22
 9b0:	70 95       	com	r23
 9b2:	80 95       	com	r24
 9b4:	90 95       	com	r25
 9b6:	9b 01       	movw	r18, r22
 9b8:	ac 01       	movw	r20, r24
 9ba:	bd 01       	movw	r22, r26
 9bc:	cf 01       	movw	r24, r30
 9be:	08 95       	ret

000009c0 <_exit>:
 9c0:	f8 94       	cli

000009c2 <__stop_program>:
 9c2:	ff cf       	rjmp	.-2      	; 0x9c2 <__stop_program>
