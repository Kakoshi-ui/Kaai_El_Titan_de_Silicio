
Kaai_ElTitan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000918  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  0000098c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000119d  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b45  00000000  00000000  00002807  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  0000334c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  00003574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000595  00000000  00000000  00003ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  88:	0c 94 8a 04 	jmp	0x914	; 0x914 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
#include <avr/io.h>
#include "adc.h"

//Function To Initialize the ADC Module
void adc_init(){
	ADMUX=(1<<REFS0);	// For Aref=AVcc;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <read_adc>:
Argument: Channel Number between 0-7
Return Value : Between 0-1023
*/
uint16_t read_adc(uint8_t ch){
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  9e:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b01000000;
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	90 74       	andi	r25, 0x40	; 64
  a8:	90 83       	st	Z, r25
	ADMUX|=ch;
  aa:	90 81       	ld	r25, Z
  ac:	89 2b       	or	r24, r25
  ae:	80 83       	st	Z, r24
	
	//10-bit result left justified (ADCH bit9-2, ADCL bit1-0)
	ADMUX |= 1<<ADLAR;
  b0:	80 81       	ld	r24, Z
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	80 83       	st	Z, r24

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c4:	84 ff       	sbrs	r24, 4
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <read_adc+0x22>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	80 83       	st	Z, r24

	uint8_t LowPart = ADCL;	//10-bit resolution
  d2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH << 2 | LowPart >> 6; //10-bit resolution
  d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	22 95       	swap	r18
  e6:	26 95       	lsr	r18
  e8:	26 95       	lsr	r18
  ea:	23 70       	andi	r18, 0x03	; 3

	return TenBitResult;
  ec:	82 2b       	or	r24, r18
  ee:	08 95       	ret

000000f0 <read_rightSensor>:
uint16_t ir_sensor1, ir_sensor4; // using two ir_sensors to detect border line
uint8_t sensor1, sensor4;		 // where sensor1 is the right side sensor & sensor4 is the left side sensor
								 // from H bridge side view
int read_rightSensor(void){
	
	ir_sensor1 = read_adc(SENSOR1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
  f6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ir_sensor1+0x1>
  fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ir_sensor1>
	if (ir_sensor1 > SENSOR_THRESH){
  fe:	89 39       	cpi	r24, 0x99	; 153
 100:	23 e0       	ldi	r18, 0x03	; 3
 102:	92 07       	cpc	r25, r18
 104:	18 f0       	brcs	.+6      	; 0x10c <read_rightSensor+0x1c>
		sensor1 = 0;
 106:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensor1>
 10a:	06 c0       	rjmp	.+12     	; 0x118 <read_rightSensor+0x28>
	}
	else if(ir_sensor1 < SENSOR_THRESH){
 10c:	88 39       	cpi	r24, 0x98	; 152
 10e:	93 40       	sbci	r25, 0x03	; 3
 110:	18 f4       	brcc	.+6      	; 0x118 <read_rightSensor+0x28>
		sensor1 = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sensor1>
	}
	return sensor1;
 118:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sensor1>

}
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <read_leftSensor>:

int read_leftSensor(void){
	ir_sensor4 = read_adc(SENSOR4);
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
 126:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ir_sensor4+0x1>
 12a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ir_sensor4>
	if (ir_sensor4 > SENSOR_THRESH){
 12e:	89 39       	cpi	r24, 0x99	; 153
 130:	23 e0       	ldi	r18, 0x03	; 3
 132:	92 07       	cpc	r25, r18
 134:	18 f0       	brcs	.+6      	; 0x13c <read_leftSensor+0x1c>
		sensor4 = 0;
 136:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sensor4>
 13a:	06 c0       	rjmp	.+12     	; 0x148 <read_leftSensor+0x28>
	}
	else if(ir_sensor4 < SENSOR_THRESH){
 13c:	88 39       	cpi	r24, 0x98	; 152
 13e:	93 40       	sbci	r25, 0x03	; 3
 140:	18 f4       	brcc	.+6      	; 0x148 <read_leftSensor+0x28>
		sensor4 = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sensor4>
	}
	return sensor4;
 148:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sensor4>
}
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <power_on>:
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<10;i++){
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	0f c0       	rjmp	.+30     	; 0x174 <power_on+0x24>
		PORTB ^= 1 << PB5;
 156:	95 b1       	in	r25, 0x05	; 5
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	89 27       	eor	r24, r25
 15c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	4f ef       	ldi	r20, 0xFF	; 255
 160:	89 e6       	ldi	r24, 0x69	; 105
 162:	98 e1       	ldi	r25, 0x18	; 24
 164:	41 50       	subi	r20, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <power_on+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <power_on+0x1e>
 16e:	00 00       	nop
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<10;i++){
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	2a 30       	cpi	r18, 0x0A	; 10
 176:	31 05       	cpc	r19, r1
 178:	74 f3       	brlt	.-36     	; 0x156 <power_on+0x6>
		PORTB ^= 1 << PB5;
		_delay_ms(500);
	}
}
 17a:	08 95       	ret

0000017c <main>:
}


int main(){
	
	init_ports();
 17c:	0e 94 86 01 	call	0x30c	; 0x30c <init_ports>
	power_on();
 180:	0e 94 a8 00 	call	0x150	; 0x150 <power_on>
	init_timer1();
 184:	0e 94 10 01 	call	0x220	; 0x220 <init_timer1>
	
	adc_init();
 188:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	
	init_ext_int0();
 18c:	0e 94 5f 02 	call	0x4be	; 0x4be <init_ext_int0>
	init_timer0();
 190:	0e 94 68 02 	call	0x4d0	; 0x4d0 <init_timer0>
	
	while(1){
		PORTB |= 1 << PB5;
 194:	85 b1       	in	r24, 0x05	; 5
 196:	80 62       	ori	r24, 0x20	; 32
 198:	85 b9       	out	0x05, r24	; 5
		example_sonar();
 19a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <example_sonar>
		
		if(read_rightSensor() == 0 && read_leftSensor() == 0){
 19e:	0e 94 78 00 	call	0xf0	; 0xf0 <read_rightSensor>
 1a2:	89 2b       	or	r24, r25
 1a4:	a1 f5       	brne	.+104    	; 0x20e <main+0x92>
 1a6:	0e 94 90 00 	call	0x120	; 0x120 <read_leftSensor>
 1aa:	89 2b       	or	r24, r25
 1ac:	81 f5       	brne	.+96     	; 0x20e <main+0x92>
			us_distance = get_distance();
 1ae:	0e 94 83 02 	call	0x506	; 0x506 <get_distance>
 1b2:	6b 01       	movw	r12, r22
 1b4:	7c 01       	movw	r14, r24
 1b6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			if (us_distance > 0.30){
 1c6:	2a e9       	ldi	r18, 0x9A	; 154
 1c8:	39 e9       	ldi	r19, 0x99	; 153
 1ca:	49 e9       	ldi	r20, 0x99	; 153
 1cc:	5e e3       	ldi	r21, 0x3E	; 62
 1ce:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__gesf2>
 1d2:	18 16       	cp	r1, r24
 1d4:	4c f4       	brge	.+18     	; 0x1e8 <main+0x6c>
				motor_left(motor_forward,254);
 1d6:	6e ef       	ldi	r22, 0xFE	; 254
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 52 01 	call	0x2a4	; 0x2a4 <motor_left>
				motor_right(motor_forward,254);
 1de:	6e ef       	ldi	r22, 0xFE	; 254
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 1e 01 	call	0x23c	; 0x23c <motor_right>
 1e6:	d6 cf       	rjmp	.-84     	; 0x194 <main+0x18>
			}
			else if(us_distance < 0.30){
 1e8:	2a e9       	ldi	r18, 0x9A	; 154
 1ea:	39 e9       	ldi	r19, 0x99	; 153
 1ec:	49 e9       	ldi	r20, 0x99	; 153
 1ee:	5e e3       	ldi	r21, 0x3E	; 62
 1f0:	c7 01       	movw	r24, r14
 1f2:	b6 01       	movw	r22, r12
 1f4:	0e 94 9e 02 	call	0x53c	; 0x53c <__cmpsf2>
 1f8:	88 23       	and	r24, r24
 1fa:	64 f6       	brge	.-104    	; 0x194 <main+0x18>
				motor_left(motor_stop,0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 52 01 	call	0x2a4	; 0x2a4 <motor_left>
				motor_right(motor_stop,0);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 1e 01 	call	0x23c	; 0x23c <motor_right>
 20c:	c3 cf       	rjmp	.-122    	; 0x194 <main+0x18>
			}
		}
		else{
			motor_right(motor_backward,50);
 20e:	62 e3       	ldi	r22, 0x32	; 50
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 1e 01 	call	0x23c	; 0x23c <motor_right>
			motor_left(motor_backward,50);
 216:	62 e3       	ldi	r22, 0x32	; 50
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <motor_left>
 21e:	ba cf       	rjmp	.-140    	; 0x194 <main+0x18>

00000220 <init_timer1>:
#include "motors.h"

// PWM for speed control
void init_timer1()
{
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase Correct, 8-bit
 220:	e0 e8       	ldi	r30, 0x80	; 128
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//low level on OC1A/OC1B when up-counting
 22a:	80 81       	ld	r24, Z
 22c:	80 6a       	ori	r24, 0xA0	; 160
 22e:	80 83       	st	Z, r24
										//high level on OC1A/OC1B on Compare Match when downcounting
	TCCR1B |= (1<<CS12)|(1<<CS10);	//frequency=fcpu/1024 ~ 15Khz (motors operating frequency)
 230:	e1 e8       	ldi	r30, 0x81	; 129
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	85 60       	ori	r24, 0x05	; 5
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <motor_right>:
}

//motor right direction&speed control
void motor_right(uint8_t dir,uint8_t speed)
{
 23c:	cf 93       	push	r28
	//direction
	if(dir == motor_stop)
 23e:	81 11       	cpse	r24, r1
 240:	05 c0       	rjmp	.+10     	; 0x24c <motor_right+0x10>
	{
		PORTC &= 0 << PC4;
 242:	88 b1       	in	r24, 0x08	; 8
 244:	18 b8       	out	0x08, r1	; 8
		PORTC &= 0 << PC5;
 246:	88 b1       	in	r24, 0x08	; 8
 248:	18 b8       	out	0x08, r1	; 8
 24a:	0f c0       	rjmp	.+30     	; 0x26a <motor_right+0x2e>
	}
	else if(dir == motor_forward)
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	31 f4       	brne	.+12     	; 0x25c <motor_right+0x20>
	{
		PORTC &= 0 << PC4;
 250:	88 b1       	in	r24, 0x08	; 8
 252:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC5;
 254:	88 b1       	in	r24, 0x08	; 8
 256:	80 62       	ori	r24, 0x20	; 32
 258:	88 b9       	out	0x08, r24	; 8
 25a:	07 c0       	rjmp	.+14     	; 0x26a <motor_right+0x2e>
	}
	else if(dir == motor_backward)
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	29 f4       	brne	.+10     	; 0x26a <motor_right+0x2e>
	{
		PORTC &= 0 << PC5;
 260:	88 b1       	in	r24, 0x08	; 8
 262:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC4;
 264:	88 b1       	in	r24, 0x08	; 8
 266:	80 61       	ori	r24, 0x10	; 16
 268:	88 b9       	out	0x08, r24	; 8
	}

	//Speed
	uint8_t sreg = SREG;//Status Register
 26a:	cf b7       	in	r28, 0x3f	; 63

	cli();
 26c:	f8 94       	cli
	OCR1B = (uint8_t)(((float)(speed/255.0)*robo_speed));
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 46 03 	call	0x68c	; 0x68c <__floatsisf>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	4f e7       	ldi	r20, 0x7F	; 127
 27e:	53 e4       	ldi	r21, 0x43	; 67
 280:	0e 94 a3 02 	call	0x546	; 0x546 <__divsf3>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	4f e7       	ldi	r20, 0x7F	; 127
 28a:	53 e4       	ldi	r21, 0x43	; 67
 28c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__mulsf3>
 290:	0e 94 15 03 	call	0x62a	; 0x62a <__fixunssfsi>
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 29a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	SREG = sreg;
 29e:	cf bf       	out	0x3f, r28	; 63
}
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <motor_left>:

//motor left direction&speed control
void motor_left(uint8_t dir,uint8_t speed)
{
 2a4:	cf 93       	push	r28
	//Direction
	if(dir == motor_stop)
 2a6:	81 11       	cpse	r24, r1
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <motor_left+0x10>
	{
		PORTB &= 0 << PB3;
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	15 b8       	out	0x05, r1	; 5
		PORTB &= 0 << PB4;
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	15 b8       	out	0x05, r1	; 5
 2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <motor_left+0x2e>
	}
	else if(dir == motor_forward)
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <motor_left+0x20>
	{
		PORTB &= 0 << PB3;
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB4;
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	80 61       	ori	r24, 0x10	; 16
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <motor_left+0x2e>
	}
	else if(dir == motor_backward)
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	29 f4       	brne	.+10     	; 0x2d2 <motor_left+0x2e>
	{
		PORTB &= 0 << PB4;
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB3;
 2cc:	85 b1       	in	r24, 0x05	; 5
 2ce:	88 60       	ori	r24, 0x08	; 8
 2d0:	85 b9       	out	0x05, r24	; 5
	}

	//Speed
	uint8_t sreg = SREG;
 2d2:	cf b7       	in	r28, 0x3f	; 63
	
	cli();
 2d4:	f8 94       	cli
	OCR1A = (uint8_t)(((float)(speed/255.0)*robo_speed));
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 46 03 	call	0x68c	; 0x68c <__floatsisf>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	4f e7       	ldi	r20, 0x7F	; 127
 2e6:	53 e4       	ldi	r21, 0x43	; 67
 2e8:	0e 94 a3 02 	call	0x546	; 0x546 <__divsf3>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	4f e7       	ldi	r20, 0x7F	; 127
 2f2:	53 e4       	ldi	r21, 0x43	; 67
 2f4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__mulsf3>
 2f8:	0e 94 15 03 	call	0x62a	; 0x62a <__fixunssfsi>
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 302:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	SREG = sreg;
 306:	cf bf       	out	0x3f, r28	; 63
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void){
	//Ultrasonic sensor
	DDRB |= (1 << PB0);			//PB0 Enable output for trigger
 30c:	84 b1       	in	r24, 0x04	; 4
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	84 b9       	out	0x04, r24	; 4
	PORTB &= (0 << PB0);		//Clear Output
 312:	85 b1       	in	r24, 0x05	; 5
 314:	15 b8       	out	0x05, r1	; 5
	DDRD &= 0 << PD2;			//Input for echo on external interrupt
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PD1);		//Activate PullUp Resistor
 31a:	8b b1       	in	r24, 0x0b	; 11
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	8b b9       	out	0x0b, r24	; 11
	//Timer
	DDRB |= (1 << PB1);			//OC1A enable Output for Left Motor
 320:	84 b1       	in	r24, 0x04	; 4
 322:	82 60       	ori	r24, 0x02	; 2
 324:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2);			//OC1B enable Output for right motor
 326:	84 b1       	in	r24, 0x04	; 4
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	84 b9       	out	0x04, r24	; 4
	//Motor Direction
	DDRB |= (1 << PB3) | (1 << PB4);//Left motor
 32c:	84 b1       	in	r24, 0x04	; 4
 32e:	88 61       	ori	r24, 0x18	; 24
 330:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4) | (1 << PC5);//Right motor
 332:	87 b1       	in	r24, 0x07	; 7
 334:	80 63       	ori	r24, 0x30	; 48
 336:	87 b9       	out	0x07, r24	; 7
	//Power on indicator
	DDRB |= (1 << PB5);				//Power on led indicator
 338:	84 b1       	in	r24, 0x04	; 4
 33a:	80 62       	ori	r24, 0x20	; 32
 33c:	84 b9       	out	0x04, r24	; 4
 33e:	08 95       	ret

00000340 <__vector_16>:
volatile uint32_t timerCounter = 0;
volatile float distance = 0;

// timer overflow interrupt, each time when timer value passes 255 value
SIGNAL(TIMER0_OVF_vect)
{
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
	if (up) {       // voltage rise was detected previously
 354:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <up>
 358:	88 23       	and	r24, r24
 35a:	c1 f1       	breq	.+112    	; 0x3cc <__vector_16+0x8c>
		timerCounter++; //count the number of overflows
 35c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timerCounter>
 360:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timerCounter+0x1>
 364:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timerCounter+0x2>
 368:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timerCounter+0x3>
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	a1 1d       	adc	r26, r1
 370:	b1 1d       	adc	r27, r1
 372:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timerCounter>
 376:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timerCounter+0x1>
 37a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timerCounter+0x2>
 37e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timerCounter+0x3>
		// dont wait too long for the sonar end response, stop if time for measuring the distance exceeded limits
		uint32_t ticks = timerCounter * 256 + TCNT0;
 382:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timerCounter>
 386:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timerCounter+0x1>
 38a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timerCounter+0x2>
 38e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timerCounter+0x3>
 392:	ba 2f       	mov	r27, r26
 394:	a9 2f       	mov	r26, r25
 396:	98 2f       	mov	r25, r24
 398:	88 27       	eor	r24, r24
 39a:	26 b5       	in	r18, 0x26	; 38
 39c:	82 0f       	add	r24, r18
 39e:	91 1d       	adc	r25, r1
 3a0:	a1 1d       	adc	r26, r1
 3a2:	b1 1d       	adc	r27, r1
		uint32_t max_ticks = (uint32_t)MAX_RESP_TIME_MS * INSTR_PER_MS;
		if (ticks > max_ticks) {
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	95 43       	sbci	r25, 0x35	; 53
 3a8:	ac 40       	sbci	r26, 0x0C	; 12
 3aa:	b1 05       	cpc	r27, r1
 3ac:	78 f0       	brcs	.+30     	; 0x3cc <__vector_16+0x8c>
			up = 0;      // stop counting timer values
 3ae:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <up>
			running = 0; // ultrasound scan done
 3b2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <running>
			result = -1; // show that measurement failed with a timeout (could return max distance here if needed)
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	9f ef       	ldi	r25, 0xFF	; 255
 3ba:	dc 01       	movw	r26, r24
 3bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <result>
 3c0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <result+0x1>
 3c4:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <result+0x2>
 3c8:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <result+0x3>
		}
	}
}
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_1>:

// interrupt on INT0 pin, to detect high/low voltage changes
ISR(INT0_vect)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
	if (running) { //accept interrupts only when sonar was started
 402:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <running>
 406:	88 23       	and	r24, r24
 408:	b1 f1       	breq	.+108    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		if (up == 0) { // voltage rise, start time measurement
 40a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <up>
 40e:	81 11       	cpse	r24, r1
 410:	0d c0       	rjmp	.+26     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			up = 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <up>
			timerCounter = 0;
 418:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timerCounter>
 41c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timerCounter+0x1>
 420:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timerCounter+0x2>
 424:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timerCounter+0x3>
			TCNT0 = 0; // reset timer counter
 428:	16 bc       	out	0x26, r1	; 38
 42a:	25 c0       	rjmp	.+74     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			} else {
			// voltage drop, stop time measurement
			up = 0;
 42c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <up>
			//d = [ time_s * 340m/s ] / 2 = time_us/58
			result = (timerCounter * 256 + TCNT0) / 58;
 430:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timerCounter>
 434:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timerCounter+0x1>
 438:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timerCounter+0x2>
 43c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timerCounter+0x3>
 440:	ba 2f       	mov	r27, r26
 442:	a9 2f       	mov	r26, r25
 444:	98 2f       	mov	r25, r24
 446:	88 27       	eor	r24, r24
 448:	26 b5       	in	r18, 0x26	; 38
 44a:	bc 01       	movw	r22, r24
 44c:	cd 01       	movw	r24, r26
 44e:	62 0f       	add	r22, r18
 450:	71 1d       	adc	r23, r1
 452:	81 1d       	adc	r24, r1
 454:	91 1d       	adc	r25, r1
 456:	2a e3       	ldi	r18, 0x3A	; 58
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__udivmodsi4>
 462:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <result>
 466:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <result+0x1>
 46a:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <result+0x2>
 46e:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <result+0x3>
			running = 0;
 472:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <running>
		}
	}
}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <send_trigger>:

void send_trigger(void) {
	PORTB &= (0 << PB0); // clear to zero for 1 us
 498:	85 b1       	in	r24, 0x05	; 5
 49a:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	85 e1       	ldi	r24, 0x15	; 21
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <send_trigger+0x6>
 4a2:	00 00       	nop
	_delay_us(4);
	PORTB |= (1 << PB0); // set high for 10us
 4a4:	85 b1       	in	r24, 0x05	; 5
 4a6:	81 60       	ori	r24, 0x01	; 1
 4a8:	85 b9       	out	0x05, r24	; 5
	running = 1;  // sonar launched
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <running>
 4b0:	85 e3       	ldi	r24, 0x35	; 53
 4b2:	8a 95       	dec	r24
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <send_trigger+0x1a>
 4b6:	00 00       	nop
	_delay_us(10);
	PORTB &= (0 << PB0); // clear
 4b8:	85 b1       	in	r24, 0x05	; 5
 4ba:	15 b8       	out	0x05, r1	; 5
 4bc:	08 95       	ret

000004be <init_ext_int0>:
}
//Initialize external interrupt
void init_ext_int0(void)
{
	EICRA |= (1 << ISC00);	//Interrupt on any logical change(table 13-2 pag.80)
 4be:	e9 e6       	ldi	r30, 0x69	; 105
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);	//Enable INT0
 4c8:	8d b3       	in	r24, 0x1d	; 29
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	8d bb       	out	0x1d, r24	; 29
 4ce:	08 95       	ret

000004d0 <init_timer0>:
}

//Initialize timer to count up
void init_timer0(void)
{
	TCCR0B |= (1 << CS00);	//select internal clock with no prescaling
 4d0:	85 b5       	in	r24, 0x25	; 37
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;	//reset counter to zero
 4d6:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);	//enable timer interrupt
 4d8:	ee e6       	ldi	r30, 0x6E	; 110
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	81 60       	ori	r24, 0x01	; 1
 4e0:	80 83       	st	Z, r24
	sei(); // enable all(global) interrupts
 4e2:	78 94       	sei
 4e4:	08 95       	ret

000004e6 <example_sonar>:
}

void example_sonar(void){
	for (;;) {
		if (running == 0) { // launch only when next iteration can happen
 4e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <running>
 4ea:	81 11       	cpse	r24, r1
 4ec:	fc cf       	rjmp	.-8      	; 0x4e6 <example_sonar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ee:	2f ef       	ldi	r18, 0xFF	; 255
 4f0:	8d ee       	ldi	r24, 0xED	; 237
 4f2:	92 e0       	ldi	r25, 0x02	; 2
 4f4:	21 50       	subi	r18, 0x01	; 1
 4f6:	80 40       	sbci	r24, 0x00	; 0
 4f8:	90 40       	sbci	r25, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <example_sonar+0xe>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <example_sonar+0x18>
 4fe:	00 00       	nop
			// create a delay between tests, to compensate for old echoes
			_delay_ms(DELAY_BETWEEN_TESTS_MS);
			send_trigger();
 500:	0e 94 4c 02 	call	0x498	; 0x498 <send_trigger>
 504:	08 95       	ret

00000506 <get_distance>:
		}
	}
}

float get_distance(void){
	distance = result;
 506:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <result>
 50a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <result+0x1>
 50e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <result+0x2>
 512:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <result+0x3>
 516:	0e 94 46 03 	call	0x68c	; 0x68c <__floatsisf>
 51a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <distance>
 51e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <distance+0x1>
 522:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <distance+0x2>
 526:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <distance+0x3>
	return distance;
 52a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <distance>
 52e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <distance+0x1>
 532:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <distance+0x2>
 536:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <distance+0x3>
}
 53a:	08 95       	ret

0000053c <__cmpsf2>:
 53c:	0e 94 81 03 	call	0x702	; 0x702 <__fp_cmp>
 540:	08 f4       	brcc	.+2      	; 0x544 <__cmpsf2+0x8>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	08 95       	ret

00000546 <__divsf3>:
 546:	0e 94 b7 02 	call	0x56e	; 0x56e <__divsf3x>
 54a:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_round>
 54e:	0e 94 b5 03 	call	0x76a	; 0x76a <__fp_pscB>
 552:	58 f0       	brcs	.+22     	; 0x56a <__divsf3+0x24>
 554:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_pscA>
 558:	40 f0       	brcs	.+16     	; 0x56a <__divsf3+0x24>
 55a:	29 f4       	brne	.+10     	; 0x566 <__divsf3+0x20>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	29 f0       	breq	.+10     	; 0x56a <__divsf3+0x24>
 560:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 564:	51 11       	cpse	r21, r1
 566:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_szero>
 56a:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_nan>

0000056e <__divsf3x>:
 56e:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_split3>
 572:	68 f3       	brcs	.-38     	; 0x54e <__divsf3+0x8>

00000574 <__divsf3_pse>:
 574:	99 23       	and	r25, r25
 576:	b1 f3       	breq	.-20     	; 0x564 <__divsf3+0x1e>
 578:	55 23       	and	r21, r21
 57a:	91 f3       	breq	.-28     	; 0x560 <__divsf3+0x1a>
 57c:	95 1b       	sub	r25, r21
 57e:	55 0b       	sbc	r21, r21
 580:	bb 27       	eor	r27, r27
 582:	aa 27       	eor	r26, r26
 584:	62 17       	cp	r22, r18
 586:	73 07       	cpc	r23, r19
 588:	84 07       	cpc	r24, r20
 58a:	38 f0       	brcs	.+14     	; 0x59a <__divsf3_pse+0x26>
 58c:	9f 5f       	subi	r25, 0xFF	; 255
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	44 1f       	adc	r20, r20
 596:	aa 1f       	adc	r26, r26
 598:	a9 f3       	breq	.-22     	; 0x584 <__divsf3_pse+0x10>
 59a:	35 d0       	rcall	.+106    	; 0x606 <__divsf3_pse+0x92>
 59c:	0e 2e       	mov	r0, r30
 59e:	3a f0       	brmi	.+14     	; 0x5ae <__divsf3_pse+0x3a>
 5a0:	e0 e8       	ldi	r30, 0x80	; 128
 5a2:	32 d0       	rcall	.+100    	; 0x608 <__divsf3_pse+0x94>
 5a4:	91 50       	subi	r25, 0x01	; 1
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	e6 95       	lsr	r30
 5aa:	00 1c       	adc	r0, r0
 5ac:	ca f7       	brpl	.-14     	; 0x5a0 <__divsf3_pse+0x2c>
 5ae:	2b d0       	rcall	.+86     	; 0x606 <__divsf3_pse+0x92>
 5b0:	fe 2f       	mov	r31, r30
 5b2:	29 d0       	rcall	.+82     	; 0x606 <__divsf3_pse+0x92>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	bb 1f       	adc	r27, r27
 5bc:	26 17       	cp	r18, r22
 5be:	37 07       	cpc	r19, r23
 5c0:	48 07       	cpc	r20, r24
 5c2:	ab 07       	cpc	r26, r27
 5c4:	b0 e8       	ldi	r27, 0x80	; 128
 5c6:	09 f0       	breq	.+2      	; 0x5ca <__divsf3_pse+0x56>
 5c8:	bb 0b       	sbc	r27, r27
 5ca:	80 2d       	mov	r24, r0
 5cc:	bf 01       	movw	r22, r30
 5ce:	ff 27       	eor	r31, r31
 5d0:	93 58       	subi	r25, 0x83	; 131
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	3a f0       	brmi	.+14     	; 0x5e4 <__divsf3_pse+0x70>
 5d6:	9e 3f       	cpi	r25, 0xFE	; 254
 5d8:	51 05       	cpc	r21, r1
 5da:	78 f0       	brcs	.+30     	; 0x5fa <__divsf3_pse+0x86>
 5dc:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 5e0:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_szero>
 5e4:	5f 3f       	cpi	r21, 0xFF	; 255
 5e6:	e4 f3       	brlt	.-8      	; 0x5e0 <__divsf3_pse+0x6c>
 5e8:	98 3e       	cpi	r25, 0xE8	; 232
 5ea:	d4 f3       	brlt	.-12     	; 0x5e0 <__divsf3_pse+0x6c>
 5ec:	86 95       	lsr	r24
 5ee:	77 95       	ror	r23
 5f0:	67 95       	ror	r22
 5f2:	b7 95       	ror	r27
 5f4:	f7 95       	ror	r31
 5f6:	9f 5f       	subi	r25, 0xFF	; 255
 5f8:	c9 f7       	brne	.-14     	; 0x5ec <__divsf3_pse+0x78>
 5fa:	88 0f       	add	r24, r24
 5fc:	91 1d       	adc	r25, r1
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret
 606:	e1 e0       	ldi	r30, 0x01	; 1
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	bb 1f       	adc	r27, r27
 610:	62 17       	cp	r22, r18
 612:	73 07       	cpc	r23, r19
 614:	84 07       	cpc	r24, r20
 616:	ba 07       	cpc	r27, r26
 618:	20 f0       	brcs	.+8      	; 0x622 <__divsf3_pse+0xae>
 61a:	62 1b       	sub	r22, r18
 61c:	73 0b       	sbc	r23, r19
 61e:	84 0b       	sbc	r24, r20
 620:	ba 0b       	sbc	r27, r26
 622:	ee 1f       	adc	r30, r30
 624:	88 f7       	brcc	.-30     	; 0x608 <__divsf3_pse+0x94>
 626:	e0 95       	com	r30
 628:	08 95       	ret

0000062a <__fixunssfsi>:
 62a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fp_splitA>
 62e:	88 f0       	brcs	.+34     	; 0x652 <__fixunssfsi+0x28>
 630:	9f 57       	subi	r25, 0x7F	; 127
 632:	98 f0       	brcs	.+38     	; 0x65a <__fixunssfsi+0x30>
 634:	b9 2f       	mov	r27, r25
 636:	99 27       	eor	r25, r25
 638:	b7 51       	subi	r27, 0x17	; 23
 63a:	b0 f0       	brcs	.+44     	; 0x668 <__fixunssfsi+0x3e>
 63c:	e1 f0       	breq	.+56     	; 0x676 <__fixunssfsi+0x4c>
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	1a f0       	brmi	.+6      	; 0x64e <__fixunssfsi+0x24>
 648:	ba 95       	dec	r27
 64a:	c9 f7       	brne	.-14     	; 0x63e <__fixunssfsi+0x14>
 64c:	14 c0       	rjmp	.+40     	; 0x676 <__fixunssfsi+0x4c>
 64e:	b1 30       	cpi	r27, 0x01	; 1
 650:	91 f0       	breq	.+36     	; 0x676 <__fixunssfsi+0x4c>
 652:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_zero>
 656:	b1 e0       	ldi	r27, 0x01	; 1
 658:	08 95       	ret
 65a:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_zero>
 65e:	67 2f       	mov	r22, r23
 660:	78 2f       	mov	r23, r24
 662:	88 27       	eor	r24, r24
 664:	b8 5f       	subi	r27, 0xF8	; 248
 666:	39 f0       	breq	.+14     	; 0x676 <__fixunssfsi+0x4c>
 668:	b9 3f       	cpi	r27, 0xF9	; 249
 66a:	cc f3       	brlt	.-14     	; 0x65e <__fixunssfsi+0x34>
 66c:	86 95       	lsr	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b3 95       	inc	r27
 674:	d9 f7       	brne	.-10     	; 0x66c <__fixunssfsi+0x42>
 676:	3e f4       	brtc	.+14     	; 0x686 <__fixunssfsi+0x5c>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__floatunsisf>:
 688:	e8 94       	clt
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__floatsisf+0x12>

0000068c <__floatsisf>:
 68c:	97 fb       	bst	r25, 7
 68e:	3e f4       	brtc	.+14     	; 0x69e <__floatsisf+0x12>
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	99 23       	and	r25, r25
 6a0:	a9 f0       	breq	.+42     	; 0x6cc <__floatsisf+0x40>
 6a2:	f9 2f       	mov	r31, r25
 6a4:	96 e9       	ldi	r25, 0x96	; 150
 6a6:	bb 27       	eor	r27, r27
 6a8:	93 95       	inc	r25
 6aa:	f6 95       	lsr	r31
 6ac:	87 95       	ror	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b7 95       	ror	r27
 6b4:	f1 11       	cpse	r31, r1
 6b6:	f8 cf       	rjmp	.-16     	; 0x6a8 <__floatsisf+0x1c>
 6b8:	fa f4       	brpl	.+62     	; 0x6f8 <__floatsisf+0x6c>
 6ba:	bb 0f       	add	r27, r27
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__floatsisf+0x36>
 6be:	60 ff       	sbrs	r22, 0
 6c0:	1b c0       	rjmp	.+54     	; 0x6f8 <__floatsisf+0x6c>
 6c2:	6f 5f       	subi	r22, 0xFF	; 255
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	16 c0       	rjmp	.+44     	; 0x6f8 <__floatsisf+0x6c>
 6cc:	88 23       	and	r24, r24
 6ce:	11 f0       	breq	.+4      	; 0x6d4 <__floatsisf+0x48>
 6d0:	96 e9       	ldi	r25, 0x96	; 150
 6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <__floatsisf+0x6a>
 6d4:	77 23       	and	r23, r23
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <__floatsisf+0x54>
 6d8:	9e e8       	ldi	r25, 0x8E	; 142
 6da:	87 2f       	mov	r24, r23
 6dc:	76 2f       	mov	r23, r22
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <__floatsisf+0x5e>
 6e0:	66 23       	and	r22, r22
 6e2:	71 f0       	breq	.+28     	; 0x700 <__floatsisf+0x74>
 6e4:	96 e8       	ldi	r25, 0x86	; 134
 6e6:	86 2f       	mov	r24, r22
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	2a f0       	brmi	.+10     	; 0x6f8 <__floatsisf+0x6c>
 6ee:	9a 95       	dec	r25
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	da f7       	brpl	.-10     	; 0x6ee <__floatsisf+0x62>
 6f8:	88 0f       	add	r24, r24
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_cmp>:
 702:	99 0f       	add	r25, r25
 704:	00 08       	sbc	r0, r0
 706:	55 0f       	add	r21, r21
 708:	aa 0b       	sbc	r26, r26
 70a:	e0 e8       	ldi	r30, 0x80	; 128
 70c:	fe ef       	ldi	r31, 0xFE	; 254
 70e:	16 16       	cp	r1, r22
 710:	17 06       	cpc	r1, r23
 712:	e8 07       	cpc	r30, r24
 714:	f9 07       	cpc	r31, r25
 716:	c0 f0       	brcs	.+48     	; 0x748 <__fp_cmp+0x46>
 718:	12 16       	cp	r1, r18
 71a:	13 06       	cpc	r1, r19
 71c:	e4 07       	cpc	r30, r20
 71e:	f5 07       	cpc	r31, r21
 720:	98 f0       	brcs	.+38     	; 0x748 <__fp_cmp+0x46>
 722:	62 1b       	sub	r22, r18
 724:	73 0b       	sbc	r23, r19
 726:	84 0b       	sbc	r24, r20
 728:	95 0b       	sbc	r25, r21
 72a:	39 f4       	brne	.+14     	; 0x73a <__fp_cmp+0x38>
 72c:	0a 26       	eor	r0, r26
 72e:	61 f0       	breq	.+24     	; 0x748 <__fp_cmp+0x46>
 730:	23 2b       	or	r18, r19
 732:	24 2b       	or	r18, r20
 734:	25 2b       	or	r18, r21
 736:	21 f4       	brne	.+8      	; 0x740 <__fp_cmp+0x3e>
 738:	08 95       	ret
 73a:	0a 26       	eor	r0, r26
 73c:	09 f4       	brne	.+2      	; 0x740 <__fp_cmp+0x3e>
 73e:	a1 40       	sbci	r26, 0x01	; 1
 740:	a6 95       	lsr	r26
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	81 1d       	adc	r24, r1
 746:	81 1d       	adc	r24, r1
 748:	08 95       	ret

0000074a <__fp_inf>:
 74a:	97 f9       	bld	r25, 7
 74c:	9f 67       	ori	r25, 0x7F	; 127
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	08 95       	ret

00000756 <__fp_nan>:
 756:	9f ef       	ldi	r25, 0xFF	; 255
 758:	80 ec       	ldi	r24, 0xC0	; 192
 75a:	08 95       	ret

0000075c <__fp_pscA>:
 75c:	00 24       	eor	r0, r0
 75e:	0a 94       	dec	r0
 760:	16 16       	cp	r1, r22
 762:	17 06       	cpc	r1, r23
 764:	18 06       	cpc	r1, r24
 766:	09 06       	cpc	r0, r25
 768:	08 95       	ret

0000076a <__fp_pscB>:
 76a:	00 24       	eor	r0, r0
 76c:	0a 94       	dec	r0
 76e:	12 16       	cp	r1, r18
 770:	13 06       	cpc	r1, r19
 772:	14 06       	cpc	r1, r20
 774:	05 06       	cpc	r0, r21
 776:	08 95       	ret

00000778 <__fp_round>:
 778:	09 2e       	mov	r0, r25
 77a:	03 94       	inc	r0
 77c:	00 0c       	add	r0, r0
 77e:	11 f4       	brne	.+4      	; 0x784 <__fp_round+0xc>
 780:	88 23       	and	r24, r24
 782:	52 f0       	brmi	.+20     	; 0x798 <__fp_round+0x20>
 784:	bb 0f       	add	r27, r27
 786:	40 f4       	brcc	.+16     	; 0x798 <__fp_round+0x20>
 788:	bf 2b       	or	r27, r31
 78a:	11 f4       	brne	.+4      	; 0x790 <__fp_round+0x18>
 78c:	60 ff       	sbrs	r22, 0
 78e:	04 c0       	rjmp	.+8      	; 0x798 <__fp_round+0x20>
 790:	6f 5f       	subi	r22, 0xFF	; 255
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	08 95       	ret

0000079a <__fp_split3>:
 79a:	57 fd       	sbrc	r21, 7
 79c:	90 58       	subi	r25, 0x80	; 128
 79e:	44 0f       	add	r20, r20
 7a0:	55 1f       	adc	r21, r21
 7a2:	59 f0       	breq	.+22     	; 0x7ba <__fp_splitA+0x10>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	71 f0       	breq	.+28     	; 0x7c4 <__fp_splitA+0x1a>
 7a8:	47 95       	ror	r20

000007aa <__fp_splitA>:
 7aa:	88 0f       	add	r24, r24
 7ac:	97 fb       	bst	r25, 7
 7ae:	99 1f       	adc	r25, r25
 7b0:	61 f0       	breq	.+24     	; 0x7ca <__fp_splitA+0x20>
 7b2:	9f 3f       	cpi	r25, 0xFF	; 255
 7b4:	79 f0       	breq	.+30     	; 0x7d4 <__fp_splitA+0x2a>
 7b6:	87 95       	ror	r24
 7b8:	08 95       	ret
 7ba:	12 16       	cp	r1, r18
 7bc:	13 06       	cpc	r1, r19
 7be:	14 06       	cpc	r1, r20
 7c0:	55 1f       	adc	r21, r21
 7c2:	f2 cf       	rjmp	.-28     	; 0x7a8 <__fp_split3+0xe>
 7c4:	46 95       	lsr	r20
 7c6:	f1 df       	rcall	.-30     	; 0x7aa <__fp_splitA>
 7c8:	08 c0       	rjmp	.+16     	; 0x7da <__fp_splitA+0x30>
 7ca:	16 16       	cp	r1, r22
 7cc:	17 06       	cpc	r1, r23
 7ce:	18 06       	cpc	r1, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	f1 cf       	rjmp	.-30     	; 0x7b6 <__fp_splitA+0xc>
 7d4:	86 95       	lsr	r24
 7d6:	71 05       	cpc	r23, r1
 7d8:	61 05       	cpc	r22, r1
 7da:	08 94       	sec
 7dc:	08 95       	ret

000007de <__fp_zero>:
 7de:	e8 94       	clt

000007e0 <__fp_szero>:
 7e0:	bb 27       	eor	r27, r27
 7e2:	66 27       	eor	r22, r22
 7e4:	77 27       	eor	r23, r23
 7e6:	cb 01       	movw	r24, r22
 7e8:	97 f9       	bld	r25, 7
 7ea:	08 95       	ret

000007ec <__gesf2>:
 7ec:	0e 94 81 03 	call	0x702	; 0x702 <__fp_cmp>
 7f0:	08 f4       	brcc	.+2      	; 0x7f4 <__gesf2+0x8>
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <__mulsf3>:
 7f6:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3x>
 7fa:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_round>
 7fe:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_pscA>
 802:	38 f0       	brcs	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 804:	0e 94 b5 03 	call	0x76a	; 0x76a <__fp_pscB>
 808:	20 f0       	brcs	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80a:	95 23       	and	r25, r21
 80c:	11 f0       	breq	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 812:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_nan>
 816:	11 24       	eor	r1, r1
 818:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_szero>

0000081c <__mulsf3x>:
 81c:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_split3>
 820:	70 f3       	brcs	.-36     	; 0x7fe <__mulsf3+0x8>

00000822 <__mulsf3_pse>:
 822:	95 9f       	mul	r25, r21
 824:	c1 f3       	breq	.-16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 826:	95 0f       	add	r25, r21
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	55 1f       	adc	r21, r21
 82c:	62 9f       	mul	r22, r18
 82e:	f0 01       	movw	r30, r0
 830:	72 9f       	mul	r23, r18
 832:	bb 27       	eor	r27, r27
 834:	f0 0d       	add	r31, r0
 836:	b1 1d       	adc	r27, r1
 838:	63 9f       	mul	r22, r19
 83a:	aa 27       	eor	r26, r26
 83c:	f0 0d       	add	r31, r0
 83e:	b1 1d       	adc	r27, r1
 840:	aa 1f       	adc	r26, r26
 842:	64 9f       	mul	r22, r20
 844:	66 27       	eor	r22, r22
 846:	b0 0d       	add	r27, r0
 848:	a1 1d       	adc	r26, r1
 84a:	66 1f       	adc	r22, r22
 84c:	82 9f       	mul	r24, r18
 84e:	22 27       	eor	r18, r18
 850:	b0 0d       	add	r27, r0
 852:	a1 1d       	adc	r26, r1
 854:	62 1f       	adc	r22, r18
 856:	73 9f       	mul	r23, r19
 858:	b0 0d       	add	r27, r0
 85a:	a1 1d       	adc	r26, r1
 85c:	62 1f       	adc	r22, r18
 85e:	83 9f       	mul	r24, r19
 860:	a0 0d       	add	r26, r0
 862:	61 1d       	adc	r22, r1
 864:	22 1f       	adc	r18, r18
 866:	74 9f       	mul	r23, r20
 868:	33 27       	eor	r19, r19
 86a:	a0 0d       	add	r26, r0
 86c:	61 1d       	adc	r22, r1
 86e:	23 1f       	adc	r18, r19
 870:	84 9f       	mul	r24, r20
 872:	60 0d       	add	r22, r0
 874:	21 1d       	adc	r18, r1
 876:	82 2f       	mov	r24, r18
 878:	76 2f       	mov	r23, r22
 87a:	6a 2f       	mov	r22, r26
 87c:	11 24       	eor	r1, r1
 87e:	9f 57       	subi	r25, 0x7F	; 127
 880:	50 40       	sbci	r21, 0x00	; 0
 882:	9a f0       	brmi	.+38     	; 0x8aa <__mulsf3_pse+0x88>
 884:	f1 f0       	breq	.+60     	; 0x8c2 <__mulsf3_pse+0xa0>
 886:	88 23       	and	r24, r24
 888:	4a f0       	brmi	.+18     	; 0x89c <__mulsf3_pse+0x7a>
 88a:	ee 0f       	add	r30, r30
 88c:	ff 1f       	adc	r31, r31
 88e:	bb 1f       	adc	r27, r27
 890:	66 1f       	adc	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	91 50       	subi	r25, 0x01	; 1
 898:	50 40       	sbci	r21, 0x00	; 0
 89a:	a9 f7       	brne	.-22     	; 0x886 <__mulsf3_pse+0x64>
 89c:	9e 3f       	cpi	r25, 0xFE	; 254
 89e:	51 05       	cpc	r21, r1
 8a0:	80 f0       	brcs	.+32     	; 0x8c2 <__mulsf3_pse+0xa0>
 8a2:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 8a6:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_szero>
 8aa:	5f 3f       	cpi	r21, 0xFF	; 255
 8ac:	e4 f3       	brlt	.-8      	; 0x8a6 <__mulsf3_pse+0x84>
 8ae:	98 3e       	cpi	r25, 0xE8	; 232
 8b0:	d4 f3       	brlt	.-12     	; 0x8a6 <__mulsf3_pse+0x84>
 8b2:	86 95       	lsr	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	b7 95       	ror	r27
 8ba:	f7 95       	ror	r31
 8bc:	e7 95       	ror	r30
 8be:	9f 5f       	subi	r25, 0xFF	; 255
 8c0:	c1 f7       	brne	.-16     	; 0x8b2 <__mulsf3_pse+0x90>
 8c2:	fe 2b       	or	r31, r30
 8c4:	88 0f       	add	r24, r24
 8c6:	91 1d       	adc	r25, r1
 8c8:	96 95       	lsr	r25
 8ca:	87 95       	ror	r24
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__udivmodsi4>:
 8d0:	a1 e2       	ldi	r26, 0x21	; 33
 8d2:	1a 2e       	mov	r1, r26
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	fd 01       	movw	r30, r26
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__udivmodsi4_ep>

000008dc <__udivmodsi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	ee 1f       	adc	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	a2 17       	cp	r26, r18
 8e6:	b3 07       	cpc	r27, r19
 8e8:	e4 07       	cpc	r30, r20
 8ea:	f5 07       	cpc	r31, r21
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__udivmodsi4_ep>
 8ee:	a2 1b       	sub	r26, r18
 8f0:	b3 0b       	sbc	r27, r19
 8f2:	e4 0b       	sbc	r30, r20
 8f4:	f5 0b       	sbc	r31, r21

000008f6 <__udivmodsi4_ep>:
 8f6:	66 1f       	adc	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	1a 94       	dec	r1
 900:	69 f7       	brne	.-38     	; 0x8dc <__udivmodsi4_loop>
 902:	60 95       	com	r22
 904:	70 95       	com	r23
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	9b 01       	movw	r18, r22
 90c:	ac 01       	movw	r20, r24
 90e:	bd 01       	movw	r22, r26
 910:	cf 01       	movw	r24, r30
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
