
Kaai_ElTitan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  000008c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f51  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009df  00000000  00000000  0000246d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a9  00000000  00000000  000035c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003a6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  88:	0c 94 25 04 	jmp	0x84a	; 0x84a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
#include <avr/io.h>
#include "adc.h"

//Function To Initialize the ADC Module
void adc_init(){
	ADMUX=(1<<REFS0);	// For Aref=AVcc;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <read_adc>:
Argument: Channel Number between 0-7
Return Value : Between 0-1023
*/
uint16_t read_adc(uint8_t ch){
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  9e:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b01000000;
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	90 74       	andi	r25, 0x40	; 64
  a8:	90 83       	st	Z, r25
	ADMUX|=ch;
  aa:	90 81       	ld	r25, Z
  ac:	89 2b       	or	r24, r25
  ae:	80 83       	st	Z, r24
	
	//10-bit result left justified (ADCH bit9-2, ADCL bit1-0)
	ADMUX |= 1<<ADLAR;
  b0:	80 81       	ld	r24, Z
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	80 83       	st	Z, r24

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c4:	84 ff       	sbrs	r24, 4
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <read_adc+0x22>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	80 83       	st	Z, r24

	uint8_t LowPart = ADCL;	//10-bit resolution
  d2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH << 2 | LowPart >> 6; //10-bit resolution
  d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	22 95       	swap	r18
  e6:	26 95       	lsr	r18
  e8:	26 95       	lsr	r18
  ea:	23 70       	andi	r18, 0x03	; 3

	return TenBitResult;
  ec:	82 2b       	or	r24, r18
  ee:	08 95       	ret

000000f0 <read_rightSensor>:
uint16_t ir_sensor1, ir_sensor4; // using two ir_sensors to detect border line
uint8_t sensor1, sensor4;		 // where sensor1 is the right side sensor & sensor4 is the left side sensor
								 // from H bridge side view
int read_rightSensor(void){
	
	ir_sensor1 = read_adc(SENSOR1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
  f6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ir_sensor1+0x1>
  fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ir_sensor1>
	if (ir_sensor1 > SENSOR_THRESH){
  fe:	89 39       	cpi	r24, 0x99	; 153
 100:	23 e0       	ldi	r18, 0x03	; 3
 102:	92 07       	cpc	r25, r18
 104:	18 f0       	brcs	.+6      	; 0x10c <read_rightSensor+0x1c>
		sensor1 = 0;
 106:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sensor1>
 10a:	06 c0       	rjmp	.+12     	; 0x118 <read_rightSensor+0x28>
	}
	else if(ir_sensor1 < SENSOR_THRESH){
 10c:	88 39       	cpi	r24, 0x98	; 152
 10e:	93 40       	sbci	r25, 0x03	; 3
 110:	18 f4       	brcc	.+6      	; 0x118 <read_rightSensor+0x28>
		sensor1 = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sensor1>
	}
	return sensor1;
 118:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sensor1>

}
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <read_leftSensor>:

int read_leftSensor(void){
	ir_sensor4 = read_adc(SENSOR4);
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
 126:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <ir_sensor4+0x1>
 12a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <ir_sensor4>
	if (ir_sensor4 > SENSOR_THRESH){
 12e:	89 39       	cpi	r24, 0x99	; 153
 130:	23 e0       	ldi	r18, 0x03	; 3
 132:	92 07       	cpc	r25, r18
 134:	18 f0       	brcs	.+6      	; 0x13c <read_leftSensor+0x1c>
		sensor4 = 0;
 136:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <sensor4>
 13a:	06 c0       	rjmp	.+12     	; 0x148 <read_leftSensor+0x28>
	}
	else if(ir_sensor4 < SENSOR_THRESH){
 13c:	88 39       	cpi	r24, 0x98	; 152
 13e:	93 40       	sbci	r25, 0x03	; 3
 140:	18 f4       	brcc	.+6      	; 0x148 <read_leftSensor+0x28>
		sensor4 = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sensor4>
	}
	return sensor4;
 148:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sensor4>
}
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <power_on>:
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<4;i++){
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	0f c0       	rjmp	.+30     	; 0x174 <power_on+0x24>
		PORTB ^= 1 << PB5;
 156:	95 b1       	in	r25, 0x05	; 5
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	89 27       	eor	r24, r25
 15c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	4f ef       	ldi	r20, 0xFF	; 255
 160:	89 e6       	ldi	r24, 0x69	; 105
 162:	98 e1       	ldi	r25, 0x18	; 24
 164:	41 50       	subi	r20, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <power_on+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <power_on+0x1e>
 16e:	00 00       	nop
#include "us_sensor.h"


void power_on(void){
	int i;
	for(i=0;i<4;i++){
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	24 30       	cpi	r18, 0x04	; 4
 176:	31 05       	cpc	r19, r1
 178:	74 f3       	brlt	.-36     	; 0x156 <power_on+0x6>
		PORTB ^= 1 << PB5;
		_delay_ms(500);
	}
}
 17a:	08 95       	ret

0000017c <led_on>:

void led_on(void){
	PORTB |= 1 << PB5;
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	85 b9       	out	0x05, r24	; 5
 182:	08 95       	ret

00000184 <main>:
#include "ir_sensor.h"
#include "adc.h"

int main(){
	
	init_ports();
 184:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <init_ports>
	power_on();
 188:	0e 94 a8 00 	call	0x150	; 0x150 <power_on>
	init_timer1();
 18c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_timer1>
	adc_init();
 190:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	
	while(1){
		led_on();
 194:	0e 94 be 00 	call	0x17c	; 0x17c <led_on>
		if(read_rightSensor() == 1 || read_leftSensor() == 1){
 198:	0e 94 78 00 	call	0xf0	; 0xf0 <read_rightSensor>
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	21 f0       	breq	.+8      	; 0x1a8 <main+0x24>
 1a0:	0e 94 90 00 	call	0x120	; 0x120 <read_leftSensor>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	49 f4       	brne	.+18     	; 0x1ba <main+0x36>
			motor_right(motor_forward,50);
 1a8:	62 e3       	ldi	r22, 0x32	; 50
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <motor_right>
			motor_left(motor_forward,50);
 1b0:	62 e3       	ldi	r22, 0x32	; 50
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 28 01 	call	0x250	; 0x250 <motor_left>
 1b8:	ed cf       	rjmp	.-38     	; 0x194 <main+0x10>
		}
		else{
			motor_right(motor_backward,50);
 1ba:	62 e3       	ldi	r22, 0x32	; 50
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <motor_right>
			motor_left(motor_backward,50);
 1c2:	62 e3       	ldi	r22, 0x32	; 50
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 28 01 	call	0x250	; 0x250 <motor_left>
 1ca:	e4 cf       	rjmp	.-56     	; 0x194 <main+0x10>

000001cc <init_timer1>:
#include "motors.h"

// PWM for speed control
void init_timer1()
{
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase Correct, 8-bit
 1cc:	e0 e8       	ldi	r30, 0x80	; 128
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//low level on OC1A/OC1B when up-counting
 1d6:	80 81       	ld	r24, Z
 1d8:	80 6a       	ori	r24, 0xA0	; 160
 1da:	80 83       	st	Z, r24
										//high level on OC1A/OC1B on Compare Match when downcounting
	TCCR1B |= (1<<CS12)|(1<<CS10);	//frequency=fcpu/1024 ~ 15Khz (motors operating frequency)
 1dc:	e1 e8       	ldi	r30, 0x81	; 129
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	85 60       	ori	r24, 0x05	; 5
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <motor_right>:
}

//motor right direction&speed control
void motor_right(uint8_t dir,uint8_t speed)
{
 1e8:	cf 93       	push	r28
	//direction
	if(dir == motor_stop)
 1ea:	81 11       	cpse	r24, r1
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <motor_right+0x10>
	{
		PORTC &= 0 << PC4;
 1ee:	88 b1       	in	r24, 0x08	; 8
 1f0:	18 b8       	out	0x08, r1	; 8
		PORTC &= 0 << PC5;
 1f2:	88 b1       	in	r24, 0x08	; 8
 1f4:	18 b8       	out	0x08, r1	; 8
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <motor_right+0x2e>
	}
	else if(dir == motor_forward)
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	31 f4       	brne	.+12     	; 0x208 <motor_right+0x20>
	{
		PORTC &= 0 << PC4;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC5;
 200:	88 b1       	in	r24, 0x08	; 8
 202:	80 62       	ori	r24, 0x20	; 32
 204:	88 b9       	out	0x08, r24	; 8
 206:	07 c0       	rjmp	.+14     	; 0x216 <motor_right+0x2e>
	}
	else if(dir == motor_backward)
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	29 f4       	brne	.+10     	; 0x216 <motor_right+0x2e>
	{
		PORTC &= 0 << PC5;
 20c:	88 b1       	in	r24, 0x08	; 8
 20e:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC4;
 210:	88 b1       	in	r24, 0x08	; 8
 212:	80 61       	ori	r24, 0x10	; 16
 214:	88 b9       	out	0x08, r24	; 8
	}

	//Speed
	uint8_t sreg = SREG;//Status Register
 216:	cf b7       	in	r28, 0x3f	; 63

	cli();
 218:	f8 94       	cli
	OCR1B = (uint8_t)(((float)(speed/255.0)*robo_speed));
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__floatsisf>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	4f e7       	ldi	r20, 0x7F	; 127
 22a:	53 e4       	ldi	r21, 0x43	; 67
 22c:	0e 94 48 02 	call	0x490	; 0x490 <__divsf3>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	4f e7       	ldi	r20, 0x7F	; 127
 236:	53 e4       	ldi	r21, 0x43	; 67
 238:	0e 94 77 03 	call	0x6ee	; 0x6ee <__mulsf3>
 23c:	0e 94 ba 02 	call	0x574	; 0x574 <__fixunssfsi>
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 246:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	SREG = sreg;
 24a:	cf bf       	out	0x3f, r28	; 63
}
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <motor_left>:

//motor left direction&speed control
void motor_left(uint8_t dir,uint8_t speed)
{
 250:	cf 93       	push	r28
	//Direction
	if(dir == motor_stop)
 252:	81 11       	cpse	r24, r1
 254:	05 c0       	rjmp	.+10     	; 0x260 <motor_left+0x10>
	{
		PORTB &= 0 << PB3;
 256:	85 b1       	in	r24, 0x05	; 5
 258:	15 b8       	out	0x05, r1	; 5
		PORTB &= 0 << PB4;
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	15 b8       	out	0x05, r1	; 5
 25e:	0f c0       	rjmp	.+30     	; 0x27e <motor_left+0x2e>
	}
	else if(dir == motor_forward)
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	31 f4       	brne	.+12     	; 0x270 <motor_left+0x20>
	{
		PORTB &= 0 << PB3;
 264:	85 b1       	in	r24, 0x05	; 5
 266:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB4;
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	07 c0       	rjmp	.+14     	; 0x27e <motor_left+0x2e>
	}
	else if(dir == motor_backward)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	29 f4       	brne	.+10     	; 0x27e <motor_left+0x2e>
	{
		PORTB &= 0 << PB4;
 274:	85 b1       	in	r24, 0x05	; 5
 276:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB3;
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	85 b9       	out	0x05, r24	; 5
	}

	//Speed
	uint8_t sreg = SREG;
 27e:	cf b7       	in	r28, 0x3f	; 63
	
	cli();
 280:	f8 94       	cli
	OCR1A = (uint8_t)(((float)(speed/255.0)*robo_speed));
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__floatsisf>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	4f e7       	ldi	r20, 0x7F	; 127
 292:	53 e4       	ldi	r21, 0x43	; 67
 294:	0e 94 48 02 	call	0x490	; 0x490 <__divsf3>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4f e7       	ldi	r20, 0x7F	; 127
 29e:	53 e4       	ldi	r21, 0x43	; 67
 2a0:	0e 94 77 03 	call	0x6ee	; 0x6ee <__mulsf3>
 2a4:	0e 94 ba 02 	call	0x574	; 0x574 <__fixunssfsi>
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2ae:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	SREG = sreg;
 2b2:	cf bf       	out	0x3f, r28	; 63
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void){
	//Ultrasonic sensor
	DDRB |= (1 << PB0);			//PB0 Enable output for trigger
 2b8:	84 b1       	in	r24, 0x04	; 4
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	84 b9       	out	0x04, r24	; 4
	PORTB &= (0 << PB0);		//Clear Output
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	15 b8       	out	0x05, r1	; 5
	DDRD &= 0 << PD2;			//Input for echo on external interrupt
 2c2:	8a b1       	in	r24, 0x0a	; 10
 2c4:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PD1);		//Activate PullUp Resistor
 2c6:	8b b1       	in	r24, 0x0b	; 11
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	8b b9       	out	0x0b, r24	; 11
	//Timer
	DDRB |= (1 << PB1);			//OC1A enable Output for Left Motor
 2cc:	84 b1       	in	r24, 0x04	; 4
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2);			//OC1B enable Output for right motor
 2d2:	84 b1       	in	r24, 0x04	; 4
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	84 b9       	out	0x04, r24	; 4
	//Motor Direction
	DDRB |= (1 << PB3) | (1 << PB4);//Left motor
 2d8:	84 b1       	in	r24, 0x04	; 4
 2da:	88 61       	ori	r24, 0x18	; 24
 2dc:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4) | (1 << PC5);//Right motor
 2de:	87 b1       	in	r24, 0x07	; 7
 2e0:	80 63       	ori	r24, 0x30	; 48
 2e2:	87 b9       	out	0x07, r24	; 7
	//Power on indicator
	DDRB |= (1 << PB5);				//Power on led indicator
 2e4:	84 b1       	in	r24, 0x04	; 4
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	84 b9       	out	0x04, r24	; 4
 2ea:	08 95       	ret

000002ec <__vector_16>:
volatile uint32_t timerCounter = 0;
volatile int us_presence = 0;
volatile float distance = 0;

//timer overflow interrupt, each time when timer value passes 255 value
SIGNAL(TIMER0_OVF_vect){
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
	if(up){				//voltage rise was detected previously
 300:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <up>
 304:	88 23       	and	r24, r24
 306:	c1 f1       	breq	.+112    	; 0x378 <__vector_16+0x8c>
		timerCounter++;		//count the number of overflows
 308:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerCounter>
 30c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerCounter+0x1>
 310:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerCounter+0x2>
 314:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerCounter+0x3>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	a1 1d       	adc	r26, r1
 31c:	b1 1d       	adc	r27, r1
 31e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timerCounter>
 322:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timerCounter+0x1>
 326:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timerCounter+0x2>
 32a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timerCounter+0x3>
		//don t wait too long for the sonar end response, stop if time for measuring the distance exceed the limits
		uint32_t ticks = timerCounter*256+TCNT0;
 32e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerCounter>
 332:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerCounter+0x1>
 336:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerCounter+0x2>
 33a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerCounter+0x3>
 33e:	ba 2f       	mov	r27, r26
 340:	a9 2f       	mov	r26, r25
 342:	98 2f       	mov	r25, r24
 344:	88 27       	eor	r24, r24
 346:	26 b5       	in	r18, 0x26	; 38
 348:	82 0f       	add	r24, r18
 34a:	91 1d       	adc	r25, r1
 34c:	a1 1d       	adc	r26, r1
 34e:	b1 1d       	adc	r27, r1
		uint32_t max_ticks = (uint32_t)MAX_RESP_TIME_MS*INSTR_PER_MS;
		if(ticks>max_ticks){
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	95 43       	sbci	r25, 0x35	; 53
 354:	ac 40       	sbci	r26, 0x0C	; 12
 356:	b1 05       	cpc	r27, r1
 358:	78 f0       	brcs	.+30     	; 0x378 <__vector_16+0x8c>
			up=0;			//stop counting timer values
 35a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <up>
			running=0;		//ultrasound scan done
 35e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <running>
			result = -1;	//show that measurement failed with a timeout (could return max distance here if needed)
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	9f ef       	ldi	r25, 0xFF	; 255
 366:	dc 01       	movw	r26, r24
 368:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <result>
 36c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <result+0x1>
 370:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <result+0x2>
 374:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <result+0x3>
		}
		
	}
}
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_1>:

//interrupt on INT0 pin, to detect high/low voltage changes
ISR(INT0_vect){
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	if (running){		//accept interrupts only when sonar was started
 3b6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <running>
 3ba:	88 23       	and	r24, r24
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <__vector_1+0x34>
 3be:	53 c0       	rjmp	.+166    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		if(up==0){		//voltage rise, start time measurement 
 3c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <up>
 3c4:	81 11       	cpse	r24, r1
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <__vector_1+0x56>
			up=1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <up>
			timerCounter=0;
 3ce:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timerCounter>
 3d2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timerCounter+0x1>
 3d6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timerCounter+0x2>
 3da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timerCounter+0x3>
			TCNT0=0;	//reset timer counter
 3de:	16 bc       	out	0x26, r1	; 38
 3e0:	42 c0       	rjmp	.+132    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		}
		else{
			//voltage drop, stop time measurement
			up=0;
 3e2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <up>
			//d = [time_s*340m/s]/2=time_us/58
			result =(timerCounter*256+TCNT0)/58;
 3e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerCounter>
 3ea:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerCounter+0x1>
 3ee:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerCounter+0x2>
 3f2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerCounter+0x3>
 3f6:	ba 2f       	mov	r27, r26
 3f8:	a9 2f       	mov	r26, r25
 3fa:	98 2f       	mov	r25, r24
 3fc:	88 27       	eor	r24, r24
 3fe:	26 b5       	in	r18, 0x26	; 38
 400:	bc 01       	movw	r22, r24
 402:	cd 01       	movw	r24, r26
 404:	62 0f       	add	r22, r18
 406:	71 1d       	adc	r23, r1
 408:	81 1d       	adc	r24, r1
 40a:	91 1d       	adc	r25, r1
 40c:	0f 2e       	mov	r0, r31
 40e:	fa e3       	ldi	r31, 0x3A	; 58
 410:	cf 2e       	mov	r12, r31
 412:	d1 2c       	mov	r13, r1
 414:	e1 2c       	mov	r14, r1
 416:	f1 2c       	mov	r15, r1
 418:	f0 2d       	mov	r31, r0
 41a:	a7 01       	movw	r20, r14
 41c:	96 01       	movw	r18, r12
 41e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodsi4>
 422:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <result>
 426:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <result+0x1>
 42a:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <result+0x2>
 42e:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <result+0x3>
			distance = result/58;
 432:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <result>
 436:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <result+0x1>
 43a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <result+0x2>
 43e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <result+0x3>
 442:	a7 01       	movw	r20, r14
 444:	96 01       	movw	r18, r12
 446:	0e 94 06 04 	call	0x80c	; 0x80c <__divmodsi4>
 44a:	ca 01       	movw	r24, r20
 44c:	b9 01       	movw	r22, r18
 44e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__floatsisf>
 452:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 456:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 45a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 45e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			running=0;
 462:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <running>
		}
	}
}
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	bf 91       	pop	r27
 46c:	af 91       	pop	r26
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	7f 91       	pop	r23
 474:	6f 91       	pop	r22
 476:	5f 91       	pop	r21
 478:	4f 91       	pop	r20
 47a:	3f 91       	pop	r19
 47c:	2f 91       	pop	r18
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <__divsf3>:
 490:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__divsf3x>
 494:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_round>
 498:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_pscB>
 49c:	58 f0       	brcs	.+22     	; 0x4b4 <__divsf3+0x24>
 49e:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscA>
 4a2:	40 f0       	brcs	.+16     	; 0x4b4 <__divsf3+0x24>
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <__divsf3+0x20>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <__divsf3+0x24>
 4aa:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 4ae:	51 11       	cpse	r21, r1
 4b0:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 4b4:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_nan>

000004b8 <__divsf3x>:
 4b8:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_split3>
 4bc:	68 f3       	brcs	.-38     	; 0x498 <__divsf3+0x8>

000004be <__divsf3_pse>:
 4be:	99 23       	and	r25, r25
 4c0:	b1 f3       	breq	.-20     	; 0x4ae <__divsf3+0x1e>
 4c2:	55 23       	and	r21, r21
 4c4:	91 f3       	breq	.-28     	; 0x4aa <__divsf3+0x1a>
 4c6:	95 1b       	sub	r25, r21
 4c8:	55 0b       	sbc	r21, r21
 4ca:	bb 27       	eor	r27, r27
 4cc:	aa 27       	eor	r26, r26
 4ce:	62 17       	cp	r22, r18
 4d0:	73 07       	cpc	r23, r19
 4d2:	84 07       	cpc	r24, r20
 4d4:	38 f0       	brcs	.+14     	; 0x4e4 <__divsf3_pse+0x26>
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	44 1f       	adc	r20, r20
 4e0:	aa 1f       	adc	r26, r26
 4e2:	a9 f3       	breq	.-22     	; 0x4ce <__divsf3_pse+0x10>
 4e4:	35 d0       	rcall	.+106    	; 0x550 <__divsf3_pse+0x92>
 4e6:	0e 2e       	mov	r0, r30
 4e8:	3a f0       	brmi	.+14     	; 0x4f8 <__divsf3_pse+0x3a>
 4ea:	e0 e8       	ldi	r30, 0x80	; 128
 4ec:	32 d0       	rcall	.+100    	; 0x552 <__divsf3_pse+0x94>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	50 40       	sbci	r21, 0x00	; 0
 4f2:	e6 95       	lsr	r30
 4f4:	00 1c       	adc	r0, r0
 4f6:	ca f7       	brpl	.-14     	; 0x4ea <__divsf3_pse+0x2c>
 4f8:	2b d0       	rcall	.+86     	; 0x550 <__divsf3_pse+0x92>
 4fa:	fe 2f       	mov	r31, r30
 4fc:	29 d0       	rcall	.+82     	; 0x550 <__divsf3_pse+0x92>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	bb 1f       	adc	r27, r27
 506:	26 17       	cp	r18, r22
 508:	37 07       	cpc	r19, r23
 50a:	48 07       	cpc	r20, r24
 50c:	ab 07       	cpc	r26, r27
 50e:	b0 e8       	ldi	r27, 0x80	; 128
 510:	09 f0       	breq	.+2      	; 0x514 <__divsf3_pse+0x56>
 512:	bb 0b       	sbc	r27, r27
 514:	80 2d       	mov	r24, r0
 516:	bf 01       	movw	r22, r30
 518:	ff 27       	eor	r31, r31
 51a:	93 58       	subi	r25, 0x83	; 131
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	3a f0       	brmi	.+14     	; 0x52e <__divsf3_pse+0x70>
 520:	9e 3f       	cpi	r25, 0xFE	; 254
 522:	51 05       	cpc	r21, r1
 524:	78 f0       	brcs	.+30     	; 0x544 <__divsf3_pse+0x86>
 526:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 52a:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	e4 f3       	brlt	.-8      	; 0x52a <__divsf3_pse+0x6c>
 532:	98 3e       	cpi	r25, 0xE8	; 232
 534:	d4 f3       	brlt	.-12     	; 0x52a <__divsf3_pse+0x6c>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b7 95       	ror	r27
 53e:	f7 95       	ror	r31
 540:	9f 5f       	subi	r25, 0xFF	; 255
 542:	c9 f7       	brne	.-14     	; 0x536 <__divsf3_pse+0x78>
 544:	88 0f       	add	r24, r24
 546:	91 1d       	adc	r25, r1
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret
 550:	e1 e0       	ldi	r30, 0x01	; 1
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	bb 1f       	adc	r27, r27
 55a:	62 17       	cp	r22, r18
 55c:	73 07       	cpc	r23, r19
 55e:	84 07       	cpc	r24, r20
 560:	ba 07       	cpc	r27, r26
 562:	20 f0       	brcs	.+8      	; 0x56c <__divsf3_pse+0xae>
 564:	62 1b       	sub	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	ba 0b       	sbc	r27, r26
 56c:	ee 1f       	adc	r30, r30
 56e:	88 f7       	brcc	.-30     	; 0x552 <__divsf3_pse+0x94>
 570:	e0 95       	com	r30
 572:	08 95       	ret

00000574 <__fixunssfsi>:
 574:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_splitA>
 578:	88 f0       	brcs	.+34     	; 0x59c <__fixunssfsi+0x28>
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	98 f0       	brcs	.+38     	; 0x5a4 <__fixunssfsi+0x30>
 57e:	b9 2f       	mov	r27, r25
 580:	99 27       	eor	r25, r25
 582:	b7 51       	subi	r27, 0x17	; 23
 584:	b0 f0       	brcs	.+44     	; 0x5b2 <__fixunssfsi+0x3e>
 586:	e1 f0       	breq	.+56     	; 0x5c0 <__fixunssfsi+0x4c>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	1a f0       	brmi	.+6      	; 0x598 <__fixunssfsi+0x24>
 592:	ba 95       	dec	r27
 594:	c9 f7       	brne	.-14     	; 0x588 <__fixunssfsi+0x14>
 596:	14 c0       	rjmp	.+40     	; 0x5c0 <__fixunssfsi+0x4c>
 598:	b1 30       	cpi	r27, 0x01	; 1
 59a:	91 f0       	breq	.+36     	; 0x5c0 <__fixunssfsi+0x4c>
 59c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_zero>
 5a0:	b1 e0       	ldi	r27, 0x01	; 1
 5a2:	08 95       	ret
 5a4:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_zero>
 5a8:	67 2f       	mov	r22, r23
 5aa:	78 2f       	mov	r23, r24
 5ac:	88 27       	eor	r24, r24
 5ae:	b8 5f       	subi	r27, 0xF8	; 248
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <__fixunssfsi+0x4c>
 5b2:	b9 3f       	cpi	r27, 0xF9	; 249
 5b4:	cc f3       	brlt	.-14     	; 0x5a8 <__fixunssfsi+0x34>
 5b6:	86 95       	lsr	r24
 5b8:	77 95       	ror	r23
 5ba:	67 95       	ror	r22
 5bc:	b3 95       	inc	r27
 5be:	d9 f7       	brne	.-10     	; 0x5b6 <__fixunssfsi+0x42>
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__fixunssfsi+0x5c>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <__floatunsisf>:
 5d2:	e8 94       	clt
 5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <__floatsisf+0x12>

000005d6 <__floatsisf>:
 5d6:	97 fb       	bst	r25, 7
 5d8:	3e f4       	brtc	.+14     	; 0x5e8 <__floatsisf+0x12>
 5da:	90 95       	com	r25
 5dc:	80 95       	com	r24
 5de:	70 95       	com	r23
 5e0:	61 95       	neg	r22
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	99 23       	and	r25, r25
 5ea:	a9 f0       	breq	.+42     	; 0x616 <__floatsisf+0x40>
 5ec:	f9 2f       	mov	r31, r25
 5ee:	96 e9       	ldi	r25, 0x96	; 150
 5f0:	bb 27       	eor	r27, r27
 5f2:	93 95       	inc	r25
 5f4:	f6 95       	lsr	r31
 5f6:	87 95       	ror	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f1 11       	cpse	r31, r1
 600:	f8 cf       	rjmp	.-16     	; 0x5f2 <__floatsisf+0x1c>
 602:	fa f4       	brpl	.+62     	; 0x642 <__floatsisf+0x6c>
 604:	bb 0f       	add	r27, r27
 606:	11 f4       	brne	.+4      	; 0x60c <__floatsisf+0x36>
 608:	60 ff       	sbrs	r22, 0
 60a:	1b c0       	rjmp	.+54     	; 0x642 <__floatsisf+0x6c>
 60c:	6f 5f       	subi	r22, 0xFF	; 255
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	16 c0       	rjmp	.+44     	; 0x642 <__floatsisf+0x6c>
 616:	88 23       	and	r24, r24
 618:	11 f0       	breq	.+4      	; 0x61e <__floatsisf+0x48>
 61a:	96 e9       	ldi	r25, 0x96	; 150
 61c:	11 c0       	rjmp	.+34     	; 0x640 <__floatsisf+0x6a>
 61e:	77 23       	and	r23, r23
 620:	21 f0       	breq	.+8      	; 0x62a <__floatsisf+0x54>
 622:	9e e8       	ldi	r25, 0x8E	; 142
 624:	87 2f       	mov	r24, r23
 626:	76 2f       	mov	r23, r22
 628:	05 c0       	rjmp	.+10     	; 0x634 <__floatsisf+0x5e>
 62a:	66 23       	and	r22, r22
 62c:	71 f0       	breq	.+28     	; 0x64a <__floatsisf+0x74>
 62e:	96 e8       	ldi	r25, 0x86	; 134
 630:	86 2f       	mov	r24, r22
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	2a f0       	brmi	.+10     	; 0x642 <__floatsisf+0x6c>
 638:	9a 95       	dec	r25
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	da f7       	brpl	.-10     	; 0x638 <__floatsisf+0x62>
 642:	88 0f       	add	r24, r24
 644:	96 95       	lsr	r25
 646:	87 95       	ror	r24
 648:	97 f9       	bld	r25, 7
 64a:	08 95       	ret

0000064c <__fp_inf>:
 64c:	97 f9       	bld	r25, 7
 64e:	9f 67       	ori	r25, 0x7F	; 127
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	08 95       	ret

00000658 <__fp_nan>:
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	80 ec       	ldi	r24, 0xC0	; 192
 65c:	08 95       	ret

0000065e <__fp_pscA>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	09 06       	cpc	r0, r25
 66a:	08 95       	ret

0000066c <__fp_pscB>:
 66c:	00 24       	eor	r0, r0
 66e:	0a 94       	dec	r0
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	14 06       	cpc	r1, r20
 676:	05 06       	cpc	r0, r21
 678:	08 95       	ret

0000067a <__fp_round>:
 67a:	09 2e       	mov	r0, r25
 67c:	03 94       	inc	r0
 67e:	00 0c       	add	r0, r0
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_round+0xc>
 682:	88 23       	and	r24, r24
 684:	52 f0       	brmi	.+20     	; 0x69a <__fp_round+0x20>
 686:	bb 0f       	add	r27, r27
 688:	40 f4       	brcc	.+16     	; 0x69a <__fp_round+0x20>
 68a:	bf 2b       	or	r27, r31
 68c:	11 f4       	brne	.+4      	; 0x692 <__fp_round+0x18>
 68e:	60 ff       	sbrs	r22, 0
 690:	04 c0       	rjmp	.+8      	; 0x69a <__fp_round+0x20>
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	08 95       	ret

0000069c <__fp_split3>:
 69c:	57 fd       	sbrc	r21, 7
 69e:	90 58       	subi	r25, 0x80	; 128
 6a0:	44 0f       	add	r20, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	59 f0       	breq	.+22     	; 0x6bc <__fp_splitA+0x10>
 6a6:	5f 3f       	cpi	r21, 0xFF	; 255
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <__fp_splitA+0x1a>
 6aa:	47 95       	ror	r20

000006ac <__fp_splitA>:
 6ac:	88 0f       	add	r24, r24
 6ae:	97 fb       	bst	r25, 7
 6b0:	99 1f       	adc	r25, r25
 6b2:	61 f0       	breq	.+24     	; 0x6cc <__fp_splitA+0x20>
 6b4:	9f 3f       	cpi	r25, 0xFF	; 255
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <__fp_splitA+0x2a>
 6b8:	87 95       	ror	r24
 6ba:	08 95       	ret
 6bc:	12 16       	cp	r1, r18
 6be:	13 06       	cpc	r1, r19
 6c0:	14 06       	cpc	r1, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	f2 cf       	rjmp	.-28     	; 0x6aa <__fp_split3+0xe>
 6c6:	46 95       	lsr	r20
 6c8:	f1 df       	rcall	.-30     	; 0x6ac <__fp_splitA>
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <__fp_splitA+0x30>
 6cc:	16 16       	cp	r1, r22
 6ce:	17 06       	cpc	r1, r23
 6d0:	18 06       	cpc	r1, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	f1 cf       	rjmp	.-30     	; 0x6b8 <__fp_splitA+0xc>
 6d6:	86 95       	lsr	r24
 6d8:	71 05       	cpc	r23, r1
 6da:	61 05       	cpc	r22, r1
 6dc:	08 94       	sec
 6de:	08 95       	ret

000006e0 <__fp_zero>:
 6e0:	e8 94       	clt

000006e2 <__fp_szero>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	66 27       	eor	r22, r22
 6e6:	77 27       	eor	r23, r23
 6e8:	cb 01       	movw	r24, r22
 6ea:	97 f9       	bld	r25, 7
 6ec:	08 95       	ret

000006ee <__mulsf3>:
 6ee:	0e 94 8a 03 	call	0x714	; 0x714 <__mulsf3x>
 6f2:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_round>
 6f6:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscA>
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__mulsf3+0x1c>
 6fc:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_pscB>
 700:	20 f0       	brcs	.+8      	; 0x70a <__mulsf3+0x1c>
 702:	95 23       	and	r25, r21
 704:	11 f0       	breq	.+4      	; 0x70a <__mulsf3+0x1c>
 706:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 70a:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_nan>
 70e:	11 24       	eor	r1, r1
 710:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>

00000714 <__mulsf3x>:
 714:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_split3>
 718:	70 f3       	brcs	.-36     	; 0x6f6 <__mulsf3+0x8>

0000071a <__mulsf3_pse>:
 71a:	95 9f       	mul	r25, r21
 71c:	c1 f3       	breq	.-16     	; 0x70e <__mulsf3+0x20>
 71e:	95 0f       	add	r25, r21
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	55 1f       	adc	r21, r21
 724:	62 9f       	mul	r22, r18
 726:	f0 01       	movw	r30, r0
 728:	72 9f       	mul	r23, r18
 72a:	bb 27       	eor	r27, r27
 72c:	f0 0d       	add	r31, r0
 72e:	b1 1d       	adc	r27, r1
 730:	63 9f       	mul	r22, r19
 732:	aa 27       	eor	r26, r26
 734:	f0 0d       	add	r31, r0
 736:	b1 1d       	adc	r27, r1
 738:	aa 1f       	adc	r26, r26
 73a:	64 9f       	mul	r22, r20
 73c:	66 27       	eor	r22, r22
 73e:	b0 0d       	add	r27, r0
 740:	a1 1d       	adc	r26, r1
 742:	66 1f       	adc	r22, r22
 744:	82 9f       	mul	r24, r18
 746:	22 27       	eor	r18, r18
 748:	b0 0d       	add	r27, r0
 74a:	a1 1d       	adc	r26, r1
 74c:	62 1f       	adc	r22, r18
 74e:	73 9f       	mul	r23, r19
 750:	b0 0d       	add	r27, r0
 752:	a1 1d       	adc	r26, r1
 754:	62 1f       	adc	r22, r18
 756:	83 9f       	mul	r24, r19
 758:	a0 0d       	add	r26, r0
 75a:	61 1d       	adc	r22, r1
 75c:	22 1f       	adc	r18, r18
 75e:	74 9f       	mul	r23, r20
 760:	33 27       	eor	r19, r19
 762:	a0 0d       	add	r26, r0
 764:	61 1d       	adc	r22, r1
 766:	23 1f       	adc	r18, r19
 768:	84 9f       	mul	r24, r20
 76a:	60 0d       	add	r22, r0
 76c:	21 1d       	adc	r18, r1
 76e:	82 2f       	mov	r24, r18
 770:	76 2f       	mov	r23, r22
 772:	6a 2f       	mov	r22, r26
 774:	11 24       	eor	r1, r1
 776:	9f 57       	subi	r25, 0x7F	; 127
 778:	50 40       	sbci	r21, 0x00	; 0
 77a:	9a f0       	brmi	.+38     	; 0x7a2 <__mulsf3_pse+0x88>
 77c:	f1 f0       	breq	.+60     	; 0x7ba <__mulsf3_pse+0xa0>
 77e:	88 23       	and	r24, r24
 780:	4a f0       	brmi	.+18     	; 0x794 <__mulsf3_pse+0x7a>
 782:	ee 0f       	add	r30, r30
 784:	ff 1f       	adc	r31, r31
 786:	bb 1f       	adc	r27, r27
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	91 50       	subi	r25, 0x01	; 1
 790:	50 40       	sbci	r21, 0x00	; 0
 792:	a9 f7       	brne	.-22     	; 0x77e <__mulsf3_pse+0x64>
 794:	9e 3f       	cpi	r25, 0xFE	; 254
 796:	51 05       	cpc	r21, r1
 798:	80 f0       	brcs	.+32     	; 0x7ba <__mulsf3_pse+0xa0>
 79a:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 79e:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 7a2:	5f 3f       	cpi	r21, 0xFF	; 255
 7a4:	e4 f3       	brlt	.-8      	; 0x79e <__mulsf3_pse+0x84>
 7a6:	98 3e       	cpi	r25, 0xE8	; 232
 7a8:	d4 f3       	brlt	.-12     	; 0x79e <__mulsf3_pse+0x84>
 7aa:	86 95       	lsr	r24
 7ac:	77 95       	ror	r23
 7ae:	67 95       	ror	r22
 7b0:	b7 95       	ror	r27
 7b2:	f7 95       	ror	r31
 7b4:	e7 95       	ror	r30
 7b6:	9f 5f       	subi	r25, 0xFF	; 255
 7b8:	c1 f7       	brne	.-16     	; 0x7aa <__mulsf3_pse+0x90>
 7ba:	fe 2b       	or	r31, r30
 7bc:	88 0f       	add	r24, r24
 7be:	91 1d       	adc	r25, r1
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret

000007c8 <__udivmodsi4>:
 7c8:	a1 e2       	ldi	r26, 0x21	; 33
 7ca:	1a 2e       	mov	r1, r26
 7cc:	aa 1b       	sub	r26, r26
 7ce:	bb 1b       	sub	r27, r27
 7d0:	fd 01       	movw	r30, r26
 7d2:	0d c0       	rjmp	.+26     	; 0x7ee <__udivmodsi4_ep>

000007d4 <__udivmodsi4_loop>:
 7d4:	aa 1f       	adc	r26, r26
 7d6:	bb 1f       	adc	r27, r27
 7d8:	ee 1f       	adc	r30, r30
 7da:	ff 1f       	adc	r31, r31
 7dc:	a2 17       	cp	r26, r18
 7de:	b3 07       	cpc	r27, r19
 7e0:	e4 07       	cpc	r30, r20
 7e2:	f5 07       	cpc	r31, r21
 7e4:	20 f0       	brcs	.+8      	; 0x7ee <__udivmodsi4_ep>
 7e6:	a2 1b       	sub	r26, r18
 7e8:	b3 0b       	sbc	r27, r19
 7ea:	e4 0b       	sbc	r30, r20
 7ec:	f5 0b       	sbc	r31, r21

000007ee <__udivmodsi4_ep>:
 7ee:	66 1f       	adc	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	88 1f       	adc	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	1a 94       	dec	r1
 7f8:	69 f7       	brne	.-38     	; 0x7d4 <__udivmodsi4_loop>
 7fa:	60 95       	com	r22
 7fc:	70 95       	com	r23
 7fe:	80 95       	com	r24
 800:	90 95       	com	r25
 802:	9b 01       	movw	r18, r22
 804:	ac 01       	movw	r20, r24
 806:	bd 01       	movw	r22, r26
 808:	cf 01       	movw	r24, r30
 80a:	08 95       	ret

0000080c <__divmodsi4>:
 80c:	05 2e       	mov	r0, r21
 80e:	97 fb       	bst	r25, 7
 810:	1e f4       	brtc	.+6      	; 0x818 <__divmodsi4+0xc>
 812:	00 94       	com	r0
 814:	0e 94 1d 04 	call	0x83a	; 0x83a <__negsi2>
 818:	57 fd       	sbrc	r21, 7
 81a:	07 d0       	rcall	.+14     	; 0x82a <__divmodsi4_neg2>
 81c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodsi4>
 820:	07 fc       	sbrc	r0, 7
 822:	03 d0       	rcall	.+6      	; 0x82a <__divmodsi4_neg2>
 824:	4e f4       	brtc	.+18     	; 0x838 <__divmodsi4_exit>
 826:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__negsi2>

0000082a <__divmodsi4_neg2>:
 82a:	50 95       	com	r21
 82c:	40 95       	com	r20
 82e:	30 95       	com	r19
 830:	21 95       	neg	r18
 832:	3f 4f       	sbci	r19, 0xFF	; 255
 834:	4f 4f       	sbci	r20, 0xFF	; 255
 836:	5f 4f       	sbci	r21, 0xFF	; 255

00000838 <__divmodsi4_exit>:
 838:	08 95       	ret

0000083a <__negsi2>:
 83a:	90 95       	com	r25
 83c:	80 95       	com	r24
 83e:	70 95       	com	r23
 840:	61 95       	neg	r22
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	08 95       	ret

0000084a <_exit>:
 84a:	f8 94       	cli

0000084c <__stop_program>:
 84c:	ff cf       	rjmp	.-2      	; 0x84c <__stop_program>
